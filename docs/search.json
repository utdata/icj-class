[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to Coding for Journalists",
    "section": "",
    "text": "Preface\nThis is a guide for the UT-Austin School of Journalism and Media course “Intro Coding for Journalists”. The class teaches basic HTML, CSS and JavaScript skills, culminating in a static-page generator app from data.\nThe online version of the book is [link TK].\nThe Canvas course is your official word on assignment due dates and such, but most lectures, assignment details and files are found here."
  },
  {
    "objectID": "index.html#the-structure-of-the-class",
    "href": "index.html#the-structure-of-the-class",
    "title": "Intro to Coding for Journalists",
    "section": "The structure of the class",
    "text": "The structure of the class\nYou can see the chapter breakdown, but the book is more or less structured like this:\n\nUsing command-line tools.\nComputer setup\nHTML: The skeleton of the web\nCSS: The skin of the web\nJavaScript: The muscles of the web\nSASS: Better web skins\nBootstrap: OMG, the web solved\nStatic apps: HFS, I can make it"
  },
  {
    "objectID": "bash-00-intro.html#an-important-note-for-windows-users",
    "href": "bash-00-intro.html#an-important-note-for-windows-users",
    "title": "Terminal",
    "section": "An IMPORTANT note for Windows users",
    "text": "An IMPORTANT note for Windows users\n\nWindows users need to install a program called Git before they proceed with this lesson. Go to this part of the icj-setting-up lesson to follow the directions to install Git, then come return here when the directions tell you to."
  },
  {
    "objectID": "bash-00-intro.html#a-word-about-my-lessons",
    "href": "bash-00-intro.html#a-word-about-my-lessons",
    "title": "Terminal",
    "section": "A word about my lessons",
    "text": "A word about my lessons\nFor all my lessons I typically put directions for YOU to do in numbered lists:\n\nDo this thing.\nThen do that thing.\n\nSometimes there is code after or among the the directions, but it is in a code block with a grey background.\n\nDo this thing:\n\n$ command --flag\nThis is the output\n\nThen do the next thing.\nSometimes the code will be in the bullet item itself, but still in a code block. Do this: $ command.\n\nI typically use an unordered bullet list for non-“do” things:\n\nThis is just a note about something\nAnd this is another\n\nBut sometimes I forget and put “do” things in an unordered list. Hopefully you can typically tell when it is a direction or not.\nRegular paragraph text such as this one are usually an explanation, background or whatever.\nIf something is in bold or IN ALL CAPS or in italics for emphasis then there is usually a reason why, so pay attention.\n\nSometimes I put unimportant but interesting side notes in blockquotes like this.\n\n\nIMPORTANT NOTE: But sometimes I’ll put important notes in these blocktext sections, too. I’ll usually say if they are important in bold at the beginning, like this one.\n\nI try to be consistent, but I’m human so sometimes I’m not."
  },
  {
    "objectID": "bash-00-intro.html#using-bash-and-a-terminal",
    "href": "bash-00-intro.html#using-bash-and-a-terminal",
    "title": "Terminal",
    "section": "Using bash and a terminal",
    "text": "Using bash and a terminal\n\nWhat is a terminal?\nMoving around"
  },
  {
    "objectID": "bash-00-intro.html#using-git-and-github",
    "href": "bash-00-intro.html#using-git-and-github",
    "title": "Terminal",
    "section": "Using Git and Github",
    "text": "Using Git and Github\n\nGit & Github\nGit in VS Code"
  },
  {
    "objectID": "bash-01-terminal.html#terminal-vs-shell",
    "href": "bash-01-terminal.html#terminal-vs-shell",
    "title": "2  Bash",
    "section": "2.1 Terminal vs shell",
    "text": "2.1 Terminal vs shell\nTerminal (Mac) and Git Bash (Windows) are programs that can run a shell, which is a text-based user interface where you type commands that your computer understands.\n\nPeople (including myself) will use the term shell and terminal interchangeably. This means when I say “type into your shell” or “in your terminal”, I mean type at the prompt in your Terminal or Git Bash program. (Just to add confusion, I use a different Mac terminal program called iTerm, but Terminal is fine.)\n\nDevelopers use a shell to issue commands to their computer to do things, like install programs, change what folder their are in, etc. Using a terminal program to use your computer can be confusing at first, but it will become second-nature as you progress through this class.\nThe shell programming language we will use for these text-based interactions is called Bash.\nWindows doesn’t understand Bash at all without the help of another program. This is why we installed Git Bash so we can all speak the same language. (If you are a Windows user and haven’t yet installed Git, do it now.)\nFor what its worth, Bash is a Unix-based program. Most of the Internet runs on Unix (or Linux) computers.\nMacs understand Bash natively, but some day they will change to a similar language called zsh. When you launch a shell on newer Macs you might get a message The default interactive shell is now zsh. To update your account to use zsh, please run chsh -s /bin/zsh. DON’T DO THIS! JUST IGNORE IT. We will continue to use Bash. Later we will add a command to disable this message. If somehow your terminal gets set to use zsh, you can check and/or change it to Bash."
  },
  {
    "objectID": "bash-01-terminal.html#launch-your-terminal",
    "href": "bash-01-terminal.html#launch-your-terminal",
    "title": "2  Bash",
    "section": "2.2 Launch your terminal",
    "text": "2.2 Launch your terminal\n\nFor Macs you can use your Launchpad and type in Terminal and launch it. Or you can use the Spotlight search to find it.\n\nIt will look like this:\n\n\n\nMac Terminal\n\n\n\nFor Windows you can go to your Start menu and type in Git Bash and launch it.\n\nIt will look like this:\n\n\n\nWindows Git Bash"
  },
  {
    "objectID": "bash-01-terminal.html#the-terminal-prompt",
    "href": "bash-01-terminal.html#the-terminal-prompt",
    "title": "2  Bash",
    "section": "2.3 The terminal prompt",
    "text": "2.3 The terminal prompt\nWhen I launch my terminal, the commands inside it look like this:\nCOMMA21617:~ ccm346$\nThe first part before the ~ is my computer name, and the part after is my username.\n\nI actually shorten my prompt name to crit:~$ so you’ll see that in my examples. We’ll shorten yours later, too.\n\nLastly we have the $. This is the “prompt” where you type commands. You type your commands AFTER the $ and then hit Return to execute them.\nWhen I give command instructions for you to type, I sometimes (but not always) include the $ at the beginning to indicate this should go at the prompt in your terminal. DON’T TYPE IN THE $. For instance:\n$ pwd\nMeans you type in just “pwd” and then hit return."
  },
  {
    "objectID": "bash-01-terminal.html#typing-vs-copypaste",
    "href": "bash-01-terminal.html#typing-vs-copypaste",
    "title": "2  Bash",
    "section": "2.4 Typing vs copy/paste",
    "text": "2.4 Typing vs copy/paste\nI encourage you to type commands into your terminal instead of copy and pasting them from the lessons. Build muscle and mind memory. Typing a command wrong and then having to figure out why it broke will help you learn it and remember it. If you just copy and paste blindly, then you won’t learn anything other than command-c and command-v."
  },
  {
    "objectID": "bash-02-move.html#goal",
    "href": "bash-02-move.html#goal",
    "title": "3  Moving around",
    "section": "3.1 Goal",
    "text": "3.1 Goal\nOur goal for this lesson is to become familiar with a terminal and the Bash commands to move around and access different folders on your computer.\nWe’ll also create your class folder, which you will use for the rest of the semester.\n\nI use the terms “folder” and “directory” interchangeably here. They are the same thing."
  },
  {
    "objectID": "bash-02-move.html#pwd",
    "href": "bash-02-move.html#pwd",
    "title": "3  Moving around",
    "section": "3.2 pwd",
    "text": "3.2 pwd\nOne of the hardest things to get a handle on when first working in the terminal is to figure out where you are on your computer. It’s important, because you can run commands on any file on your computer from where you are, but you gotta know where that is before you can do so. So, we’ll use pwd, or “print working directory”.\n\nIn your Terminal, type and execute:\n\n$ pwd\n\nRemember to NOT type the $.\n\nWhen I do this on my machine, here is what the command and response look like:\ncrit:~$ pwd\n/Users/ccm346\nBecause I’m using my work computer my user directory is called “ccm346”. Yours might be your name or part of your name. This user directory is called your “home directory”. All of your computer files are stored inside your home directory.\nWhen you launch a new terminal it usually puts you inside this directory."
  },
  {
    "objectID": "bash-02-move.html#list-directory",
    "href": "bash-02-move.html#list-directory",
    "title": "3  Moving around",
    "section": "3.3 List directory",
    "text": "3.3 List directory\nLet’s see what is inside our home directory.\n\nDo this:\n\n$ ls\nThis will list everything in the directory you are in. Mine looks like this:\ncrit:~$ ls\nApplications            Music\nApplications (Parallels)    Pictures\nAudio               Public\nBox Sync            VirtualBox VMs\nDesktop             dumps\nDocuments           gsutil\nDownloads           pspp.jnl\nDropbox             trifacta\nLibrary             waller.csv.sav\nMovies\nIt listed the names of all the folders and files of the directory I’m in. This is similar to opening a folder browser on your computer and then opening your home folder and looking inside of it.\n\n3.3.1 Flags\nBut sometimes, I want to know more information about the files, like their modification date. To do this, we introduce something called flags, which add nuance or detail to a terminal command. They start with a dash, and you can pile them on, as I’ll demonstrate.\n\nFirst, try this:\n\n$ ls -l\n\n(That is dash L, not a number 1. Watch the spaces, too.)\n\nMy output looks like this:\ncrit:~$ ls -l\ntotal 15880\ndrwxr-xr-x   7 christian  staff      238 Jul 22  2015 Applications\ndrwxr-xr-x@  6 christian  staff      204 Feb 14  2014 Applications (Parallels)\ndrwxr-xr-x   5 christian  staff      170 Jun 12 14:53 Audio\ndrwx------  22 christian  staff      748 Jul  4 10:17 Box Sync\ndrwx------+ 24 christian  staff      816 Jul  7 19:01 Desktop\ndrwx------+ 27 christian  staff      918 Jul  5 14:53 Documents\ndrwx------+ 10 christian  staff      340 Jul  5 15:29 Downloads\ndrwx------@ 38 christian  staff     1292 Jul  5 23:17 Dropbox\ndrwx------@ 63 christian  staff     2142 Dec 10  2015 Library\ndrwx------+  9 christian  staff      306 Jul  1 15:07 Movies\ndrwx------+ 10 christian  staff      340 Jul  1 15:07 Music\ndrwx------+ 31 christian  staff     1054 Jul  1 15:07 Pictures\ndrwxr-xr-x+  4 christian  staff      136 Mar  4  2013 Public\ndrwx------   8 christian  staff      272 Jul  8 09:48 VirtualBox VMs\ndrwx------   4 christian  staff      136 Mar 26  2014 dumps\ndrwxr-xr-x  14 christian  staff      476 Oct  1  2015 gsutil\n-rw-r--r--   1 christian  staff    78626 Aug 13  2015 pspp.jnl\ndrwxr-xr-x   5 christian  staff      170 Jul  4 20:24 trifacta\n-rw-r--r--   1 christian  staff  8046293 Aug 13  2015 waller.csv.sav\nWell, that’s a lot of info, and much of it jibberish. Here is what each part of those lines means …\n\ndrwxr-xr-x and similar is the permission information for a that file or folder. We aren’t going to get into it here, but you can read more if you like.\nThe next number is the number of files inside the folder, sort of. If this is a file, the number will be “1”. If it is a folder, the number will always be at least “2”. We’ll come back to this.\nNext is the owner of the file or folder.\nNext is a permission level for the user when the file was created.\nNext is the file size in bytes.\nNext is the last modified date of the file or when a file was added to the folder.\nFile or folder name.\n\n\n\n3.3.2 Hidden files\nLet’s add another flag to your command.\n\nDo this:\n\n$ ls -al\nMy list got a TON longer:\ncrit:~$ ls -al\ntotal 16144\ndrwxr-xr-x+  71 christian  staff     2414 Jul  8 17:16 .\ndrwxr-xr-x    5 root       admin      170 Feb 19 06:56 ..\n-r--------    1 christian  staff        7 Nov  2  2014 .CFUserTextEncoding\n-rw-r--r--@   1 christian  staff    30724 Jul  7 19:00 .DS_Store\ndrwxr-xr-x    3 christian  staff      102 Jul  9  2014 .R\ndrwxr-xr-x    3 christian  staff      102 Mar  5  2013 .RSA\n-rw-r--r--    1 christian  staff      331 Jul 12  2014 .Rapp.history\n-rw-r--r--    1 christian  staff      149 Jul 16  2015 .Rhistory\ndrwx------  160 christian  staff     5440 Jul  7 18:59 .Trash\ndrwxr-xr-x   14 christian  staff      476 Jan 17 11:46 .atom\n-rw-------    1 christian  staff     7589 Jul  8 17:00 .bash_history\n-rw-r--r--    1 christian  staff     1130 Oct  1  2015 .bash_profile\ndrwxr-xr-x   15 christian  staff      510 Jul  7 19:06 .bash_sessions\n-rw-r--r--    1 christian  staff      216 Jul  7 19:15 .bashrc\n-rw-------    1 christian  staff    15745 Oct  1  2015 .boto\n&lt;snip&gt;\ndrwx------    4 christian  staff      136 Mar 26  2014 dumps\ndrwxr-xr-x   14 christian  staff      476 Oct  1  2015 gsutil\n-rw-r--r--    1 christian  staff    78626 Aug 13  2015 pspp.jnl\ndrwxr-xr-x    3 christian  staff      102 Jul  8 17:20 test\ndrwxr-xr-x    5 christian  staff      170 Jul  4 20:24 trifacta\n-rw-r--r--    1 christian  staff  8046293 Aug 13  2015 waller.csv.sav\n\nThe -a flag means “all” files and folders, including hidden ones. When you normally open a folder on your computer, it only shows you some of the files and folders available. Hidden folders and files start with a period, and there can be a lot of them … I have 50 of them in my home folder, far more than regular files and folders.\n\nLet’s list again with just the -a flag:\n\n$ ls -a\nHere is the top of my list:\n(base) crit:~$ ls -a\n.\n..\n.CFUserTextEncoding\n.DS_Store\n.QtWebEngineProcess\n.R\n.Renviron\n.Rhistory\nBut let’s consider the first two returns:\n(base) crit:~$ ls -a\n.\n..\nThese are two special designations in the Unix world. A single period . designates “this directory” and two periods .. designates the “parent directory”, i.e. the folder “above” this one. Every directory has these, so that’s why the ls -l always shows two items inside a directory, even if it is “empty” of regular files or folders.\nWe can use these period designations (there’s probably a fancy word for them I don’t know) to move around into different directories, and to manage files in our current directories. They become super important when we make “paths” between files in our programs and web pages.\nLet’s see this “dot” designation in action.\n\nDo this command:\n\n$ open .\nSince you are inside your “home directory”, this should open that folder in your Finder."
  },
  {
    "objectID": "bash-02-move.html#cd",
    "href": "bash-02-move.html#cd",
    "title": "3  Moving around",
    "section": "3.4 cd",
    "text": "3.4 cd\nBoth Macs and PCs have a Documents folder inside each user’s home folder. It’s typically where you save all your stuff (better than your Desktop!). It’s time for us to move in our Terminal to inside this Documents folder.\nThe cd command is change directory.\n\nLet’s change directory into your Documents:\n\n$ cd Documents\n\nAN IMPORTANT WORD about iCloud, OneDrive an other cloud storage services. If you use one of these services you might regularly save your files in those folders so they are backed up. I WOULD NOT save projects from this class in a cloud drive because our projects can have thousands of tiny files (like 10,000+) that clog up syncing services. Don’t worry, your work will be backed up on Github, which accounts for this.\n\nLet’s do a review real quick. Where are you? What is your “working directory” now?\n\nDo pwd to check:\n\n$ pwd\nIt should be something like this …\n/Users/ccm346/Documents\n… and it should end with Documents. If it doesn’t, you aren’t in the right place.\n\nNow use ls to list what is in your Documents folder.\n\n$ ls\nPerhaps you’ll recognize some of the folders listed here if you regularly use your Documents folder."
  },
  {
    "objectID": "bash-02-move.html#mkdir",
    "href": "bash-02-move.html#mkdir",
    "title": "3  Moving around",
    "section": "3.5 mkdir",
    "text": "3.5 mkdir\nNext we are going to make a new empty folder to store all our class files using the mkdir command.\n\nDo this:\n\n$ mkdir icj\n\nThen use ls again to see your new directory amongst the others.\n\nCreating a directory like this is exactly the same as opening a desktop window on your Mac creating a new folder. Folders and directories are the same thing.\n\nCool, let’s make another directory inside of icj.\n\n$ mkdir icj/newdirectory\n\nNow you can do an ls on icj folder to see what is inside it.\n\n$ ls icj\nIt should show you newdirectory. Something like this:\ncrit:~$ ls icj\nnewdirectory\nA couple of things about this:\nYou have listed the contents of the icj directory without being inside of it. You can list the contents of any folder on your computer if you know the path to it. In fact, you can do any command on any file or folder on your computer if you know its path. The path is the folder structure between where you “are” in the terminal to where the new file/folder is.\nIf you try to name a directory with a space in it, you’ll not get what you want unless you put quotes around it. Because of this, I avoid using spaces in files and folders and use - or _ instead. I avoid capitalization, too, because our folders become url names and sometimes caps mess it up, especially on PCs.\n\nNow, let’s go inside the icj folder:\n\n$ cd icj\n\nLet’s see what is inside:\n\n$ ls\nThat should show you a result with the newdirectory that we created earlier.\nHere are the commands and results of these last few commands in my terminal. I started with a pwd so you can see where I started from:\ncrit:~$ pwd\n/Users/ccm346\ncrit:~$ cd icj\ncrit:icj$ ls\nnewdirectory\ncrit:icj$ pwd\n/Users/ccm346/icj\nSo to break that down:\n\nI printed my working directory, which showed me I was in my Users folder.\nI did cd into icj which moved me to inside that directory.\nNow that I’m inside icj, I did ls to see the contents of my current folder, and it showed me that newdirectory was indeed inside.\nI did pwd to show that my current working directory (where I am) is inside the icj folder.\n\nNow let’s get crazy:\n$ ls ../\nRemember I said that two periods means the parent directory? This should show you the list of files and folders in your Documents directory. Now, confirm where you are:\n$ pwd\nWhich should still be icj. So you had listed the files for the folder “above” you."
  },
  {
    "objectID": "bash-02-move.html#tab-completion",
    "href": "bash-02-move.html#tab-completion",
    "title": "3  Moving around",
    "section": "3.6 Tab completion",
    "text": "3.6 Tab completion\nIf you are doing ls or cd or otherwise referencing a path in the terminal, you don’t have to type the whole word for each directory. If you are trying to list the contents of “newdirectory”, then start with ls newd and then hit tab, and it will finish out the path as ls newdirectory. This is SUPER handy and you should use it often. Like all the time."
  },
  {
    "objectID": "bash-02-move.html#on-the-right-path",
    "href": "bash-02-move.html#on-the-right-path",
    "title": "3  Moving around",
    "section": "3.7 On the right path",
    "text": "3.7 On the right path\n\n3.7.1 Relative paths\nYou can ls files or cd into any directory relative to your current working directory using ../ to move “up” the folder structure and then use the name of the new directory to move inside it. So a path like this: ls ../../Users/Cory is to travel up two folders, then into Users then into Cory and then list all the files there.\nThis is very powerful in programming, because you might be writing and testing code on your own computer, but then run the program on another computer, so if file01.py needs to talk to file02.py, you don’t want to hard-code a path like http://utdata.cmcdonald.com/scripts/file02.py, because you might not always be on utdata.cmcdonald.com. If it’s in the same folder, you could use file02.py or ./file02.py.\n\n\n3.7.2 Root-relative paths\nYou can reference the “root” or the top level of whatever server or machine you are on even if you don’t know the name of it, by starting your path with a slash like this: /scripts/file01.py. That’s called a root-relative path. If you know the root-relative path to a file or folder, you can always find it no matter what directory you are currently in. We won’t use this much in this class.\n\n\n3.7.3 Absolute paths\nAn absolute path includes the domain or computer name. If I reference http://utdata.cmcdonald.com/scripts/file01.py in my code or script, it will only work if I’m on utdata.cmcdonald.com. If I move that script to another computer or server, it will still try to pull from utdata.cmcdonald.com instead of the version on the new computer. We avoid using absolute paths in this class for this reason.\n\n\n3.7.4 The home directory shortcut\nThere is also a path shortcut called ~/ that stands for “the home directory of the logged in person”. You might see that referenced in paths like ~/Documents/ but that would really take me to /Users/ccm346/Documents/ on my computer. But what’s cool is the same ~/Documents/ path works on YOUR computer, even though your user directory is different."
  },
  {
    "objectID": "bash-03-view.html#goal",
    "href": "bash-03-view.html#goal",
    "title": "4  Looking at files",
    "section": "4.1 Goal",
    "text": "4.1 Goal\nLet’s learn some more command-line juju for working with files. These commands will help look at code files on your computer."
  },
  {
    "objectID": "bash-03-view.html#set-up",
    "href": "bash-03-view.html#set-up",
    "title": "4  Looking at files",
    "section": "4.2 Set up",
    "text": "4.2 Set up\nLet’s make sure we are in our class folder. (This is review from Moving Around).\n\nMake sure you are in your icj project folder:\n\n$ cd ~/Documents/icj\n\nCreate a new folder called myproject:\n\nmkdir myproject\n\nUse cd to move inside the myproject folder then use pwd to make sure you are in the right place. The result should be something like this:\n\nUsers/ccm346/Documents/icj/myproject"
  },
  {
    "objectID": "bash-03-view.html#curl",
    "href": "bash-03-view.html#curl",
    "title": "4  Looking at files",
    "section": "4.3 curl",
    "text": "4.3 curl\nWe need some text to work with, so we’re going to pull down some text from Github. I might as well explain what we are doing.\ncurl is a command to transfer files. I think of it as “Capture URL”. We need to give curl a couple of flags (or options) for this job:\n\n-L stands for “Location”. It allows curl to follow a URL if it is redirected.\n-o for “output”. So we can write this to a file (which we are calling data.csv) instead of our terminal window. (We could use -O instead to just use the current file name.)\n\n$ curl -L -o data.csv https://raw.githubusercontent.com/utdata/icj-cli-tools/master/data/example.csv\nOK, now we should be able to ls and see our file is there. My output looks like this:\nchristian:myproject$ ls\ndata.csv"
  },
  {
    "objectID": "bash-03-view.html#head",
    "href": "bash-03-view.html#head",
    "title": "4  Looking at files",
    "section": "4.4 head",
    "text": "4.4 head\nhead allows you to print the top of a file to your screen so you can see what it is. It will default to show you the first 10 lines of a file. When you type this in, hit tab after you type “head da” to let tab completion help you.\n$ head data.csv\nwill give you this:\nchristian:myproject$ head data.csv\nQuarter,Taxpayer Number,Taxpayer Name,Taxpayer Address,Taxpayer City,Taxpayer State,Taxpayer Zip Code,Taxpayer County,Outlet Number,Location Name,Location Address,Location City,Location State,Location Zip Code,Location County,Location Room Capacity,Location Tot Room Receipts,Location Taxable Receipts\nQ1,32051871906,DSN HOSPITALITY LLC,4710 S LAMAR BLVD,AUSTIN,TX,78745,227,00001,DSN HOSPITALITY LLC,3110 STATE HIGHWAY 71 EAST,AUSTIN,TX,78745,011,37,91205.03,90870.01\nQ1,32054409241,JEANETTE WELSHE,13801 EVERGREEN WAY,AUSTIN,TX,78737,105,00001,BED AND BREAKFAST,13801 EVERGREEN WAY,AUSTIN,TX,78737,105,4,5417.92,5417.92\nQ1,32047098168,AMY MARIE CAPUTO,13601 PAISANO CIR,AUSTIN,TX,78737,105,00001,FLORA PROPERTIES/AMY M. CAPUTO,13601 PAISANO CIR,AUSTIN,TX,78737,105,4,7280.23,7280.23\nQ1,32055460730,NATHANIEL R BAUERNFEIND,163 KINLOCH CT,AUSTIN,TX,78737,105,00001,NATHANIEL R BAUERNFEIND,163 KINLOCH CT,AUSTIN,TX,78737,105,1,4735.0,4735.0\nQ1,32049290466,SHARON K FOSTER,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,00001,NUTTY BROWN CABIN,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,1,1030.0,1030.0\nQ1,32049290466,SHARON K FOSTER,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,00003,NUTTY BROWN MANOR,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,1,2100.0,2100.0\nQ1,32049290466,SHARON K FOSTER,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,00004,ROADRUNNER'S BUNGALOQ,12932 NUTTY BROWN RD,AUSTIN,TX,78737,105,1,0.0,0.0\nQ1,32020638758,LESLIE K RENFRO,12803 SHOSHONI TRL,AUSTIN,TX,78737,105,00002,THISTLE HILL STUDIO,12803 SHOSHONI TRL,AUSTIN,TX,78737,105,1,871.0,871.0\nQ1,32050668345,\"TIPPING T, LLC\",4405 MANZANILLO DR,AUSTIN,TX,78749,227,00001,TIPPING T,13127 FITZHUGH RD,AUSTIN,TX,78736,105,1,9427.0,9427.0\nIt might look like more than 10 lines on your screen because they wrap.\nIf you want to specify how many lines to display, use the flag -n for number of lines:\n$ head -n 2 data.csv\nThat will give you two lines, the first which is the header of that file."
  },
  {
    "objectID": "bash-03-view.html#tail",
    "href": "bash-03-view.html#tail",
    "title": "4  Looking at files",
    "section": "4.5 tail",
    "text": "4.5 tail\ntail shows you the bottom of the file. It takes the same -n flags.\n$ tail data.csv\nThat result won’t show you the header, because you are looking at the last 10 lines of the file."
  },
  {
    "objectID": "bash-03-view.html#wc",
    "href": "bash-03-view.html#wc",
    "title": "4  Looking at files",
    "section": "4.6 wc",
    "text": "4.6 wc\nwc I think of as “word count”, but it can also count lines and bytes.\n$ wc data.csv\ngives you this output:\nchristian:myproject$ wc data.csv\n     100    1136   15642 data.csv\nThe first column is lines, then words, then bytes.\nIf you want just the number of lines, us -l.\n$ wc -l data.csv"
  },
  {
    "objectID": "bash-03-view.html#cat",
    "href": "bash-03-view.html#cat",
    "title": "4  Looking at files",
    "section": "4.7 cat",
    "text": "4.7 cat\ncat means to concatenate and print a file to your window. If you feed it two file names, it will give you the first, then the other. Do this:\n$ cat data.csv\nThis will print the contents of data.csv to your screen. It’s showing all 100 lines.\nBut what you can do is redirect that output into a file by using &gt;. Do this.\n$ cat data.csv &gt; file01.csv\nWhat you’ve done is take the contents of data.csv, printed the contents and then redirected that content into another file called file01.csv. Since that didn’t exist already, it was created on the fly.\nIf I wanted to take two files, file01.csv and file02.csv, and then combine them into a single file on your computer, it would look like this. (You don’t have to do these commands, just understand them.):\n$ cat file01.csv file02.csv &gt; combined.csv\nNow, combined.csv would be the combination of both files."
  },
  {
    "objectID": "bash-03-view.html#grep",
    "href": "bash-03-view.html#grep",
    "title": "4  Looking at files",
    "section": "4.8 grep",
    "text": "4.8 grep\ngrep is for using regular expressions to find patterns within a file. It takes a regular expression input and the file name and gives in return the lines of the file that match that regular expression.\n$ grep 'ATX INVESTMENTS' data.csv\n… will print out just the lines in data.csv that have ‘ATX INVESTMENTS’ somewhere in them. Note that the name in the field is ‘ATX INVESTMENTS LLC’ but it found it with just part of that.\nIf you want to just know how many lines there are with ‘ATX INVESTMENTS’, use the -c flag for count:\n$ grep -c 'ATX INVESTMENTS' data.csv\nThe answer should be 4."
  },
  {
    "objectID": "bash-03-view.html#piping-commands",
    "href": "bash-03-view.html#piping-commands",
    "title": "4  Looking at files",
    "section": "4.9 Piping commands",
    "text": "4.9 Piping commands\nYou can “pipe” the results of one command into another command with the | character, which you’ll find as the shift of your backslash key. You can string commands together with that, so if I just wanted to see the first lines that has ‘ATX INVESTMENTS’, I can do this:\n$ grep 'ATX INVESTMENTS' data.csv | head -n 1"
  },
  {
    "objectID": "bash-04-commands.html#man",
    "href": "bash-04-commands.html#man",
    "title": "5  Commands in bash",
    "section": "5.1 man",
    "text": "5.1 man\nIf you are unsure about how any of these terminal commands work, there are manual pages for each one already on your computer. Now, I’m not saying they are extremely well-written and intuitive, but they are there.\n$ man cd\nWill open the manual page for cd and tell you have to change directory.\nBut man pages, as they are called, are a special program themselves, and have a different commands to negotiate around them, as you’ll discover quickly if you try to scroll to see more.\n\nhit f or space to advance one page through the file\nhit j to go down one line\nhit k to go up one line\nhit g to go the the top\nhit q to quit\n\nMoving around the man pages is frustrating at first. There are online versions of these, but the man command doesn’t need the internet. These files are already on your computer.\nMan pages are useful to figure out the options or flags for commands, so you can learn that ls -lt will give you that long list sorted in order of time, most-recently modified at top."
  },
  {
    "objectID": "bash-04-commands.html#h-for-help",
    "href": "bash-04-commands.html#h-for-help",
    "title": "5  Commands in bash",
    "section": "5.2 -h for help",
    "text": "5.2 -h for help\nSometimes there isn’t a man page for a command, but there is help file. If we wanted to look at a list of all the flags for the curl program, we would can get “help with the -h flag. I would type:\n$ curl -h\nThis gives you a list of the flags and arguments for that command, along with other information."
  },
  {
    "objectID": "git-00-intro.html#defining-version-control",
    "href": "git-00-intro.html#defining-version-control",
    "title": "Git",
    "section": "Defining version control",
    "text": "Defining version control\nSearch on google and you’ll find a ton of posts, tutorials and videos about Git and version control systems. I encourage you to explore some that fit your learning style. We’ll just cover enough here to get you going and we’ll learn by doing.\nAt its most basic, Git allows you to save your work at intervals and it keeps a history of files on your computer when you choose to save them. Once you have something that works, you can “commit” it and leave a comment about what you’ve done. You can then go back to that exact point in time if you need to. This frees the developer to experiment and make changes that may NOT work, because you know you can always go back. It works for any kind of file you want to put under version control.\nGit allows for a “distributed” version control system, meaning that all the code can be stored on a central server (like on the Internet) so other people can work on the shared code. When they “check out” a repository (or repo), they get the entire code base. Contributors can then make changes and “check in” those changes for others to use.\nGithub is the central server we will use to save our code. It’s also a project management tool and a social network of sorts. It’s probably the most popular programming service on the planet. Bitbucket Cloud is another popular code sharing service."
  },
  {
    "objectID": "git-00-intro.html#our-goals",
    "href": "git-00-intro.html#our-goals",
    "title": "Git",
    "section": "Our goals",
    "text": "Our goals\nA repository — or “repo” — is a folder on your computer that is tracked by git. Our goals here are the following:\n\nCreate a local repo inside our icj project folder.\nCreate a public repo on Github.\nConnect the local repo to public Github repo.\nEdit files and use the git cycle to save and push your changes to Github.\n\n\nUse Google Chrome\nI recommend that you use Google Chrome as your browser for this class. It is what I’ll use in class and demonstrations, and it has lots of development tools built in that will come in handy.\n\n\nVisual Studio Code\nWe’ll start using our code editor, Visual Studio Code, with this assignment. I’ll sometimes refer to this program as VS Code or just Code.\nIn our computer setup and command-line lessons, we used either the Terminal/Git Bash programs to talk to our computers. Now that we have VS Code installed, we’ll almost always use our Terminal from inside VS Code. It’s the same thing, just tucked inside VS Code."
  },
  {
    "objectID": "git-00-intro.html#project-setup",
    "href": "git-00-intro.html#project-setup",
    "title": "Git",
    "section": "Project setup",
    "text": "Project setup\nThis is something we’ll do time and again. Don’t just follow the steps blindly … learn and understand what you are doing so you can do this without thinking much about it.\n\nFolders and files\n\nUse the Finder on your computer to locate your Documents/icj folder and inside of it create a new project folder called yourname-git-practice. Always use all lower-case letters and dashes instead of space. It’s just good practice.\nLaunch Visual Studio Code and start a New window. (You can find under the File menu, or use Command-option-N).\nOn the Welcome screen, you will see a link called Open folder. (If you don’t see this, click on the page icon at top-left, which is the Explorer menu.) Click on that Open Folder button and negotiate your way to your project folder, select it and click the Open button.\n\n\n\n\nOpen Folder\n\n\n\nGo to the Terminal menu and choose New Terminal. This will open a terminal window inside of VS Code, which is super handy. The top line of the terminal should give you the path to inside your project folder, like ~/Documents/icj/christian-git-practice. If it doesn’t then you didn’t open the folder first.\n\n\n\n\nVS Code\n\n\n\n\nThe README\nEvery coding project should have a special file called a README file which outlines what the project is and how to use it. It is often written in Markdown, which is a text-based syntax that Github turns into pretty HTML when it is published, but is completely readable as text. It also has great support to show code, tables, lists and such. Here is a cheatsheet of the syntax and 10-minute tutorial you may find useful. For what it is worth, this document and all lessons for this class are written in Markdown.\nI want you to always have a README file with your projects, and it should always be called README.md. Yes, with capital letters for README and lower-case letters for .md. It breaks filename conventions because it is special.\n\nCreate the file first. I would recommend using the Terminal inside VS Code and doing touch README.md. (There are other ways, but get used to using touch).\nThe file now appears in the file explorer in VS Code on the left. You can click on that to open it.\nNow add a title, your name, the assignment name and when it is due. Like this:\n\n# Christian's git practice\n\nBy Christian McDonald, Intro Coding for Journalists class\n\nThis repo is a class assignment to learn git. It is due Month Day, Year.\n\n\n\nMake readme\n\n\n\nUpdate the files with your info, save and close it.\n\nI want something like that on every project you make in this class: title, your name, the assignment and when it is due. Your projects early in the class won’t have an extensive README like some others, but I want you to be in the habit of using them.\n\n\nUsing gitignore\nYour computer and the programs that run on it create all kinds of hidden files that you don’t normally see. When looking in folders with the VS Code explorer, you might on a Mac a file called .DS_Store, which is a hidden file the computer creates when you view a folder. On Windows, you might see .Thumbs.db, which is a record of images saved in a folder. We often don’t want to save these files or others into our git history, so we create another hidden file called a .gitignore file to tell git to ignore certain things. An easy way to create one is to use the website gitignore.io.\nCreating hidden files like the .gitignore through the Mac/Windows regular file structure can be tricky, so it is best to do it from a terminal.\n\nIn your Integrated Terminal in VS Code type the command touch .gitignore. Yes, it starts with a period and there is NO file extension for this file, so no .txt or anything … it should be just .gitignore. Once created, it should show up in your list of files in VS Code on the left-hand screen. Go ahead and open it in VS Code by double-clicking on in the explorer.\nGo to the website gitignore.io in a browser. Type in “VisualStudioCode” and choose it from the list. (Make sure is it “VisualStudioCode” and not just “VisualStudio”). Type in “macOS” and add it, then “Windows” and add it to the list. Do them both, even if you only work on a Mac, just to be nice for future collaborators. (If you were using other programs like MicrosoftOffice or languages like Python, you would add those as well.) Click the Create button.\nCopy all the code there and paste it into your .gitignore file and save it. You can then close the file.\n\nYou can open this screencast of making a gitignore file in a new browser window (control-click on the link and choose Open in new tab) and watch an example.\n(Gifs are really big files, so for longer demos I use videos. By the way, in the video I switch between programs by holding down the command button and then using tab to cycle through the programs. Very useful! It’s Alt-tab on a Windows.)\n\n\nInitializing your local repo\nThe next steps are to initialize your local git record, stage files and commit them. We do these commands in our integrated Terminal.\n\nDo git init to initialize the repo so git will start tracking changes.\n\n\n\nStage changes\nNext we will “stage” our files by adding them to the list of tracked files. You sometimes don’t want to track all your files, so you can add each one using their file name. This time we do want to track all of them, so we’ll use a shortcut:\ngit add .\nThis will add (or “stage”) all the untracked files to git, but it hasn’t saved them yet.\n\n\nCommit changes\nNext we want to “commit” them (which means save them) and include a message to say why we made changes to these files. ALWAYS include the -m flag when you commit, with a message.\n\nDo this command in your Terminal. Note the quotes:\n\ngit commit -m \"my first commit\"\n\n\n\nfirst commit\n\n\nCongratulations … you have now saved a snapshot in time of all these files.\n\n\nCreating your public Github repo\n\nGo to github.com (and log in if you are not) and find the + sign at the top right.\nClick on that and choose New repository.\n\nName the repo the same as your local one: yourname-git-practice. (I always name my Github repo the same name as the folder on my computer for clarity, but know they technically could be different.)\nGive it a description so you know what it is later.\nKeep it Public.\nDO NOT include a README here, or a gitignore or license.\nClick Create repository.\n\n\nOnce you create the repo, you’ll get a page back with a lot of code.\n\nMake sure the SSH button is selected in the top box. (We are selecting this because during your computer setup we set up SSH keys between your computer and Github.)\nGo to the second block “… or push an existing repository from the command line” and copy the code there to get the three lines.\n\n\n\n\nConnect to Github\n\n\n\nPaste those into your VS Code Terminal and run it. You might have to press return again to run the last line.\n\nHere is what these three lines of code did:\n\nAdded a git remote connection between your local computer and the Github repo. Now your local files are are linked to those store don the Internet.\nChanged the name of your branch to main. (More on this below.)\nPushed the changes from your local machine to Github so the Internet has the most recent version.\n\nFrom now on, you’ll use git push origin main to push your code.\n\nIf you go back to your Github repo and refresh the page you’ll see your new files listed there.\n\nHere is a screencast of the complete project setup of creating a local project, README, gitignore, initializing git, creating a Github repo and connecting it to your local project.\n\n\nChange master to main\nWe’re going to digress here a minute. When you created your repo the default “branch” was named master, a term that many people find offensive given the history of slavery in the world. At some point git will change the default branch name to main. Github, our internet cloud service we are using, has already made the switch, one of the commands Github suggested you do was git branch -M main, which change the branch name.\nWe only have to do this once, the first time we set up a repo.\n\nYou may see references to master in my videos, lessons and elsewhere as I make the switch to using main. If you see reference to the master branch in any directions, you might try main first.\n\n\n\nAdding a new file\nWe’re going to use the Integrated Terminal again (I’m just going to say “terminal” from now on) to create yet another a new file, commit it, and then push it to Github.\n\nGo into the terminal and use the touch command to create a new file, using your name for the file name. It will be a Markdown file:\n\ntouch myname.md\n\nYou’ll notice the file show up in the list of files in the File Explorer on the left. Click on that and it will open the file in the editor.\nAdd a headline and some text to the file, like this below:\n\n# A new Markdown page\n\nI'm learning git and Github and this repo will help me. Don't judge.\n\nIf we didn’t talk about Markdown in detail earlier, now is a good time to review the Markdown syntax.\n\nYou can save the file, but keep it open.\n\n\nThe git cycle\nThere are typically three steps to committing code in git:\n\ngit add to stage files that have changed.\ngit commit -m to commit (or save) the files. We’ll add the message at the same time.\ngit push origin &lt;branch&gt; to publish the changes to Github. We will almost always be using the main branch.\n\nThere is a fourth command we also use with the three above, but you can do it at any time to check where you are in the git workflow:\n\ngit status to check what files have changed, etc.\n\nWe use these commands A LOT.\nLet’s check the status of our repo.\n\nGo into the Terminal, and type in the git status. Here is my command and response:\n\n$ git status\nOn branch main\nYour branch is up-to-date with 'origin/main'.\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n        christian.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n✔ ~/Documents/icj/christian-git-practice [main|…1]\nWe have one untracked file, christian.md, and Git has been nice enough to tell you how to stage your file. Let’s add it with git add christian.md (but use your filename). Here is the command and response:\n$ git add christian.md\n✔ ~/Documents/icj/christian-git-practice [main|●1]\nThere wasn’t really a response back because it “worked”, but because I have the git-bash-prompt extension installed (which you should have installed in setting-up), I have some feedback. We haven’t talked about that yet, but that part [main L|●1] tells me we are on the main branch (more on that later) and that I have one staged file. Just watch how those signals change as we go through the cycle.\nNow let’s commit the file. We will also add a “message” to the commit using the flag -m, which you should ALWAYS do. It’s good coding practice. Here is the call and response:\n$ git commit -m \"adding my new file\"\n[main 8809887] adding my new file\n 1 file changed, 3 insertions(+)\n create mode 100644 christian.md\n✔ ~/Documents/icj/christian-git-practice [main ↑·1|✔]\nCongrats! You have made your second commit, saving this point in time on your computer. Our next step is to push that new change to Github.\n\nUse the git push origin main command to push this to Github. Part of the push command is to say exactly where to send these change. This is the command and the response:\n\n$ git push origin main\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 274 bytes | 274.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0)\nTo github.com:critmcdonald/christian-git-practice.git\n   50688af..2f80abc  main -&gt; main\n✔ ~/Documents/icj/christian-git-practice [main L|✔]\nThat’s a lot of mumbo jumbo that we don’t have to understand details of, we just have to recognize that it did “Writing” and you didn’t get an error.\nWhy origin main? This is the part that sends this to our Github repo to share with the world. The main part is the branch name, and that is something we may get into later in the semester.\n\nNow go back to your Github repo in your browser and hit refresh on your repo, and you’ll see the result there. Woo hoo!"
  },
  {
    "objectID": "git-00-intro.html#repeat-add-commit-push",
    "href": "git-00-intro.html#repeat-add-commit-push",
    "title": "Git",
    "section": "Repeat: Add, commit, push",
    "text": "Repeat: Add, commit, push\nNow let’s make another change to your file and repeat the cycle.\n\nGo into VS Code and add a new sentence to your myname.md file.\nUse the terminal to check the status of your repo using git status.\n\n$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n        modified:   christian.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n✔ ~/Documents/icj/christian-git-practice [main|✚ 1]\nThe return says we have one modified file. Since it is the only modified file and we want to stage it, we’ll use a fancy command to add “all” the modified files so we don’t have to name it. The period means “all changed files”.\n\nDo git add . as noted below:\n\n$ git add .\n✔ ~/Documents/icj/christian-git-practice [main|●1]\nThere is no response for staging a file if it is successful.\n\nNow finish it out by committing the changes note below:\n\n$ git commit -m \"adding changes\"\n[main 22acae0] adding changes\n 1 file changed, 2 insertions(+)\n✔ ~/Documents/icj/christian-git-practice [main ↑·1|✔]\n\nAnd then push them to main with: git push origin main\n\n$ git push origin main\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 329 bytes | 329.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo github.com:critmcdonald/christian-git-practice.git\n   8809887..b36328f  main -&gt; main\n✔ ~/Documents/icj/christian-git-practice [main|✔]\nWell done! You’ve learned the basic git cycle and pushed code to Github."
  },
  {
    "objectID": "git-00-intro.html#turn-in-your-assignment",
    "href": "git-00-intro.html#turn-in-your-assignment",
    "title": "Git",
    "section": "Turn in your assignment",
    "text": "Turn in your assignment\nIn Canvas, find “Version control assignment” and submit the URL of your Github repo."
  },
  {
    "objectID": "git-00-intro.html#if-you-forget--m",
    "href": "git-00-intro.html#if-you-forget--m",
    "title": "Git",
    "section": "If you forget -m",
    "text": "If you forget -m\nIf you are committing files with git commit and you forget to add the -m flag or the message in quotes after it, you will get thrown into an odd program called VIM. It will look something like this:\n\n\n\nvim commit\n\n\nIf this happens:\n\nPress i on your keyboard to get into insert mode.\nType your commit message into that first line.\nHit the esc key at the top left of your keyboard to get out of insert mode.\nType :wq on your keyboard. Your cursor will move to the bottom of the window. That is OK.\nHit return to end the command.\n\nYou’ll get thrown back into your regular Terminal and be able to continue.\nI don’t want to get into what the VIM commands are, but basically :wq means “write” and “quit”.\nThis GIF shows the process, but not the keystrokes, so use the directions above. Best yet, DON’T FORGET -m!\n\n\n\ncommit-vim\n\n\n\nNotes to self:\n\nfirst-commit.gif uses master\nvim-commit.png uses master"
  },
  {
    "objectID": "git-01-clone.html#goals",
    "href": "git-01-clone.html#goals",
    "title": "6  Cloning repos, sharing code",
    "section": "6.1 Goals",
    "text": "6.1 Goals\nWe’ll now see how you can collaborate in code with a classmate. Our goals are this:\n\nTo pick a partner\nTo clone their repo to your machine.\nTo edit the file and use the git cycle to commit the changes.\nTo go to your own repo and pull the changes made by your partner.\nWe’ll then introduce a code conflict and learn how to resolve it."
  },
  {
    "objectID": "git-01-clone.html#clone-a-repo",
    "href": "git-01-clone.html#clone-a-repo",
    "title": "6  Cloning repos, sharing code",
    "section": "6.2 Clone a repo",
    "text": "6.2 Clone a repo\n\nIn your browser, go to your partner’s Github profile and click on Repositories if necessary, then on their repo.\nLook for the button Clone or download. You want to copy the URL for cloning, like this:\n\n\n\n\nclone\n\n\n\nGo into your regular Terminal app and cd into ~/Documents/icj/.\nDo git clone URL but paste the URL you copied. This is the same as you did with your own repo, but now you have downloaded your partner’s repo.\n\nIf you wanted the repo to be a different name on your computer, you would add the name you want after the url. I tend to keep the same name unless there is a good reason not to."
  },
  {
    "objectID": "git-01-clone.html#make-your-edits",
    "href": "git-01-clone.html#make-your-edits",
    "title": "6  Cloning repos, sharing code",
    "section": "6.3 Make your edits",
    "text": "6.3 Make your edits\n\nLaunch VS Code if it isn’t already.\nGo to File &gt; New Window.\nUse the VS Code Explorer on the left to find your partner’s folder and open it.\nAdd a new sentence praising your partner’s command of git and Github thus far. Save and close the file.\nAdd a new file to the repo called newfile.md. There are a bunch of different ways you can do this … just choose one method:\n\nYou use your terminal (even in VS Code) and type touch newfile.md.\nYou can use the File &gt; New file menu and name it.\nYou can use the little buttons in the Explorer and name it.\n\nAdd a title and a paragraph of text, using proper Markdown syntax. Save and close your work. (Depending on time, we might talk about and load the Markdown Syntax Linter.)\nOpen the Integrated Terminal and go through the steps to check status, add files, commit files (with message), and push to origin master.\n\n\nBefore you can push, your partner probably needs to go into their Github repo and add you as a collaborator."
  },
  {
    "objectID": "git-01-clone.html#pull-your-partners-edits",
    "href": "git-01-clone.html#pull-your-partners-edits",
    "title": "6  Cloning repos, sharing code",
    "section": "6.4 Pull your partner’s edits",
    "text": "6.4 Pull your partner’s edits\n\nGo back to the VS Code window that is your own repo.\nUse the Integrated Terminal to do $ git pull origin master, which will download the changes made by your partner. Yes, pull is the opposite of push."
  },
  {
    "objectID": "git-01-clone.html#dealing-with-conflicts",
    "href": "git-01-clone.html#dealing-with-conflicts",
    "title": "6  Cloning repos, sharing code",
    "section": "6.5 Dealing with conflicts",
    "text": "6.5 Dealing with conflicts\nYou might ask yourself … what’s to keep two people from changing the same line of code? Well, they can, and you will. It creates a code conflict that must then be resolved.\nWe’re going to create such a conflict so you can see that this looks like.\n\n6.5.1 Your original change\n\nFind your VS Code window with your own repo and make a change within the first sentence.\nAdd, commit and push your changes to Github.\n\nSo now, in your partner’s copy of your repo, there is a change that they do not have.\n\n\n6.5.2 Change your partner’s repo\n\nGo back into your partner’s repo in VS Code and change that same first sentence, but do it in some different way.\nAdd, commit and try to push your changes. When you try to push, you won’t be able do. You’ll get a message something like this:\n\n$ git push origin master\nTo github.com:critmcdonald/christian-git-practice.git\n ! [rejected]        master -&gt; master (non-fast-forward)\nerror: failed to push some refs to 'github.com:critmcdonald/christian-git-practice.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n(base) ✘-1 ~/Documents/icj/christian-git-practice [master ↓·1↑·1|✔] \nYou can see from the hints in the error message, that there are changes on the remote repo that you don’t have. Git won’t let you push new changes unless you have the current remote copy from the server. That keeps you from screwing up something that is already there (which is kinda what we are doing).\nSo, you have to pull the remote changes first.\n\nDo $ git pull origin master to update your repo. It will work, but you’ll get message about the conflict.\n\n$ git pull origin master\nFrom github.com:critmcdonald/christian-git-practice.git\n * branch            master     -&gt; FETCH_HEAD\nAuto-merging newfile.md\nCONFLICT (content): Merge conflict in newfile.md\nAutomatic merge failed; fix conflicts and then commit the result.\n(base) ✘-1 ~/Documents/icj/christian-git-practice [master|MERGING ↓·1↑·1|✖ 1] \nNow look at the file in VS Code, and it will look pretty crazy. Here is mine:\n\n\n\nclone\n\n\nLet’s break this down:\n\nThe highlighted line with HEAD is the beginning of the conflict.\nThe other highlighted line is the end of the conflict.\nIt’s up to you to choose what should be inbetween those notes. You would of course want to discuss this with your collaborator and come to an agreement on what this should be. Fix up the file the way you have agreed and then remove all the notes and the line between the two pieces.\nOnce you have it the way you like it, save, add, commit and push.\n\n\n\n6.5.3 Get your own repo right\n\nGo back to your own repo in VS Code and do git pull origin master. Depending on how you resolved the conflict together, you might have to go through the process again. You might go look at the repo on Github and copy/paste the line to ensure you have it the same. Add, commit and push as necessary."
  },
  {
    "objectID": "git-01-clone.html#good-coding-practices-syntax",
    "href": "git-01-clone.html#good-coding-practices-syntax",
    "title": "6  Cloning repos, sharing code",
    "section": "6.6 Good coding practices: Syntax",
    "text": "6.6 Good coding practices: Syntax\nOne tactic to being a good collaborator with code is to follow syntax, meaning you write code to a shared standard. Each programming language has its own standard, including how many spaces to indent, how you capitialize, etc.\nWe’ve been writing in Markdown, and here are two resources about that syntax:\n\nMarkdown tutorial\nMarkdown syntax"
  },
  {
    "objectID": "git-02-branch.html#feature-branch-workflow",
    "href": "git-02-branch.html#feature-branch-workflow",
    "title": "7  Git branches and pull requests",
    "section": "7.1 Feature branch workflow",
    "text": "7.1 Feature branch workflow\nThe workflow I typically use is git feature branch workflow, and I use this even when I’m working solo on a project. Review the link above, but this is typically how it works:\n\nmaster is the branch in production or ready for production. It should always “work” with no bugs.\nCreate a feature branch to start on new work. Make your changes and push the branch to the repo.\nCreate a pull request to review changes. This allows you or others to see the changes within Github you are proposing to merge into master. There are tools in Github that allow for official reviews, comments and such. You will also see potential code conflicts.\nMake any changes necessary and push them to the feature branch.\nOnce ready, merge into master. All the history of your commits are added to master, and your newbranch has been deleted on Github.\n\nThere can be more to it in some shops, like rebasing and squashing, but we won’t get into that here."
  },
  {
    "objectID": "git-02-branch.html#lets-do-it",
    "href": "git-02-branch.html#lets-do-it",
    "title": "7  Git branches and pull requests",
    "section": "7.2 Let’s do it",
    "text": "7.2 Let’s do it\n\nGo into your “myproject-name” repo in VS code and open your Integrated Terminal.\nCreate your branch: $ git checkout -b newbranch.\n\nIf you have the git-bash-prompt installed, you’ll notice the name of the branch has changed in the square brackets.\n\nAdd a new file and call it branchfile.md. Add a title and some text using proper Markdown syntax.\nSave and add and commit your file, but when you push, you need to change that to $ git commit origin newbranch to ensure you are adding to your new branch. (It will give you an error if you try to push to master.) This is the result:\n\n$ git push origin featurebranch\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 354 bytes | 354.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:critmcdonald/myproject-christian.git\n * [new branch]      featurebranch -&gt; featurebranch\n✔ ~/Documents/icj/myproject-christian [featurebranch L|✔]\n\nGo to your repo on Github, and you’ll notice your branchfile.md is not listed. This is because you are looking at your master branch.\nYou can click on branches to see all the branches, or use the branch dropdown to switch to your new branch on Github."
  },
  {
    "objectID": "git-02-branch.html#create-a-pull-request",
    "href": "git-02-branch.html#create-a-pull-request",
    "title": "7  Git branches and pull requests",
    "section": "7.3 Create a pull request",
    "text": "7.3 Create a pull request\n\nSince we just pushed a new branch, you might notice a yellow alert box that has a button where you can Compare & pull requet. If you have that, go ahead and click on it.\nIf you didn’t have that, you could click on the Pull requests tab at the top, and then choose a New pull request.\n\nThis is what you get:\n\n\n\npull reqeust\n\n\nYou can see from this page that you are merging the branch on the right, newbranch, into the branch on the left, which is master.\n\nHere you can give your pull request a title and a description. Your description might outline what is being changed, how to test it locally and whatever information your collaborators our your future self might want to know.\nClick the Create pull request button to create the pull request.\nThe next screen gives you summary of all the commits that are different from the master. It will list multiple files if there are differences.\n\n\n\n\npull reqeust\n\n\n\nThis process also outlines any conflicts there might be between the feature branch and master. You’ll have to fix them before you can merge.\nThe pull request also allows yourself and collaborators review all your changes and make comments.\nGo ahead and click Merge pull request and then Confirm merge to merge the branches.\n\nAt this point, you can delete the newbranch in Github, as indicated with a button. You don’t have to since all the commit history is now in master, but it’s a good idea to keep everything clean.\nNow let’s clean up our local repo.\n\nGo back to VS Code and into the Integrated Terminal, and switch back to master using git checkout master. It will look like this:\n\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n(base) ✔ ~/Documents/icj/myproject-christian [master|✔]\nYou might notice this says you “branch is up-to-date with ‘origin/master’, and that is confusing, because we know we merged changes that are on Github. This message is referring to your LOCAL branch, not the one on Github. We still need to pull in those changes:\n$ git pull origin master\nFrom github.com:critmcdonald/myproject-christian\n * branch            master     -&gt; FETCH_HEAD\nUpdating b36328f..c85740d\nFast-forward\n branchfile.md | 3 +++\n 1 file changed, 3 insertions(+)\n create mode 100644 branchfile.md\n✔ ~/Documents/icj/myproject-christian [master|✔]\nThis will pull the files from Github and bring them local.\nYou can always check what branches you have locally with $ git branch. Try it.\n16:13 $ git branch\n* master\n  newbranch\nThe newbranch on Github went away when we merged it, but now we can delete it locally:\n$ git branch -D newbranch\nDeleted branch newbranch (was 1345054).\n✔ ~/Documents/icj/myproject-christian [master|✔] \nThe capitalization of -D flag matters."
  },
  {
    "objectID": "git-02-branch.html#git-commands",
    "href": "git-02-branch.html#git-commands",
    "title": "7  Git branches and pull requests",
    "section": "7.4 Git commands",
    "text": "7.4 Git commands\nWe used a ton of git commands, and it was only a fraction. It’s a complex program. There are tons of cheet sheets out there on the googles, but this one is pretty clean."
  },
  {
    "objectID": "html-00-intro.html",
    "href": "html-00-intro.html",
    "title": "HTML",
    "section": "",
    "text": "Codecademy HTML tutorial\n\nElements and Structure\n\nIntroduction to HTML\nHTML Document Standards\n\n\nHTML class\nHTML practice\nQuiz in Canvas"
  },
  {
    "objectID": "html-01-class.html",
    "href": "html-01-class.html",
    "title": "8  HTML class",
    "section": "",
    "text": "Here."
  },
  {
    "objectID": "html-02-practice.html",
    "href": "html-02-practice.html",
    "title": "9  HTML practice",
    "section": "",
    "text": "Here."
  },
  {
    "objectID": "css-00-intro.html",
    "href": "css-00-intro.html",
    "title": "CSS",
    "section": "",
    "text": "Codecademy CSS tutorial\n\nSyntax and selectors\n\nSetup and Syntax\nSelectors\n\nVisual rules\n\nVisual rules\n\nThe Box Model\n\nThe Box Model\nChanging the Box Model\n\nDisplay and Positioning\n\nCSS Display and Positioning\n\n\nCSS class\nCSS practice\nQuiz in Canvas"
  },
  {
    "objectID": "js-00-intro.html",
    "href": "js-00-intro.html",
    "title": "JavaScript",
    "section": "",
    "text": "Codecademy JS Tutorial\n\nModule 1: Introduction\n\nIntroduction to Javascript\nVariables\n\nModule 2: Conditionals\n\nConditional statements\n\nModule 3: Functions\n\nFunctions\n\n\nJS Basics\nJS Functions\nJS Objects\nJS Flow control\nJS with html\nJS jQuery/Datatables\nQuiz in Canvas"
  },
  {
    "objectID": "a-google-fonts.html",
    "href": "a-google-fonts.html",
    "title": "Appendix A — Using Google Fonts",
    "section": "",
    "text": "Using Google Fonts used to be more intuitive than it seems to be now. This is a super quick primer on how do to it.\n\nGo to Google Fonts.\nBrowse or search for a font you want.\nClick on the font page so you can see all the styles available.\nClick on the + Select this style link to add the font to your selections.\n\n\n\n\nfonts-select\n\n\nRepeat this for all the font and font styles you want, but be selective. Don’t choose fonts you won’t use, and don’t use too many. (Each font increases your page size, slowing down your site.)\nOnce you have selected all your fonts, if the tray on the right is not open already, click on the box-like icon at the top right to open it.\n\n\n\nfonts-tray\n\n\nAll your selected fonts will be rolled together into one &lt;link&gt; line.\n\nCopy the &lt;link&gt; line and put it on each HTML page (or template) that will use the fonts.\nIn your CSS, write rules that specify the font as needed.\n\nThe “CSS rules to specify families” example in Google Fonts shows you how to write each individual font as part of a style rule. Realize this is just part of the style rule. If you want to apply this Roboto font to all H1 elements, you would write in your CSS like this:\nh1 {\n  font-family: 'Roboto', sans-serif;\n}"
  },
  {
    "objectID": "a-project.html#overview-of-the-steps",
    "href": "a-project.html#overview-of-the-steps",
    "title": "Appendix B — How to start a project",
    "section": "B.1 Overview of the steps",
    "text": "B.1 Overview of the steps\nThese are the overall steps in case you just need reminders of the order. A more detailed breakdown is below.\n\nCreate a new folder for your project inside your icj folder. (You can use your regular computer operating system to do this.)\nLaunch VS Code.\nUse File &gt; New Window to open a fresh window.\nUse Open folder to then find and choose your new folder.\nCreate a README.md file.\n\nUsing Markdown, add a headline with the project name. Add text with your name and the due date of the project.\nSave the file.\n\nCreate a .gitignore file.\n\nUse gitignore.io to create the contents of your gitignore file. Use the values “macOS”, “Windows” and “VisualStudioCode” and Create. Copy the contents into the file you created.\nSave the file.\n\nCommit your local files. In your Terminal do the following:\n\ngit init to initialize git.\ngit add . to add all the files to stage.\ngit commit -m \"initial commit\" to commit the files.\n\nGo to Github.com and add a New Repository.\n\nName it the same as your local folder.\nDO NOT include the README or .gitignore files.\n\nOnce created, review the lines of code Github suggests:\n\nMake sure under “Quick setup — if you’ve done this kind of thing before” that the SSH button is selected (that the SSH button is grey and that the line of code next to is starts with git@github and NOT https.)\nFind the second block of code options “…or push an existing repository from the command line” and copy those multiple lines of code.\n\nBack in VS Code:\n\nIn your Terminal in VS Code, paste in the lines of code from Github to run them.\nYou might have to hit return again to run git push origin main.\n\n\nYou are now ready to complete the rest of the assignment. You can use the git cycle to commit any further changes."
  },
  {
    "objectID": "a-project.html#the-git-cycle",
    "href": "a-project.html#the-git-cycle",
    "title": "Appendix B — How to start a project",
    "section": "B.2 The git cycle",
    "text": "B.2 The git cycle\nAs you work through the project, use the git cycle to save your code to your local machine, then push those changes to Github.\n\ngit status tells you where you are in the it cycle.\ngit add . adds all changed files into your stage\ngit commit -m \"Your message\" commits your changes to your computer.\ngit push origin main pushes your local changes to Github."
  },
  {
    "objectID": "a-project.html#a-very-detailed-version-of-starting-a-new-project",
    "href": "a-project.html#a-very-detailed-version-of-starting-a-new-project",
    "title": "Appendix B — How to start a project",
    "section": "B.3 A very detailed version of starting a new project",
    "text": "B.3 A very detailed version of starting a new project\nThis is the same as above, but with more detail, description and visuals. There is also this screencast of the complete project setup for a local project including README, gitignore, initializing git, creating a Github repo and connecting it to your local project.\n\nB.3.1 Create your project folder\nI find it easiest to create the folder using your computer’s operating system: macOS | Windows.\nCreate this folder inside you Documents/icj so you always know where your code is for this class.\n\nThe assignment will guide you on how to name the folder.\nAlways start the folder name with your own name.\nUse all lowercase letters. It’s just helpful.\nUse dashes instead of spaces in the name. It’s helpful, and depending on the project the folder name can end up being part of a URL.\n\nA good example:\nchristian-project-name\n\n\nB.3.2 Open the folder in VS Code\nOpening the folder in VS Code will make sure that your computer knows where all the files are relative to that folder.\n\nLaunch VS Code\nYou might close any windows that might still be open.\nChoose File &gt; New Window.\n\nIf your document tray is open, you might see a big button for Open Folder. Click it.\nOr, you can go to File &gt; Open (Or use the keyboard command: Command-O).\n\nOnce the folder opens, the document tray should show the folder name.\n\n\n\n\nFolder name\n\n\n\n\nB.3.3 Create your README\nHere is a reminder of why we make a README file.\nI find the easiest way to create a new file is to use the Terminal. There are many other ways, but touch is the best all-around way.\n\nIf your Terminal isn’t open already, go to Terminal &gt; New Terminal.\nDo touch README.md\n\nThis will create the file and you’ll see it in the Document tray.\nFor this class, I want to to at least include this information in your README, adjusted based on the project, of course.\n\n# The project name\n\nBy Your Name\n\nThe project is due on Month Day Year.\n\n\nB.3.4 Create the .gitignore file\nThe .gitigore tells git to ignore certain files your computer will create but don’t need to be committed to the repository.\n\ntouch .gitignore will create the file.\nIn a browser, go to gitignore.io\nInsert the following values: macOS, Windows, VisualStudioCode.\n\n\n\n\ngitignore values\n\n\n\nHit Create.\nCopy all the text from the resulting window.\nPaste it into your .gitignore file in VS Code. Save the file.\n\n\n\nB.3.5 Commit your local files\nIt’s now time to use the parts of the git cycle to commit your files to your local machine, but first we have to tell git that we want to by initializing it.\n\ngit init to initialize the project.\ngit add . to add all the files to stage.\ngit commit -m \"First commit\" to save the files.\n\nWe have to create and connect to Github before we can push them.\n\n\nB.3.6 Create your Github repo\nNow we create the repo in Github so we can connect to it.\n\nGo to Github.com in a browser and log in if you aren’t already.\nAt the top right of the page is a big + sign. Click on that and choose New repository.\nFor the repository name, I recommend you use the same name as you used for your local folder. Like christian-project-name.\nThe Description is optional.\nKeep it Public.\nDO NOT use the README or gitignore options.\nClick the Create repository button.\n\nOnce you create the repo, you’ll get a page back with a lot of code.\n\nMake sure the SSH button is selected in the top box.\nGo to the second block “…or push an existing repository from the command line” and copy the code there to get the three lines.\n\n\n\n\nConnect to Github\n\n\n\nPaste those into your terminal. You might have to press return again to run the last line.\n\nFrom now on, you’ll use git push origin main to push your code.\nIf you want to make sure it worked, go back to your browser and refresh the page and you should see your files there.\nYou should now be ready to continue with the assignment."
  },
  {
    "objectID": "a-project.html#using-degit",
    "href": "a-project.html#using-degit",
    "title": "Appendix B — How to start a project",
    "section": "B.4 Using degit",
    "text": "B.4 Using degit\nSome class projects begin with a set of template files that already include a README and gitignore file. In this case, we create the folder on our hard drive, but use the degit command to download all our needed files.\n\nCreate your project folder inside the icj folder.\nLaunch VS Code and open the folder.\ndegit utdata/template-name will download all the files into your folder. BUT YOU’LL WANT TO USE THE CORRECT TEMPLATE NAME.\ngit init will initialize the repo\ngit add . to add the files\ngit commit -m \"first commit to save the files.\nCreate your repo in Github.com.\nCopy the second block and run it. You might need to hit return again to run the last line, git push origin main.\n\nYou should be ready to continue with the assignment."
  },
  {
    "objectID": "a-macos-shell.html",
    "href": "a-macos-shell.html",
    "title": "Appendix C — Change Mac shell to bash",
    "section": "",
    "text": "Mac Catalina changes the default shell program from Bash to zsh. While zsh is probably fine, let’s change the default shell program to Bash for consistency. This is how to do it:\n\nChoose Apple menu  &gt; System Preferences, then click Users & Groups.\nClick the lock, then enter your account name and password.\nControl-click your user name in the list of users on the left, then choose Advanced Options.\nChoose a shell from the ”Login shell” menu, then click OK to save the changes.\n\n\n\n\nDefault to bash\n\n\n\nClick OK and close the System Preferences window.\nClose any Terminal windows you have open and restart them."
  }
]