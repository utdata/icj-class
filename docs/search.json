[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to Coding for Journalists",
    "section": "",
    "text": "Preface\nThis is the course material for the UT-Austin School of Journalism and Media course “Intro Coding for Journalists”. The class teaches basic HTML, CSS and JavaScript skills, culminating in a static-page generator app from data.\nThe online version of the book is here.\nThe Canvas course is your official word on assignment due dates and such, but most lectures, assignment details and files are found here."
  },
  {
    "objectID": "index.html#the-structure-of-the-class",
    "href": "index.html#the-structure-of-the-class",
    "title": "Intro to Coding for Journalists",
    "section": "The structure of the class",
    "text": "The structure of the class\nYou can see the chapter breakdown, but the book is more or less structured like this:\n\nUsing command-line tools\nComputer setup\nHTML: The skeleton of the web\nCSS: The skin of the web\nJavaScript: The muscles of the web\nSass: Better web skins\nBootstrap: OMG, the web solved\nStatic apps: HFS, I can make it\n\n\n\n\n\n\n\nImportant\n\n\n\nMany of the chapters in this book have video screencasts where I walk through the practice lesson and explain steps along the way. If you are a visual learner, you might try that. The material is the same as in this book, but I just talk out and show the steps. You’ll find those links in Canvas."
  },
  {
    "objectID": "index.html#tips-on-reading-this-book",
    "href": "index.html#tips-on-reading-this-book",
    "title": "Intro to Coding for Journalists",
    "section": "Tips on reading this book",
    "text": "Tips on reading this book\nI try to write this book so it is clear when you need to do something vs read something.\n\nTo-do steps\nFor all my lessons I typically put directions for YOU to do in numbered lists:\n\nDo this thing.\nThen do that thing.\n\n\nSometimes there is code after or among the the directions, but it is in a code block with a grey background.\n\nRun this command:\n\nls -al\nNote that you can roll your cursor over that highlighted block and use the copy button at the top right to copy all the commands within it. I encourage you to type commands unless they are super long. You learn better that way.\n\nSometimes I show a command and also show Terminal output. In this case, I include the $ on the line with the command. The background is also not highlighted.\n$ ls -al\ntotal 32\ndrwxr-xr-x   3 ccm346  Users     96 Jul 12 16:12 .\ndrwxr-xr-x@ 22 ccm346  Users    704 Jul 12 16:10 ..\n-rw-r--r--   1 ccm346  Users  15642 Jul 12 16:12 data.csv\n\n\nNot to-do things\nI typically use an unordered bullet list for explanations and other non-“do” things:\n\nThis is just a note about something\nAnd this is another\n\nRegular paragraph text such as this one are usually an explanation, background or whatever.\nIf something is in bold or IN ALL CAPS or in italics for emphasis then there is usually a reason why, so pay attention.\n\n\n\n\n\n\nSometimes I put unimportant but interesting side notes in callouts like this.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nBut sometimes I’ll put important notes in these callout sections, too. I’ll usually say if they are important in bold at the beginning, like this one.\n\n\nI try to be consistent about all such things, but I’m human so sometimes I’m not."
  },
  {
    "objectID": "index.html#macos-vs-windows",
    "href": "index.html#macos-vs-windows",
    "title": "Intro to Coding for Journalists",
    "section": "macOS vs Windows",
    "text": "macOS vs Windows\nOn some occasions I may need to give specific directions depending on your operating system or some other division. You would choose the tab that fits your situation.\n\nmacOSWindows\n\n\nI use macOS so most directions are from that perspective.\n\n\nUsually you can use Cntl-whatever as a PC equivalent to Cmd-whatever on a Mac."
  },
  {
    "objectID": "start-00-intro.html",
    "href": "start-00-intro.html",
    "title": "Getting started",
    "section": "",
    "text": "These first couple of chapters deal with learning about command-line interface tools that allow us to work with our computer through text commands, which is essential in programming.\nOn Macintosh computers, the program to use is called Terminal and it is already installed.\nWindows computers are built a little differently, and for us to work within the same environment Windows users have to install Git (and Git Bash, which comes with it) before we can go much further.\n\n\n\n\n\n\nWindows uses must install Git first\n\n\n\nWindows users have to install Git and Git Bash before doing moving forward with this lesson. These next few steps do that.\n\nGo to Git Downloads, and download the latest version of git.\nRun the installer and follow the prompts as you normally would, choosing the defaults (except for this):\n\nWhen you get the screen below (or something like it) you need to choose “Use Git from Git Bash only”.\n\n\n\ngit setup\n\n\n\nUse the default settings for everything else.\nYou should now be able to find the program Git Bash from your Windows Start menu. Go ahead and launch it."
  },
  {
    "objectID": "start-01-terminal.html#launch-your-terminal",
    "href": "start-01-terminal.html#launch-your-terminal",
    "title": "1  Terminal",
    "section": "1.1 Launch your terminal",
    "text": "1.1 Launch your terminal\n\nmacOSWindows\n\n\n\nFor Macs you can use your Launchpad and type in Terminal and launch it. Or you can use the Spotlight search to find it.\n\nOnce you launch it will look like this:\n\n\n\nMac Terminal\n\n\nThough it may have a white screen.\n\n\n\nFor Windows you can go to your Start menu and type in Git Bash and launch it.\n\nIt will look like this:\n\n\n\nWindows Git Bash"
  },
  {
    "objectID": "start-01-terminal.html#the-terminal-prompt",
    "href": "start-01-terminal.html#the-terminal-prompt",
    "title": "1  Terminal",
    "section": "1.2 The terminal prompt",
    "text": "1.2 The terminal prompt\nBefore I adjusted it, I would see this when I launched my terminal:\nCOMM-A54338:~ ccm346$\n\nThe first part before the ~ is my computer name.\nThe part after the ~ is is my username.\nLastly we have the $. This is the “prompt” where you type commands. You type your commands AFTER the $ and then hit Return on your keyboard to execute them.\n\nIn this book you might see examples of a command that includes an output. That first line will have the $ before the command so you know that it is a command, but DON’T TYPE IN THE $. For instance:\n$ pwd\n/Users/ccm346/Documents/icj/myproject\nMeans you type in just pwd and then hit return."
  },
  {
    "objectID": "start-01-terminal.html#typing-vs-copypaste",
    "href": "start-01-terminal.html#typing-vs-copypaste",
    "title": "1  Terminal",
    "section": "1.3 Typing vs copy/paste",
    "text": "1.3 Typing vs copy/paste\nI encourage you to type commands into your terminal instead of copy and pasting them from the lessons. Build muscle and mind memory. Typing a command wrong and then having to figure out why it broke will help you learn it and remember it. If you just copy and paste blindly, then you won’t learn anything other than command-c and command-v."
  },
  {
    "objectID": "start-02-move.html#goal",
    "href": "start-02-move.html#goal",
    "title": "2  Moving around",
    "section": "2.1 Goal",
    "text": "2.1 Goal\nOur goal for this lesson is to become familiar with a terminal and the Bash commands to move around and access different folders on your computer.\nWe’ll also create your class folder, which you will use for the rest of the semester.\n\n\n\n\n\n\nI use the terms “folder” and “directory” interchangeably here. They are the same thing."
  },
  {
    "objectID": "start-02-move.html#print-working-directory",
    "href": "start-02-move.html#print-working-directory",
    "title": "2  Moving around",
    "section": "2.2 Print working directory",
    "text": "2.2 Print working directory\nOne of the hardest things to get a handle on when first working in the terminal is to figure out where you are on your computer. It’s important, because you can run commands on any file on your computer from where you are, but you gotta know where that is before you can do so. So, we’ll use pwd, or “print working directory”.\n\nIn your Terminal, type and execute:\n\npwd\nWhen I do this on my machine, here is what the command and response look like:\n$ pwd\n/Users/ccm346\nBecause I’m using my work computer my user directory is called “ccm346”. Yours might be your name or part of your name. This user directory is called your “home directory”. All of your computer files are stored inside your home directory.\nWhen you launch a new terminal it starts you out inside this directory."
  },
  {
    "objectID": "start-02-move.html#list-directory",
    "href": "start-02-move.html#list-directory",
    "title": "2  Moving around",
    "section": "2.3 List directory",
    "text": "2.3 List directory\nLet’s see what is inside our home directory.\n\nDo this:\n\nls\nThis will list everything in the directory you are in. Mine looks like this:\n$ ls\nApplications        Library         google-cloud-sdk\nCreative Cloud Files    Movies          miniforge3\nDesktop         Music           thingy.html\nDocuments       Pictures\nDownloads       Public\nIt listed the names of all the folders and files of the directory I’m in. This is similar to opening a folder browser on your computer and then opening your home folder and looking inside of it.\n\n\n\nHome directory"
  },
  {
    "objectID": "start-02-move.html#flags",
    "href": "start-02-move.html#flags",
    "title": "2  Moving around",
    "section": "2.4 Flags",
    "text": "2.4 Flags\nBut sometimes, I want to know more information about the files, like their modification date. To do this, we introduce something called flags, which add nuance or detail to a terminal command. They start with a dash, and you can pile them on, as I’ll demonstrate.\n\nFirst, try this:\n\nls -l\n\n\n\n\n\n\nImportant\n\n\n\nThat is “dash L”, not a number 1. Watch the spaces, too.\n\n\nMy output looks like this:\ncrit:~$ ls -l\ntotal 0\ndrwx------@   5 ccm346  AUSTIN\\Domain Users   160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users   128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users   736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users   256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users  3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users   192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users   128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users   160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users   128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users   672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users   480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     0 Nov 14  2022 thingy.html\nWell, that’s a lot of info, and much of it jibberish. Here is what each part of those lines means …\n\ndrwxr-xr-x and similar is the permission information for a that file or folder. We aren’t going to get into it here, but you can read more if you like.\nThe next number is the number of files inside the folder, sort of. If this is a file, the number will be “1”. If it is a folder, the number will always be at least “2”. We’ll come back to this.\nNext is the owner of the file or folder.\nNext is a permission level for the user when the file was created.\nNext is the file size in bytes.\nNext is the last modified date of the file or when a file was added to the folder.\nFile or folder name.\n\n\n2.4.1 Hidden files\nLet’s add another flag to your command.\n\nDo this:\n\nls -al\nMy list got a TON longer. I snipped out the middle part here:\ncrit:~$ ls -al\ntotal 352\ndrwxr-x---+  54 ccm346  AUSTIN\\Domain Users   1728 Jul 10 10:50 .\ndrwxr-xr-x    7 root    admin                  224 Jun 24 13:21 ..\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_EngineServer\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_StreemToSync\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_SyncToStreem\nsrwxr-xr-x    1 ccm346  AUSTIN\\Domain Users      0 Jul 10 10:50 .Box_UIServer\n-r--------    1 ccm346  AUSTIN\\Domain Users      7 Nov  5  2021 .CFUserTextEncoding\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users  14340 Jul 11 09:31 .DS_Store\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     35 May 22 14:09 .Rapp.history\n-rw-r--r--@   1 ccm346  AUSTIN\\Domain Users    510 Mar 30 11:45 .Renviron\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users     73 Nov  5  2021 .Rhistory\n&lt;snip&gt;\ndrwx------@   5 ccm346  AUSTIN\\Domain Users    160 Aug 21  2022 Applications\ndrwx------@   4 ccm346  AUSTIN\\Domain Users    128 Jul 10 10:54 Creative Cloud Files\ndrwx------@  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 13:18 Desktop\ndrwx------+  23 ccm346  AUSTIN\\Domain Users    736 Jul 11 09:29 Documents\ndrwx------@   8 ccm346  AUSTIN\\Domain Users    256 Jul 12 13:06 Downloads\ndrwx------@ 101 ccm346  AUSTIN\\Domain Users   3232 Jun 13 14:23 Library\ndrwx------+   6 ccm346  AUSTIN\\Domain Users    192 Oct  3  2022 Movies\ndrwx------+   4 ccm346  AUSTIN\\Domain Users    128 Nov  9  2021 Music\ndrwx------+   5 ccm346  AUSTIN\\Domain Users    160 Jul  2 10:29 Pictures\ndrwxr-xr-x+   4 ccm346  AUSTIN\\Domain Users    128 Nov  5  2021 Public\ndrwxr-xr-x   21 ccm346  AUSTIN\\Domain Users    672 Jun 23 09:08 google-cloud-sdk\ndrwxr-xr-x   15 ccm346  AUSTIN\\Domain Users    480 Mar  3  2022 miniforge3\n-rw-r--r--    1 ccm346  AUSTIN\\Domain Users      0 Nov 14  2022 thingy.html\n\nThe -a flag means “all” files and folders, including hidden ones. All the files or folders at the top that start with a dot like .Box_EngineServer are on the computer but not visible normally. There can be a lot of hidden them … I have 40+, far more than regular files and folders.\n\nLet’s list again with just the -a flag:\n\nls -a\nHere is the top of my list:\ncrit:~$ ls -a\n.\n..\n.Box_EngineServer\n.Box_StreemToSync\n.Box_SyncToStreem\n.Box_UIServer\n.CFUserTextEncoding\n.DS_Store\n\n\n2.4.2 Dot directories\nBut let’s consider the first two returns:\n$ ls -a\n.\n..\nThese are two special designations in the Unix world. A single period . designates “this directory” and two periods .. designates the “parent directory”, i.e. the folder “above” this one. Every directory has these, so that’s why the ls -l always shows two items inside a directory, even if it is “empty” of regular files or folders.\nWe can use these “dot” and “dot dot” designations to move around into different directories, and to manage files in our current directories. They become super important when we make “paths” between files in our programs and web pages.\nLet’s see this “dot” designation in action by opening our “current” folder in Finder. This command differs slightly depending on your OS.\n\nmacOSWindows\n\n\n\nDo this command:\n\nopen .\n\n\n\nDo this command:\n\nstart .\n\n\n\nSince you are inside your “home directory”, this should open that folder in your Finder."
  },
  {
    "objectID": "start-02-move.html#change-directory",
    "href": "start-02-move.html#change-directory",
    "title": "2  Moving around",
    "section": "2.5 Change directory",
    "text": "2.5 Change directory\nMacs and PCs usually a Documents folder inside each user’s home folder. It’s where you are supposed to save all your stuff. It’s time for us to move in our Terminal to inside this Documents folder.\nThe cd command lets us change directory.\n\nLet’s change directory into your Documents:\n\ncd Documents\nLet’s do a review real quick. Where are you? What is your “working directory” now?\n\nDo pwd to check:\n\npwd\nIt should respond with something like this …\n$ pwd\n/Users/ccm346/Documents\n… and it should end with Documents. If it doesn’t, you aren’t in the right place.\n\nNow use ls to list what is in your Documents folder.\n\nls\nPerhaps you’ll recognize some of the folders listed here if you regularly use your Documents folder.\n\n\n\n\n\n\nImportant\n\n\n\nAn word about iCloud, OneDrive and other cloud storage services. If you have a choice, I WOULD NOT save projects from this class in a cloud drive because our projects can have thousands of tiny files (like 10,000+) that clog up syncing services and slow your computer. We’ll back up your class work in other ways (on Github)."
  },
  {
    "objectID": "start-02-move.html#make-directory",
    "href": "start-02-move.html#make-directory",
    "title": "2  Moving around",
    "section": "2.6 Make directory",
    "text": "2.6 Make directory\nNext we are going to make a new empty folder to store all our class files using the mkdir command.\n\nDo this:\n\nmkdir icj\n\nThen use ls again to see your new directory amongst the others.\n\nCreating a directory like this is exactly the same as opening a desktop window on your Mac creating a new folder. Folders and directories are the same thing.\n\nCool, let’s make another directory inside of icj.\n\nmkdir icj/newdirectory\n\nNow you can do an ls on the “icj” folder to see what is inside it.\n\nls icj\nIt should show you newdirectory. Something like this:\n$ ls icj\nnewdirectory\nA couple of things about this:\nYou have listed the contents of the icj directory without being inside of it. You can list the contents of any folder on your computer if you know the path to it. In fact, you can do any command on any file or folder on your computer if you know its path. The path is the folder structure between where you “are” in the terminal to where the new file/folder is.\nIf you name a directory with a space in it, you’ll not get what you want unless you put quotes around it. Because of this, I avoid using spaces in files and folders and use - or _ instead. I avoid capitalization, too, because our folders become url names and sometimes caps mess it up, especially on PCs.\n\nNow, let’s go inside the icj folder:\n\ncd icj\n\nLet’s see what is inside:\n\nls\nThat should show you a result with the newdirectory that we created earlier.\nHere are the commands and results of these last few commands in my terminal. I started with a pwd so you can see where I started from:\ncrit:~$ pwd\n/Users/ccm346\ncrit:~$ cd icj\ncrit:icj$ ls\nnewdirectory\ncrit:icj$ pwd\n/Users/ccm346/icj\nSo to break that down:\n\nI printed my working directory, which showed me I was in my Users folder.\nI did cd into icj which moved me to inside that directory.\nNow that I’m inside icj, I did ls to see the contents of my current folder, and it showed me that newdirectory was indeed inside.\nI did pwd to show that my current working directory (where I am) is inside the icj folder.\n\nNow let’s get crazy. Let’s list the files “above” where we are.\n\nType and run this command.\n\n$ ls ../\nRemember I said that two dots means the parent directory? This should show you the list of files and folders in your Documents directory.\n\nNow, confirm where you are:\n\npwd\nWhich should still be icj. So you had listed the files for the folder “above” you."
  },
  {
    "objectID": "start-02-move.html#tab-completion",
    "href": "start-02-move.html#tab-completion",
    "title": "2  Moving around",
    "section": "2.7 Tab completion",
    "text": "2.7 Tab completion\nIf you are doing ls or cd or otherwise referencing a path in the terminal, you don’t have to type the whole word for each directory. If you are trying to list the contents of “newdirectory”, then start with ls newd and then hit tab, and it will finish out the path as ls newdirectory. This is SUPER handy and you should use it often. Like all the time.\n\n\n\n\n\n\nImportant\n\n\n\nTab completion makes your programming live so much easier, and it works in more places than in our terminal. Use this skill."
  },
  {
    "objectID": "start-02-move.html#on-the-right-path",
    "href": "start-02-move.html#on-the-right-path",
    "title": "2  Moving around",
    "section": "2.8 On the right path",
    "text": "2.8 On the right path\n\n2.8.1 Relative paths\nYou can ls files or cd into any directory relative to your current working directory using ../ to move “up” the folder structure and then use the name of the new directory to move inside it. So a path like this: ls ../../Users/Cory is to travel up two folders, then into Users then into Cory and then list all the files there.\nThis is very powerful in programming, because you might be writing and testing code on your own computer, but then run the program on another computer, so if file01.py needs to talk to file02.py, you don’t want to hard-code a path like http://utdata.cmcdonald.com/scripts/file02.py, because you might not always be on utdata.cmcdonald.com. If it’s in the same folder, you could use file02.py or ./file02.py.\n\n\n2.8.2 Root-relative paths\nYou can reference the “root” or the top level of whatever server or machine you are on even if you don’t know the name of it, by starting your path with a slash like this: /scripts/file01.py. That’s called a root-relative path. If you know the root-relative path to a file or folder, you can always find it no matter what directory you are currently in. We won’t use this much in this class.\n\n\n2.8.3 Absolute paths\nAn absolute path includes the domain or computer name. If I reference http://utdata.cmcdonald.com/scripts/file01.py in my code or script, it will only work if I’m on utdata.cmcdonald.com. If I move that script to another computer or server, it will still try to pull from utdata.cmcdonald.com instead of the version on the new computer. We avoid using absolute paths in this class for this reason.\n\n\n2.8.4 The home directory shortcut\nThere is also a path shortcut called ~/ that stands for “the home directory of the logged in person”. You might see that referenced in paths like ~/Documents/ but that would really take me to /Users/ccm346/Documents/ on my computer. But what’s cool is the same ~/Documents/ path works on YOUR computer, even though your user directory name is different."
  },
  {
    "objectID": "setup-01-git.html",
    "href": "setup-01-git.html",
    "title": "Setup: Part 1",
    "section": "",
    "text": "In order to proceed with this class, you need to do some computer setup. This is handled in separate documentation.\nGo to ICJ Setting Up: Part 1 do those installations and then return here to the next chapter.\nWe’ll do Part 2 at a later time."
  },
  {
    "objectID": "git-00-intro.html#defining-version-control",
    "href": "git-00-intro.html#defining-version-control",
    "title": "Git",
    "section": "Defining version control",
    "text": "Defining version control\nSearch on google and you’ll find a ton of posts, tutorials and videos about Git and version control systems. I encourage you to explore some that fit your learning style. We’ll just cover enough here to get you going and we’ll learn by doing.\nAt its most basic, Git allows you to save your work at intervals and it keeps a history of files on your computer when you choose to save them. Once you have something that works, you can “commit” it and leave a comment about what you’ve done. You can then go back to that exact point in time if you need to. This frees the developer to experiment and make changes that may NOT work, because you know you can always go back. It works for any kind of file you want to put under version control.\nGit allows for a “distributed” version control system, meaning that all the code can be stored on a central server (like on the Internet) so other people can work on the shared code. When they “check out” a repository (or repo), they get the entire code base. Contributors can then make changes and “check in” those changes for others to use.\nGithub is the central server we will use to save our code. It’s also a project management tool and a social network of sorts. It’s probably the most popular programming service on the planet. Bitbucket Cloud is another popular code sharing service."
  },
  {
    "objectID": "git-00-intro.html#our-goals",
    "href": "git-00-intro.html#our-goals",
    "title": "Git",
    "section": "Our goals",
    "text": "Our goals\nWe will create a project folder and that that work as a repository — or “repo” — in git. We’ll break our work into the folowing steps:\n\nCreate a local repo inside our icj project folder.\nCreate a public repo on Github.\nConnect the local repo to public Github repo.\nEdit files and use the git cycle to save and push your changes to Github.\n\n\nVisual Studio Code\nWe’ll start using our code editor, Visual Studio Code, with this assignment. I’ll sometimes refer to this program as VS Code or just Code.\nIn our computer setup and command-line lessons, we used either the Terminal/Git Bash programs to talk to our computers. Now that we have VS Code installed, we’ll almost always use our Terminal from inside VS Code. It’s the same thing, just tucked inside VS Code."
  },
  {
    "objectID": "git-01-project.html#folders-and-files",
    "href": "git-01-project.html#folders-and-files",
    "title": "3  Project setup",
    "section": "3.1 Folders and files",
    "text": "3.1 Folders and files\n\nUse the Finder on your computer to locate your Documents/icj folder and inside of it create a new project folder called yourname-git-practice. Always use all lower-case letters and dashes instead of space. It’s just good practice.\nLaunch Visual Studio Code and start a New window. (You can find it under the File menu, or use Command-option-n.)\nOn the Welcome screen, you will see a link called Open folder. (If you don’t see this, click on the page icon at top-left, which is the Explorer menu.) Click on that Open Folder button and negotiate your way to your project folder, select it and click the Open button.\n\n\n\n\nOpen Folder\n\n\n\nGo to the Terminal menu and choose New Terminal. This will open a terminal window inside of VS Code, which is super handy. The top line of the terminal should give you the path to inside your project folder, like ~/Documents/icj/christian-git-practice. If it doesn’t then you didn’t open the folder first.\n\n\n\n\nVS Code"
  },
  {
    "objectID": "git-01-project.html#the-readme",
    "href": "git-01-project.html#the-readme",
    "title": "3  Project setup",
    "section": "3.2 The README",
    "text": "3.2 The README\nEvery coding project should have a special file called a README file which outlines what the project is and how to use it. It is often written in Markdown, which is a text-based syntax that Github turns into pretty HTML when it is published, but is completely readable as text. It also has great support to show code, tables, lists and such. Here is a cheatsheet of the syntax and 10-minute tutorial you may find useful. For what it is worth, this book is written using Markdown.\nI want you to always have a README file with your projects, and it should always be called README.md. Yes, with capital letters for README and lower-case letters for .md. It breaks typical file naming conventions because it is special.\n(There is a gif below showing these steps.)\n\nCreate the file first. I would recommend using the Terminal inside VS Code to use the touch command. (There are other ways, but let’s get used to using touch.)\n\ntouch README.md\nThe file now appears in the file explorer in VS Code on the left.\n\nClick on the file name to open it.\nNow add a title, your name, the assignment name and when it is due. Like this:\n\n# [YOURNAME]'s git practice\n\nBy [YOURNAME], Intro Coding for Journalists class\n\nThis repo is a class assignment to learn git. It is due [Month] [Day], [Year].\n\n\n\nMake readme\n\n\n\nSave and close the README file.\n\nI want something like that on every project you make in this class: title, your name, the assignment and when it is due. Your projects early in the class won’t have an extensive README like some others, but I want you to be in the habit of using them."
  },
  {
    "objectID": "git-01-project.html#using-gitignore",
    "href": "git-01-project.html#using-gitignore",
    "title": "3  Project setup",
    "section": "3.3 Using gitignore",
    "text": "3.3 Using gitignore\nYour computer and the programs that run on it create all kinds of hidden files that you don’t normally see. When looking in folders with the VS Code explorer, you might see a Mac file called .DS_Store, which is a hidden file the computer creates when you view a folder. On Windows, you might see .Thumbs.db, which is a record of images saved in a folder. We often don’t want to save these files or others into our git history, so we create another hidden file called a .gitignore which contains the rules of what not to track. An easy way to write the rules is to use the website gitignore.io.\nCreating hidden files like the .gitignore through the Mac/Windows regular file structure can be tricky, so it is best to do it from a terminal.\n\nIn your Integrated Terminal in VS Code type this command:\n\ntouch .gitignore\nYes, that file name starts with a period and there is NO file extension suffix, so no .txt or anything … it should be just .gitignore. Once created, it should show up in your list of files in VS Code on the left-hand screen.\n\nGo ahead and open the .gitignore file in VS Code by double-clicking on in the explorer.\nGo to the website gitignore.io in a browser. Type in “VisualStudioCode” and choose it from the list. (Make sure it says “VisualStudioCode” and not just “VisualStudio”). Type in “macOS” and add it, then “Windows” and add it to the list. Always do both platforms to be nice for future collaborators. (If you were using other programs like MicrosoftOffice or languages like Python, you would add those as well.) Click the Create button.\nCopy all the code there and paste it into your .gitignore file and then save it. You can then close the file.\n\nHere’s a short video showing that process:"
  },
  {
    "objectID": "git-02-cycle.html#creating-a-repo",
    "href": "git-02-cycle.html#creating-a-repo",
    "title": "4  Using Git",
    "section": "4.1 Creating a repo",
    "text": "4.1 Creating a repo\nOne you have your initial files, there are a number of steps you go through to create the repo, track files, save them, and then publish them to Github.\nYou’ll set up the repo for each new project in the class. And then once made, you’ll cycle through saving substeps often.\n\n4.1.1 Initialize the repo\nThe first part step to making a repo is to tell you computer to track the project by “initializing” it. We’ll do these commands in our integrated Terminal.\n\nUse the following command in your terminal to “initialize” or start the repo.\n\ngit init\nIn response you’ll get something like …\n$ git init\nInitialized empty Git repository in /Users/ccm346/Documents/icj/christian-git-practice/.git/\n… with your repo path at the end.\n\n\n4.1.2 Check status\nNow to show that git is paying attention, let’s peek at what git things is going on with your repo by using git status. You don’t have do this step at this time … in fact you can do this one at any time you want.\ngit status\nAnd the response you get …\n$ git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .gitignore\n        README.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nGit is telling us here that there are two files in our repo that are “untracked”, meaning they are there but git isn’t paying attention to them. Let’s fix that.\n\n\n4.1.3 Stage changes\nNext we will “stage” our files by adding them to the list of tracked files. You sometimes don’t want to track all your files, so you can add each one using their file name. That said we often track all of them, so we’ll use a shortcut:\ngit add .\nIf it goes well, you WON’T GET A RESPONSE. Sometimes no response is good because it did what you wanted with no errors!\nThis added (or “staged”) a list of files for git to “track” or pay attention to. In our case we added all our files in the folder that aren’t outlined in the .gitignore file. You can run git status again if you want to see the difference.\n\n\n4.1.4 Commit changes\nNext we want to “commit” our files (which means save them) and include a message to say why we made changes to these files. ALWAYS include the -m flag when you commit, with a message.\nDo this command in your Terminal. Note the quotes:\ngit commit -m \"my first commit\"\nYou should get a response similar to this:\n$ git commit -m \"my first commit\"\n[main (root-commit) b4fde58] my first commit\n 2 files changed, 82 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 README.md\nHere is a gif of the whole process, though I have git status mixed in there.\n\n\n\nfirst commit\n\n\nCongratulations … you have now saved a snapshot in time of all these files."
  },
  {
    "objectID": "git-02-cycle.html#create-your-github-repo",
    "href": "git-02-cycle.html#create-your-github-repo",
    "title": "4  Using Git",
    "section": "4.2 Create your Github repo",
    "text": "4.2 Create your Github repo\n\nGo to github.com (and log in if you are not) and find the + sign at the top right.\nClick on that and choose New repository.\n\nName the repo the same as your local one: yourname-git-practice. (I always name my Github repo the same name as the folder on my computer for clarity, but know they technically could be different.)\nGive it a description so you know what it is later.\nKeep it Public.\nDO NOT include a README here, or a gitignore or license.\nClick Create repository.\n\n\nOnce you create the repo, you’ll get a page back with a lot of code.\n\nMake sure the SSH button is selected in the top box. (We are selecting this because during your computer setup we set up SSH keys between your computer and Github.)\nGo to the second block “… or push an existing repository from the command line” and copy the first line there that starts with git remote add origin. Pro Tip: Triple-click on the line to highlight it.\nPaste that line into your Terminal and run it.\n\n\n\n\nConnect to Github\n\n\nWe shouldn’t need that second line there because our branch should already be named main.\n\nBut we do a modified version of that last line:\n\ngit push origin main\nHere is and explanation of Terminal commands we used.\n\nThe git remote add command created a connection between your local project and the repo you created on Github. Now your local files are are linked to those stored on the Internet.\nWith git push line you pushed your local files to the “origin” on Github on the “main” branch.\n\nWe only have to do the git remote add line once, but we’ll often use git push origin main to push your code.\n\nGo back to your Github repo and refresh the page you’ll see your new files listed there."
  },
  {
    "objectID": "git-02-cycle.html#the-git-cycle",
    "href": "git-02-cycle.html#the-git-cycle",
    "title": "4  Using Git",
    "section": "4.3 The git cycle",
    "text": "4.3 The git cycle\nThere are typically three steps to committing code in git:\n\ngit add to stage files that have changed.\ngit commit -m to commit (or save) the files with a message about why.\ngit push origin &lt;branch&gt; to publish the changes to Github. We will almost always be using the main branch.\n\nThere is a fourth command we also use with the three above, but you can do it at any time to check where you are in the git workflow:\n\ngit status to check what files have changed, etc.\n\nWe use these commands A LOT.\n\n4.3.1 Adding a new file\nWe’re going to use the Integrated Terminal again (I’m just going to say “terminal” from now on) to create yet another a new file, commit it, and then push it to Github.\n\nGo into the terminal and use the touch command to create a new file, using your name for the file name. It will be a Markdown file:\n\ntouch myname.md\n\nYou’ll notice the file show up in the list of files in the File Explorer on the left. Click on that and it will open the file in the editor.\nAdd a headline and some text to the file, like this below:\n\n# A new Markdown page\n\nI'm learning git and Github and this repo will help me. Don't judge.\n\n\n\n\n\n\nIf we didn’t talk about Markdown in detail earlier, now is a good time to review the Markdown syntax.\n\n\n\n\n\n4.3.2 Run the cycle\nNow let’s check the status of our repo.\n\nGo into the Terminal and use the status command:\n\ngit status\nHere is my command and response:\n$ git status\nOn branch main\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        christian.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nI have one untracked file, christian.md, and Git has been nice enough to tell me how to stage my file.\n\nLet’s add it specifically (but use your file name).\n\ngit add christian.md\nHere is the command and response:\n$ git add christian.md \n(base) ✔ ~/Documents/icj/christian-git-practice [main L|●1]\nThere wasn’t really a response back because it “worked”, but because I have the git-bash-prompt extension (which we installed earlier), I have some feedback. We haven’t talked about that yet, but that part [main L|●1] tells me we are on the main branch (more on that later) and that I have one staged file. Just watch how those signals change as we go through the cycle.\n\nNow let’s commit the file. We will also add a “message” to the commit using the flag -m, which you should ALWAYS do.\n\ngit commit -m \"adding my new file\"\nHere is the call and response:\n$ git commit -m \"adding my new file\"\n[main eda683e] adding my new file\n 1 file changed, 3 insertions(+)\n create mode 100644 christian.md\n (base) ✔ ~/Documents/icj/christian-git-practice [main L|✔] \n\n\n\n\n\n\nWarning\n\n\n\nIf you don’t include -m \"and some message\" with your git commit command, odd things happen. See the bottom of this chapter.\n\n\nCongrats! You have made your second commit, saving this point in time on your computer. Note the git bash prompt how has a checkmark at the end [main L|✔], noting there are no uncommitted changes.\nOur next step is to push that new change to Github.\n\nUse the git push origin main command to push this to Github.\n\ngit push origin main\nHere is the command and the response:\n$ git push origin main\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 410 bytes | 410.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nTo github.com:critmcdonald/christian-git-practice.git\n   75090ef..eda683e  main -&gt; main\n(base) ✔ ~/Documents/icj/christian-git-practice [main L|✔] \nThat’s a lot of mumbo jumbo that we don’t have to understand details of, we just have to recognize that it did “Writing” and you didn’t get an error.\nWhy origin main? This is the part that sends this to our Github repo to share with the world. The main part is the branch name, and that is something we may get into later in the semester.\n\nNow go back to your Github repo in your browser and hit refresh on your repo, and you’ll see the result there. Woo hoo!\n\n\n\n4.3.3 Repeat: Add, commit, push\nNow let’s make another change to your file and repeat the cycle.\n\nGo into VS Code and add a new sentence to your myname.md file.\nUse the terminal to check the status of your repo using git status.\n\n$ git status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   christian.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n(base) ✔ ~/Documents/icj/christian-git-practice [main L|✚ 1] \nThe return says we have one modified file, christian.md. Note the git-bash-prompt also shows ✚ 1 at the end, which means there is one file with changes.\nSince I want to stage all the tracked files (even though it is only one here), we’ll use a fancy command to add “all” the modified files so we don’t have to name it. The period means “all changed files”.\n\nDo git add . as noted below and you’ll get this response:\n\n$ git add .\n(base) ✔ ~/Documents/icj/christian-git-practice [main L|●1]\nThere isn’t really a response for staging a file if it is successful, except for the git-bash-prompt changing to a red ●1.\n\nNow finish it out by adding a commit and message as noted below:\n\n$ git commit -m \"adding changes\"\n[main 3c4dbe4] adding changes\n 1 file changed, 2 insertions(+)\n(base) ✔ ~/Documents/icj/christian-git-practice [main L|✔] \n\nAnd then push the changes to Github:\n\n$ git push origin main\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 316 bytes | 316.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo github.com:critmcdonald/christian-git-practice.git\n   eda683e..3c4dbe4  main -&gt; main\n(base) ✔ ~/Documents/icj/christian-git-practice [main L|✔] \nWell done! You’ve learned the basic git cycle and pushed code to Github."
  },
  {
    "objectID": "git-02-cycle.html#turn-in-your-assignment",
    "href": "git-02-cycle.html#turn-in-your-assignment",
    "title": "4  Using Git",
    "section": "4.4 Turn in your assignment",
    "text": "4.4 Turn in your assignment\nIn Canvas, find “Version control assignment” and submit the URL of your Github repo."
  },
  {
    "objectID": "git-02-cycle.html#if-you-forget--m",
    "href": "git-02-cycle.html#if-you-forget--m",
    "title": "4  Using Git",
    "section": "4.5 If you forget -m",
    "text": "4.5 If you forget -m\nIf you are committing files with git commit and you forget to add the -m flag or the message in quotes after it, you will get thrown into an odd program called VIM. It will look something like this:\n\n\n\nvim commit\n\n\nIf this happens:\n\nPress i on your keyboard to get into insert mode.\nType your commit message into that first line.\nHit the esc key at the top left of your keyboard to get out of insert mode.\nType :wq on your keyboard. Your cursor will move to the bottom of the window. That is OK.\nHit return to end the command.\n\nYou’ll get thrown back into your regular Terminal and be able to continue.\nI don’t want to get into what the VIM commands are, but basically :wq means “write” and “quit”.\nThis GIF shows the process, but not the keystrokes, so use the directions above. Best yet, DON’T FORGET -m!\n\n\n\ncommit-vim\n\n\n\nNotes to self:\n\nfirst-commit.gif uses master\nvim-commit.png uses master"
  },
  {
    "objectID": "html-css-00-intro.html",
    "href": "html-css-00-intro.html",
    "title": "HTML & CSS",
    "section": "",
    "text": "If I had to boil this class into its simplest terms it would be: It’s about building web pages.\nAlong the way we learn about programming tools, best practices and such, but the thing we do is build websites.\nAnd again, in simplest terms, a web page is created using three languages. I like to explain those as if I was explaining a human body. The analogy is actually built into the HTML spec, as you’ll see.\nThe languages go like this:\n\nHTML is the skeleton of a web page. It gives it structure.\nCSS is like the DNA of a web page that describes how it looks. Color, font and things like that.\nJavaScript is the muscle of a web page, controlling all things that move and interact with each other.\n\nThroughout the class we’ll tackle each of these languages, build on them and learn tools to help us use them.\nWhen it comes to these languages there are many tutorials you can use to learn the syntax so I’m not going to reinvent them for this class.\nSo this is how you proceed with the next section of this class:\n\nDo the Codecademy tutorials outlined. This is where you learn the code structure.\nDo the “in-class” assignment, which is a guided walk through of using the code.\nDo the “mastery” assignment, where you use what you’ve learned in a new project.\nTake the quiz."
  },
  {
    "objectID": "html-01-practice.html#tutorials",
    "href": "html-01-practice.html#tutorials",
    "title": "5  HTML practice",
    "section": "5.1 Tutorials",
    "text": "5.1 Tutorials\nDo the tutorials noted below before you start on this project. Codecademy is a freemium platform were some lessons are free and others are paid. These modules outlined below should be free and you don’t need to do any paid modules, though you are welcome to do so. All the quiz material will come from free modules or our practice and mastery assignments.\n\nSign up for a Codecademy account and find the Codecademy HTML tutorial.\nDo these “Lessons” within the Elements and Structure section:\n\nIntroduction to HTML\nHTML Document Standards\nSemantic HTML\n\n\nJust do the Lessons. You don’t have to do the quizzes or projects, unless you want to. While you’ll have time in class to work on the practice assignment, you should have already completed the Codecademy lessons for HTML."
  },
  {
    "objectID": "html-01-practice.html#learning-objectives",
    "href": "html-01-practice.html#learning-objectives",
    "title": "5  HTML practice",
    "section": "5.2 Learning objectives",
    "text": "5.2 Learning objectives\nNot every nuance of HTML is explained here because you should be using knowledge gained from the above tutorials.\nThe goal of this assignment is to:\n\nCreate a git repo on your local machine to keep code under source control.\nCreate an online Github repo and create a connection to it with your local repo.\nCreate a basic web page structure and content using proper HTML syntax and indenting practices.\nLearn some tips and tools within VS Code along the way.\n\n\n5.2.1 Envision success\nTo meet the learning objectives, you’ll be “coding up” a recipe with HTML. When this portion is done, it will look like this in your browser:\n\n\n\nHTML gif\n\n\nDon’t worry … we’ll make it prettier in the next chapter.\nSince that gif moves all about, here is a PNG of the rendered HTML.\nYou might also look at the recipe that inspired the lesson: On NYT Cooking | Screenshot.\n\n\n5.2.2 Resources\nYou have the internet at your disposal for help, though I ask that you not use Copilot or any AI tools. Here are some resources you might find useful.\n\nYou can review steps in the Codecademy Learn HTML course.\nYou can look up specific resources in the W3 Schools HTML documentation. Mozilla also has good docs.\nGoogle it."
  },
  {
    "objectID": "html-01-practice.html#project-setup",
    "href": "html-01-practice.html#project-setup",
    "title": "5  HTML practice",
    "section": "5.3 Project setup",
    "text": "5.3 Project setup\nYou need to create a new project folder like you did in our last couple of chapters Project setup and Using Git but applied to this new project.\n\nCreate a project folder and name it yourname-html-css.\nAdd your README.md and .gitignore files, including the contents.\nInitiate your local repo, create your Github repo and connect them."
  },
  {
    "objectID": "html-01-practice.html#build-a-recipe-web-page",
    "href": "html-01-practice.html#build-a-recipe-web-page",
    "title": "5  HTML practice",
    "section": "5.4 Build a recipe web page",
    "text": "5.4 Build a recipe web page\nWe’re going to build the HTML structure for the recipe page noted above. I’ll supply the text that you need to turn into HTML markup. While there are AI tools that could do all that work for us, you wouldn’t learn chat-shit from that. We’re going to code this up with VS Code so we can talk about the elements as we go along.\nIn our first pass here, we’ll mark up the text items for what physically are … their HTML bone structure. We’ll add some semantic tags a little later.\n\n5.4.1 Create the file\n\nCreate and save a new HTML document called recipe.html. You can use the touch command to do this.\n\nNext we need the basic elements required for an HTML 5 document. There is a super easy way to do this thanks to a special thing in VS Code called Emmet.\n\nAt the top of the file, type html and you’ll see some selections come up. Use the arrow key on your keyboard to choose the option html:5 and hit return. You should get all the boilerplate elements you need for an HTML page.\n\n\n\n\nHTML boilerplate gif\n\n\n\n\n5.4.2 About indenting code\nA quick aside here: Notice how that boilerplate HTML code is formatted. Tags that are inside of one another are indented to show their relationship. This is shown with the &lt;meta&gt; tags inside the &lt;head&gt; tag.\nAs you write code in VS Code it will try to do this for you, and you need to let it help you. This indenting syntax is super helpful as code gets more complicated.\nStrive to write beautiful code.\n\n\n5.4.3 Collect the text\nNow to save some mindless typing, I’ve saved a copy of the unstyled text for you.\n\nControl-click on this link to open the text we need into a browser window, then highlight and copy the contents.\nPaste the contents in between the &lt;body&gt; tags of your recipe.html document.\n\n\n\n5.4.4 Headlines\nThe first line in our text is the headline of the article, and that next needs to be in two places in our HTML document:\n\nCopy the text “Creamy Baked Macaroni and Cheese” and paste it inside a &lt;title&gt; tag in the head of the document. The &lt;title&gt; tag is what’s displayed in the tab of your browser.\nGo back to the body of the text and add &lt;h1&gt; tags around that line to make a main headline.\n\nWhen you created the &lt;h1&gt; tag, VS Code likely added both the opening and closing h1 tags, and you had to cut ‘n’ paste or delete/retype the closing tag in the correct place. Let’s introduce Emmet, which is a shorthand syntax and tool for programmers to help write code. It is baked into VS Code.\nWe’ll use the next line “Brought to you by New York Times Cooking” as a h2 headline, and we’ll want to use an anchor tag around “New York Times Cooking” to link to the original recipe. We’ll use Emmet to help use write the code.\nThere are two parts to using Emmet to mark up existing code, after highlighting your text:\n\nYou invoke the Command Palette in VS code and choose the Emmet: Wrap with Abbreviation function\nThen you type in the tag or tags to apply based on Emmet shorthand. The shorthand isn’t hard as it is based mostly on the tags themselves without the angle brackets.\n\nLet’s show an example of how it works. I do this in two steps … I apply the &lt;h2&gt; tag to all of the text, and then apply an anchor tag &lt;a href=\"\"&gt; to just the name of the publication.\nWatch what happens to the code (line 11) as I choose which tags to apply.\n\n\n\nEmmet use on headline\n\n\nHere is how you do the same:\n\nHighlight the text “Brought to you by New York Times Cooking”.\nDo command-shift-p to bring up the Command Palette in VS Code. (Control-shift-p for Windows.)\nBegin typing in the text “Emmet: Wrap” and you’ll see the list of commands filter down. Use your arrow keys to select Emmet: Wrap with Abbreviation and hit return. That list of commands will go away but a new box will appear so you can type in the next command.\nType in the text h2 and hit return. This will wrap your text in both the beginning and ending &lt;h2&gt; tags.\nNow, do the same thing to apply the anchor tag around the text “New York Times Cooking”. The Emmet tag for anchor is just a.\n\n\n\n\n\n\n\nNote\n\n\n\nEmmet is really cool, but it only helps you write the code you already know you want. In other words, you have to know HTML syntax before you can use Emmet’s shorter syntax to write it. Luckily it’s not hard to figure out. Some useful resources for Emmet:\n\nDocumentation\nSyntax cheatsheet\n\n\n\n\n\n5.4.5 Adding class\nThe next line of our file is the byline for the recipe article. The byline is a simple text element, so it should be inside a &lt;p&gt; tag, but we will add a “class” to this element so we can target it later as CSS.\nI’m not going to get into what a class is just yet as that is the next lesson, but I do want to show how Emmet allows us to add a class while marking up text. This time I’ll give the steps, then show it.\n\nHighlight the text “By Eric Kim”.\nDo command-shift-p to bring up the Command Palette.\nThe Emmet: Wrap with Abbreviation command is probably at the top since you used it last, so you can just hit Return.\nFor the Emmet syntax, use p.byline.\n\nThe p part is to add the &lt;p&gt; tag. The . says to add a “class” designation to the element, and byline is the class name we are applying. If we wanted to add an id= instead, it would be p#byline.\n\n\n\nEmmet wrap with class\n\n\nFor the last part of the byline here, you need to wrap the authors name with a link to his NYT profile.\n\nUse Emmet to create the a tag around “Eric Kim” and use the provided URL as the href.\n\n\n\n5.4.6 Live server\nYou will want to occasionally check to see how your code is displaying in a browser to make sure everything is working as expected. One way is to open the html file in Chrome (File &gt; Open File) and the refresh each time you want to see an update. But there is a better way: When we did our computer setup you should’ve installed a VS Code extension called “Live Server”.\n\nClick on the “Go Live” button at the bottom-right of VS Code\n\n\n\n\nStart live server\n\n\nThis will create a web server on your computer and then open the current file in your default browser. As you make changes to the HTML and save it, the page automagically updates in your browser.\nYour page should look something like this at this point:\n\n\n\nEarly look\n\n\nI suggest now get in the habit of saving your work after each section we work through here, and then check your live server to see how it looks.\n\n\n5.4.7 Description lists\nThis next bit of text we need to put together as a description list, which is a special list construct where you have a “term” and a “description”. Look at that this W3schools link to see how it works.\nThe description list is a little different because the list “items” come in two parts, the &lt;dt&gt; tag for the “term” and the &lt;dd&gt; tag for the “description” of the term. We can use Emmet to get us real close with the text we have, but we’ll need to do a little correction at the end.\nWith this Emmet command we’ll introduce child elements and multiplication. By using the Emmet shorthand dl&gt;dt* I’m saying “Wrap all of this with a &lt;dl&gt; tag, then inside of that (the &gt;) wrap the elements with &lt;dt&gt; tag, multiplying for all the items (the * part.)\nWatch what happens to the text as I add each part of the command. Note I don’t get exactly what I want since I can’t alternate the &lt;dt&gt; and &lt;dl&gt; tags (or at least I don’t know how), so I fix those manually.\n\n\n\nEmmet description list\n\n\nNow you need to do the same with your code.\n\nUse the emmet syntax dl&gt;dt* to wrap create your description list.\nManually fix the descriptions to use &lt;dd&gt; tags.\n\nYour page should look like this when you are done.\n\n\n\nPage after description lists\n\n\n\n\n5.4.8 Images\nIn our text we have a caption for a photo, but not the photo itself. We need to download it.\n\nClick on the download link below.\n\n\n\n\n\n\n\n Download this photo\n\n\n\n\nSave (or move) the photo into your project folder right next to recipe.html.\n\n\n5.4.8.1 About figures\nOne of your Codecademy lessons was about Semantic HTML, and we’ll apply some of that here. From our lessons, we know that the &lt;img src=\"\"&gt; tag can display an image, but to make this image accessible and useful to all users of the web, we need to add an alt= attribute to describe the image with words. It’s also best to wrap both the image and caption in a semantic &lt;figure&gt; tag so screen readers understand what that the image and caption go together.\nSo far, we’ve used Emmet to wrap existing code, but we can also write shell code using Emmet. In some cases we can tab through the written parts to fill in context.\nAgain, this might be helpful to see before you do it on your own. This is me adding the figure, img and figcaption tags we just talked about, and then filling the values. There is a lot of “tab” keying here you don’t see.\n\n\n\nCreate figure with Emmet\n\n\nOK, here are the steps for you:\n\nOn a blank line above the caption in your text, add the following Emmet syntax, then use tab to complete it.\n\nfigure&gt;img+figcaption\n\nUse your tag key to type in the path to the image, then the alt attribute as show in the gif above.\n\nThe new thing we added with that syntax is +, which says we want both an &lt;img&gt; and &lt;figcaption&gt; tag inside the figure.\n\n\n\n5.4.9 Paragraphs\nOur next bit of text in our file is the recipe introduction, which is just text. We want to mark this up as paragraph and class the element as “intro”. You did this before with the byline.\n\nCode the intro with the Emmet syntax p.intro.\n\nIf you had multiple paragraphs, you could highlight all the text and use the shorthand p* to code each individual paragraph.\n\n\n5.4.10 Unordered lists\nOur ingredients list needs to coded where the headline is an H3 tag and the actual ingredients are in an unordered list.\n\nCode the “Ingredients” subhead as an H3\nUse the “Emmet: Wrap with Abbreviation” command with the syntax ul&gt;li* to code the ingredients list.\nSoe the same for the “Nutrition” section further down the page.\n\n\n\n5.4.11 Ordered lists\nThe preparation steps are similar to the ingredients and nutrition, but the items need to be in an “ordered” list to show the step numbers.\n\nCode the “Preparation” subhead as an H3\nUse Wrap with Abbreviation on the steps, with ol&gt;li*\n\n\n\n5.4.12 Semantic blocks\nNow, if you check your live server again your page should look like the example shown at the beginning of this lesson, but we aren’t quite done yet.\nIn the Semantic HTML lesson you learned that we use some HTML tags to designate parts of pages so screen readers and other enabling software can understand our pages. We can also utilize those tags later when we style pages with CSS.\nWhile we don’t have a full website page here with navigation and such, I want you to mark up the parts of the pages that we do have:\n\nAdd an &lt;article&gt; tag that encapsulates everything within our &lt;body&gt; thus far. So it should start right after the opening &lt;body&gt; tag and close right before the closing &lt;/body&gt; tag.\nUse a &lt;header&gt; tag to wrap the code starting at the main headline and ending after the definition list. In other words, stop it before the &lt;figure&gt; tag, which we’ve already added.\nAdd separate &lt;section&gt; tags around the Ingredients, Preparation and Nutrition sections. Each of those sections should be inside their own &lt;section&gt; tag.\nAdd a new &lt;footer&gt; tag and child &lt;p&gt; tag after the closing &lt;/article&gt; tag. Inside the paragraph tag, add the text “A class project by First Last” but with your name."
  },
  {
    "objectID": "html-01-practice.html#commit-and-push-your-code",
    "href": "html-01-practice.html#commit-and-push-your-code",
    "title": "5  HTML practice",
    "section": "5.5 Commit and push your code",
    "text": "5.5 Commit and push your code\nSave, add, commit and the push your code to your repo in Github. To review, the steps are:\n\nUse git status to check the status of your files. You probably have two untracked files, your html and your image.\nUse git add . to add all the untracked files.\nUse git commit -m \"your message here\" to commit your changes, but write your own short message that explains what you have done with this commit.\nUse git push origin main to push them to Github."
  },
  {
    "objectID": "html-01-practice.html#turn-in-your-work",
    "href": "html-01-practice.html#turn-in-your-work",
    "title": "5  HTML practice",
    "section": "5.6 Turn in your work",
    "text": "5.6 Turn in your work\nTurn in a link to your repo in the assignment in canvas."
  },
  {
    "objectID": "html-02-mastery.html#getting-started",
    "href": "html-02-mastery.html#getting-started",
    "title": "6  HTML mastery",
    "section": "6.1 Getting started",
    "text": "6.1 Getting started\nSee the Project setup and Using Git chapters if you need a review on the project setup.\n\nInside your icj folder, create a new project folder, called yourname-html-css-mastery.\nCreate a README.md file using proper Markdown with a title, the assignment name and the due date.\nCreate a .gitignore file like we did in practice, using gitignore.io to include VisualStudioCode, macOS and Windows.\nUse the git cycle to add and commit the files.\nCreate a new repo in Github with the same name as your local folder. Do NOT check the boxes there for the readme or gitignore since you created them locally.\nAfter you create the online repo, connect the two with the git remote add command shown in your Github repo.\nPush your changes from your local machine to Github.\nRefresh our Github page to make sure everything worked."
  },
  {
    "objectID": "html-02-mastery.html#the-assignment-requirements",
    "href": "html-02-mastery.html#the-assignment-requirements",
    "title": "6  HTML mastery",
    "section": "6.2 The assignment requirements",
    "text": "6.2 The assignment requirements\n\nIn your repo, create a new file named story.html. Use Emmet to put the HTML5 code in that file, and make sure it has all the proper HTML5 tags like doctype, title, head, body, etc.\nUse this text file for the page content.\nCode the overline (the text “OPEN THREADS”) as an &lt;h4&gt;.\nCode the main headline and the subhead with the proper hierarchy of header tags. (i.e., the main headline should be bigger than the subhead).\nCode the subhead that is inside the story “Under the radar” as an &lt;h3&gt; tag, which is typically for that display.\nPut the byline in a &lt;p&gt; tag and properly link to the included Twitter handle.\nPut the date in a &lt;span&gt; tag.\nDownload this photo and save/move it in your project folder.\nAfter the byline, add an semantically-correct image and caption using the downloaded image above and the “Soobum Im / USA TODAY Sports” text.\nStyle all the story text in &lt;p&gt; tags. Each paragraph of text should have it’s own beginning &lt;p&gt; and ending &lt;/p&gt; tag.\nThere is a quoted text paragraph that starts with “Granted, not every starting …”. Put that in a blockquote tag. Don’t know that one? Look it up.\nAdd a hypertext link to the text “ranking the starting five line-ups” that links to this url, opening in a new window.\nUse an ORDERED list for the ranking list of teams in the middle of the story, but it should start with the Philadelphia 76ers as number 5. Don’t know how to do that? Google it.\nThe last two paragraphs are not really part of the article, but instead the opening for the comments section. Make sure that is semantically separate. Put the text within their own &lt;p&gt; tags."
  },
  {
    "objectID": "css-01-practice.html#tutorials",
    "href": "css-01-practice.html#tutorials",
    "title": "7  CSS practice",
    "section": "7.1 Tutorials",
    "text": "7.1 Tutorials\nSimilar to the last lesson you need to do a series of tutorials before attempting this practice assignment. The CSS lessons will take longer than the HTML set of lessons.\nDo the Codecademy CSS tutorial lessons described below:\n\nSyntax and selectors\n\nSetup and Syntax\nSelectors\n\nVisual rules\n\nVisual rules\n\nThe Box Model\n\nThe Box Model\nChanging the Box Model\n\nDisplay and Positioning\n\nCSS Display and Positioning"
  },
  {
    "objectID": "css-01-practice.html#goals-of-this-lesson",
    "href": "css-01-practice.html#goals-of-this-lesson",
    "title": "7  CSS practice",
    "section": "7.2 Goals of this lesson",
    "text": "7.2 Goals of this lesson\n\nTo understand default browser styling and how to handle it.\nTo use CSS styles to give visual appeal to web pages, applying the principles you learned in the Codecademy lessons.\n\nThis will be our finished product:\n\n\n\nFinished practice page\n\n\nHere is a PNG of the practice project, which might be easier to study."
  },
  {
    "objectID": "css-01-practice.html#resources",
    "href": "css-01-practice.html#resources",
    "title": "7  CSS practice",
    "section": "7.3 Resources",
    "text": "7.3 Resources\nYou have the internet at your disposal for help, but please avoid AI tools at this time. (We’ll explore those later.) Here are some resources you might find useful.\n\nYou can review steps in the Codecademy Learn CSS course.\nYou can look up specific resources in the W3 Schools HTML documentation. Shay Howe has a pretty good tutorial. Mozilla also has good CSS docs.\nGoogle it. Use good search techniques: Include the term “css” and your goal or css property."
  },
  {
    "objectID": "css-01-practice.html#css-reset",
    "href": "css-01-practice.html#css-reset",
    "title": "7  CSS practice",
    "section": "7.4 CSS Reset",
    "text": "7.4 CSS Reset\nLet’s get our project loaded.\n\nGo into your repo (yourname-html-css) from the previous HTML class lesson\nOpen your recipe.html file\nUse the Go Live button to start your Live Server.\n\nWith just HTML coding, your browser will display this page in an entirely readable way with some default sizing.\nThat said, different browsers display defaults just a little bit differently. Here is this page in Chrome, Firefox and Safari.\nNotice the (admittedly subtle) difference in vertical spacing. The image starts in different places.\n\n\n\nBrowser example 1\n\n\nAnd a little further down the page, notice the difference in the size of the bullets and the line height between lines.\n\n\n\nBrowser example 2\n\n\n\n7.4.1 Add the reset file\nThere is way to deal with these differences. The concept – called a CSS Reset – is to zero out all margins, padding and text sizes so you have a zero base to work from before applying new styles. The version that we will use is from HTML5Doctor, and you can read about it here.\nSo, let’s do it:\n\nIn your yourname-html-css folder, create a new blank file called reset.css – you might use the touch command to do this, or File &gt; New File in VS Code – and then populate it with the contents of the HTML5resetCSS file.\nWe need to add a link in our HTML stylesheet to the reset CSS stylesheet. Put this before the closing &lt;/head&gt; tag.\n\n(If you start typing “link” then Emmet will give you options, where you can choose link:css.)\n&lt;link rel=\"stylesheet\" href=\"reset.css\"&gt;\nThe link tag basically connects these files together. I’ll be honest … I never remember how to write it … I depend on Emmet or look it up.\nSave your page and look at you Live Server to watch your something-kinda-special web page turn into muck.\n\n\n\nPage after reset\n\n\n\n\n7.4.2 Relative font sizing\nIf you’ve worked with any HTML font sizing before, you might be familiar with setting the size of things in pixels, or px. When you use that type of measurement with fonts it makes it difficult to adjust them for different screen sizes, which is common with responsive design. (Responsive design is making web pages that work equally well on phones, tablet and desktops.)\nSo we’ll use a method to build upon our CSS reset that creates a base size for fonts, and then makes any further changes relative to that base size. There is more to it than that, but we’ll skip the why and discuss the how:\n\nWe’ll reset the browser default text size from 16px to 10px. We do this by using a percentage: 62.5% of the original 16px.\nNow every rem value we use is based on factors of 10 1rem is equal to 10px and 2.4rem is equal to 24px for a normally-sized browser.\n\n\n\n7.4.3 Create styles file, reset defaults\n\nCreate a new file and call it styles.css.\nNow, in your recipe.html file, add a new &lt;link&gt; tag referring to that css file after the reset.css link.\nNow we’ll add some defaults for the &lt;html&gt; tag in the styles.css file. Add this to the top, then save both the css and html files.\n\nhtml {\n  font-family: 'Times New Roman', Times, serif;\n  font-size: 62.5%;\n}\nIf you check your live server you’ll see things got worse … everything is super small now. Don’t worry, we’ll fix it.\n\n\n7.4.4 Set text sizes\nLet’s fix up the text sizes. We’re going to set a base size for all basic text elements, and then change them later in the places where we need them. Add this to your styles file:\np, ul, ol, dl {\n  font-size: 1.6rem;\n  line-height: 1.8rem;\n  margin-bottom: 12px;\n}\nWhat this has done is set all text-type elements at what is the equivalent to 16px, but we’ve used the rem measurement to set it relative to the base size, which was essentially 10px.\nWe’ve set a line-height so lines of type don’t sit on top of each other and we’ve also given all of those elements a bottom margin so the elements have some space between them.\nIn the definition above, it’s important that we have commas between each HTML element. If we don’t have those, the browser will think we need all of them together (and) instead of any of them (or). We are setting these rules for p or ul or ol, etc. Not all of them used together.\n\n\n7.4.5 Set headline sizes\nNow we’ll set headlines font and sizes. Add this to your styles.css file, save and refresh your browser:\nh1, h2, h3, h4, h5, h6 {\n  font-family: Tahoma, Arial, sans-serif;\n}\n\nh1 {\n  font-size: 2.7rem;\n  line-height: 3.1rem;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 2rem;\n  line-height: 2.4rem;\n  margin: 16px 0;\n}\n\nh3 {\n  font-size: 1.75rem;\n  margin: 25px 0 8px 0;\n}\nThe first rule sets the font to a series of sans serif fonts, and we’ve done it for all headline sizes.\nThe other rules set sizes and margins for various sizes of headlines. You’ll notice that the margins are set in a single line. You can review the rules regarding that here."
  },
  {
    "objectID": "css-01-practice.html#set-article-width",
    "href": "css-01-practice.html#set-article-width",
    "title": "7  CSS practice",
    "section": "7.5 Set article width",
    "text": "7.5 Set article width\nHaving all this smooshed to the left side of the page is annoying. Let’s set some boundaries for the article. If you look at the finished example above, the content is a certain width and centered in the page. We’re going to do this by writing a style to the &lt;article&gt; semantic tag we created in the last lesson.\n\nIn styles.css, add the following styles:\n\narticle {\n  max-width: 620px;\n  margin-right: auto;\n  margin-bottom: 30px;\n  margin-left: auto;\n}\nThis margin-&lt;direction&gt;: auto; style was discussed in the Learn CSS lesson in Codecademy.\nIf you’ve done this right, your live server should show that all the content is centered on the page.\n\n\n\nPage after fonts, width set"
  },
  {
    "objectID": "css-01-practice.html#using-class-and-id",
    "href": "css-01-practice.html#using-class-and-id",
    "title": "7  CSS practice",
    "section": "7.6 Using class and id",
    "text": "7.6 Using class and id\nSo far, all of the styles we’ve created has been written to an “element” tag, like &lt;p&gt; or &lt;h3&gt;. But what if we want to style two different paragraphs differently?\nFor instance, on our page we have two &lt;p&gt; tags that serve different purposes: Our byline and our intro. We want them to look different. This is why we added class=\"byline\" and class=\"intro\" to those paragraphs.\nThere is a cascading hierarchy to styles (hence the term Cascading Style Sheets):\n\nHTML elements are the most generic thing you can style. A &lt;p&gt; tag or &lt;h1&gt;, etc. If you write a style for one, it affects ALL of those elements on your site. The style for a &lt;p&gt; tag is: p {selector: rule;}\nBut sometimes you have common elements that you re-use often, like byline. You always want those to look a certain way on your site, but you want them to look differently than you body text. So, you “classify” that element with a class attribute: class=\"byline\". Now that it is classified, we can write one style that will affect all the bylines. When we write a style for one of these classes we indicate that by preceding the class name with a period: .byline {font-family: Arial;}.\nThere are also instances when an element is used only one way on a page, so we can “identify” that element with an id attribute: id=\"unique-whatever\". An example on our page is our ingredients list; there is always only one of those on a page. When we use an id we are indicating to the browser (and our fellow coders, and even Google) that this element only appears once on this page. When we write a style for an id, we precede the name with a hash to indicate the style is for an id: #unique-whatever {font-family: Times;}.\n\n\n\n\n\n\n\nImportant\n\n\n\n\nAlways use lowercase characters in class names and use dashes if they have more than one word. Using a common convention to write code helps people collaborate because is predictable and more readable.\nName your classes for what the element is, not what you want it to look like. If you used the class name tahoma instead of byline and then decided later to change your byline font to be “Franklin Gothic”, that would be confusing.\n\n\n\n\n7.6.1 Setting style by class\nWe want our byline to be in a sans-serif font while we want our other paragraphs to maintain the default serif font, so let’s write a style to it.\nWe add a . before the style name to target it, so .byline.\n\nAdd the style below for the byline\n\n.byline {font-family: Tahoma, Arial, sans-serif;}\nWe’ve changed the font from the default to Tahoma, with some backups in case a user doesn’t have that font.\nAbout font names … If you wanted to use Franklin Gothic as as a font it would need to be in quotes because it is multiple words: font-family: \"Franklin Gothic\", Arial, sans-serif;.\nWe will style to an id= attribute a little later in the assignment.\n\n\n7.6.2 Tricks of the trade\nWhen writing styles I’ll often use the browser Inspector to experiment with what they might look like on the screen. Once I figure out my style, I can then add it to my styles file.\nIt’s easier to show this than to write it out, but here are the steps:\n\nUse control-click on the element to get the contextual menu and choose Inspector.\nMake sure you are on the correct element in the Element tab of the Inspector.\nAdd/modify rules rules in the Styles tab of the Inspector.\n\nHere is a video example.\n\nI’ll drop a couple more tips as we go through the lesson."
  },
  {
    "objectID": "css-01-practice.html#borders",
    "href": "css-01-practice.html#borders",
    "title": "7  CSS practice",
    "section": "7.7 Borders",
    "text": "7.7 Borders\nWhile there is an HTML element for a horizontal rule &lt;hr&gt;, it’s best to set such things using CSS. For instance, we need want dotted borders on our recipe stats section:\n\n\n\nStats box\n\n\nWe’ll get to the text placement next, but let’s set up the fancy lines at the top and bottom of the description list first.\n\nAdd styles for the dl element to add dotted lines:\n\ndl {\n  border-bottom: 1px grey dotted;\n  border-top: 1px grey dotted;\n}\nCheck your live server to see the borders. We used a shorthand for the border property that allows us to set the size, color and style in one rule.\n\n\n\nDescription list with borders"
  },
  {
    "objectID": "css-01-practice.html#float",
    "href": "css-01-practice.html#float",
    "title": "7  CSS practice",
    "section": "7.8 Float",
    "text": "7.8 Float\nAnother story about tricks of the trade. When I was preparing this lecture, I had trouble getting the &lt;dt&gt; and &lt;dd&gt; values to show on the same line. So, what do you think I did? I googled it, of course, using the phrase “make css dd dt on same line”. I got my answer here. It wasn’t the first answer of my Google search … I had to poke around on different search results until I found one that worked for me.\nBut what the answer does is introduce the float style for us, which is one of the ways we can position items on a page using CSS. We can use float to move our &lt;dt&gt; tags to the left of our &lt;dd&gt; tags so they are on the same line.\n\nAdd the following styles to your style sheet.\n\n\n\n\n\n\n\nTip\n\n\n\nTry adding one rule at a time and saving your styles file so you can see what each one does in your live server. I really encourage you to type out the rules so you can see how VS Code helps you write.\n\n\ndt {\n  float: left;\n  margin-right: 5px;\n  font-weight: bold;\n}\n\nThe first rule moves the &lt;dt&gt; elements to the left of any element that follows.\nThe second puts some margin on the right side of hat &lt;dt&gt; tag so it isn’t smooshed next to the &lt;dt&gt; element.\nThe last line makes the &lt;dt&gt; text bold.\n\nWe have just a bit more cleanup styling to do to adjust the type styles, margins and padding of the description list.\n\nEDIT your rules on the &lt;dl&gt; element to add each line below. Again, try adding them one at a time so you see what each rule does.\n\n  font-family: Tahoma, Arial, sans-serif;\n  font-size: 1.4rem;\n  padding: 12px 0px;\n  margin-top: 16px;\nNow your recipe stats should look like our example above."
  },
  {
    "objectID": "css-01-practice.html#percentage-widths",
    "href": "css-01-practice.html#percentage-widths",
    "title": "7  CSS practice",
    "section": "7.9 Percentage widths",
    "text": "7.9 Percentage widths\nAnother tool to control the position of elements on an page is the width style, which we will use to divide our page based on the percentage of our page.\nIf you look at our finished example at the top of this lesson you’ll see that the photo and caption are sitting to the right of the headline, byline and such. We’ll use float to move the header element to the left of the figure element, but we also need to regulate how wide all these things are so they fit in our story well.\nOne challenge is that our website will likely have LOTS of figures/photos, so we want to move just this one display as it relates to the main image in a recipe story. Since there is always only ONE main image for each recipe, we can use an id to target this and manipulate it.\nSo there are two steps here: Edit our HTML to add the id, then write styles to manipulate it.\n\nIn your recipe.html file, find your &lt;figure&gt; tag and add the id called “main-recipe-photo”: &lt;figure id=\"main-recipe-photo\"&gt;. Save the HTML file.\nGo into your styles.css file and add the following rules:\n\n\n\n\n\n\n\nTip\n\n\n\nAgain, try adding these three rules one at time so you see how each one affects the layout.\n\n\nheader {\n  float: left;\n  width: 48%;\n}\n\nfigure#main-recipe-photo {\n  float: right;\n  width: 48%;\n}\n\nfigure#main-recipe-photo img {\n  width: 100%;\n  margin-top: 20px;\n}\nThis is a lot to break down.\n\nIn the header, we set the whole element (which includes the two headlines, byline and stats box) to float to the left and only take up 48% of the page.\nThen we take the figure and float it to the right and make it only 48% the page. It moves it, but the photo is too big to fit in that space. Note we are targeting only figures with an id of “main-recipe-photo” so this would not affect other photos on the page.\nSo in the last rule we target images inside figures with an id of “main-recipe-photo” and set the width to be 100% of the available space, which is that 48% segment within the figure. We add a margin so it starts about even the main headline.\n\n\n7.9.1 Style our figcaption\nLet’s pretty up our figure caption. There is nothing new here, but we need to add a style for the figcaption element. We are setting this to the element because we want this style for all our captions across our page and website.\nfigcaption {\n  font-family: Tahoma, Arial, sans-serif;\n  font-size: 1.2rem;\n  margin-top: 2px;\n  margin-bottom: 20px;\n}\nWe’re just setting font styles and giving a little space between stuff.\n\n\n7.9.2 Breaking a float\nWe’ve made progress, but we’re not quite there.\n\n\n\nAfter setting figure floats\n\n\nAs you can see here, the intro is creeping up under the photo, but we want it to go all the way across the page. It’s getting pulled there because of the floats on the elements above. We can fix this by adding a clear style on our intro text. The clear tag cancels out floats, and you can set it to clear left, right or both directions.\nWhen we coded our HTML file we had added a class called “intro” to that paragraph, so we will target that with this next rule:\n.intro {\n  margin-bottom: 20px;\n  clear: both;\n}\nThis pushes the intro down so it flows across the page. There is a little space under the photos, but that is OK because that main photo might not always be that shape."
  },
  {
    "objectID": "css-01-practice.html#list-styles",
    "href": "css-01-practice.html#list-styles",
    "title": "7  CSS practice",
    "section": "7.10 List styles",
    "text": "7.10 List styles\nThe default unordered list looks crappy. We want to do two things here:\n\nLet’s move the bullets so they line up with the other text in the article. We do this with list-position.\nLet’s change the style of the bullets to add a little style flare with list-style-type.\n\nWe are setting these as our default unordered list styles for the site.\n\nAdd to your css file:\n\nul {\n  list-style-position: inside;\n  list-style-type: square;\n}\nIf you are living right, your list should look like this now:\n\n\n\nUnordered lists\n\n\n\n7.10.1 Set the ordered list style\nWe need to do the same here for ordered lists.\n\nAdd these styles to add little margin under each list item so they can breathe.\n\nol {\n  list-style-position: inside;\n}\n\nol li {\n  margin-top: 8px;\n}"
  },
  {
    "objectID": "css-01-practice.html#alternating-styles",
    "href": "css-01-practice.html#alternating-styles",
    "title": "7  CSS practice",
    "section": "7.11 Alternating styles",
    "text": "7.11 Alternating styles\nOur nutrition information is our last challenging piece and we get to learn some more advanced CSS fu. This is our goal:\n\n\n\nNutrition list example\n\n\nBefore we can apply styles to this unordered list, we need to identify it in some way so we don’t also make changes to the ingredients list. To do that, you’ll go in and add an to the &lt;section&gt; element:\n\nGo into your recipe.html page and find the semantic HTML tag &lt;section&gt; for the Nutrition section.\nEdit that tag to add id=\"nutrition\".\n\nOur nutrition list currently has a vertical structure. We could separate these items into two sections and float the two sections, but if they were generated from an application or CMS of some kind, we might not know when to separate the left section from the right.\nWhat we’ll do instead is use a combination of float and a special CSS selector called nth-child to adjust every other list item.\nLet’s do this in incremental steps so you can see the magic happen.\n\nSet the dotted border on the li tags with this:\n\n#nutrition li {\n  list-style-type: none;\n  border-bottom: grey dotted 1px;\n}\nSince we only want to change only the list items that are within the nutrition div, we used both the #nutrition id and the li element selectors.\n\nThe first rule we choose a “none” list style to remove the bullets\nThen we add the grey dotted line.\n\nNow let’s use some of the same techniques we used with the header and figure to get these side-by-side.\n\nEdit that style rule to add these two rules:\n\n  float: left;\n  width: 48%\nThat starts putting these side-by-side, but there is no gutter between them.\n\n\n\nList items floated\n\n\nNow the fun part … we need to apply styles to just every other list item (those that now fall into the left column). Our first challenge is to make sure we are targeting the right element. Another trick of the trade: I sometimes write a temporary style to an element, like turning the background red, just to make sure I’m getting the right thing. Let’s do that here.\n\nAdd this rule with the nth-child designation for “odd” elements.\n\n#nutrition li:nth-child(odd) {\n  background-color: red;\n}\nThis shows us that our style is getting the alternating rows:\n\n\n\nAlternating rows\n\n\nLet’s pause here to break down that rule of the nth-child. The nth-child rule lets us apply a style to a specific list item. Where we have used (odd) you could also put in a number, like (4) and it would apply to the fourth item in the list. Or (even). Try it!\nOK, now that we know we have targeted the right items, we can add styles to add a right margin to push those even numbered items over a bit. We’ll also add a clear to those so the footer won’t keep crawling up.\n\nEdit the style rule to add these lines:\n\n(Again, you might do them one at a time to see what they do.)\n  margin-right: 20px;\n\nAnd now you can remove the background-color rule."
  },
  {
    "objectID": "css-01-practice.html#good-enough-sometimes",
    "href": "css-01-practice.html#good-enough-sometimes",
    "title": "7  CSS practice",
    "section": "7.12 Good enough sometimes",
    "text": "7.12 Good enough sometimes\nIf you followed the HTML assignment, you should have a &lt;footer&gt; section in your html, and right now it is probably floating off to the right of the nutrition list. This is because of all the floats in the nutrition section. We can use clear again to help us, but we have couple of other issues.\n\nAdd these values to the css file:\n\nfooter {\n  clear: both;\n  text-align: center;\n  margin-top: 140px;\n}\n\nfooter p {\n  font: 1.2rem Arial;\n}\nWe used clear: both to make sure there are no floats affecting the footer. Still, because of floats in the nutrition section above it the margins are acting super funky here. The CSS doesn’t understand how deep that nutrition section is, and that is why we have the crazy 140px value on the top margin.\nTricks of the trade #32?: If it works, especially if you check that it works in all the browsers (Chrome, Safari, Firefox, Edge), then maybe it is good enough."
  },
  {
    "objectID": "css-01-practice.html#save-and-push-to-github",
    "href": "css-01-practice.html#save-and-push-to-github",
    "title": "7  CSS practice",
    "section": "7.13 Save and push to Github",
    "text": "7.13 Save and push to Github\nYou’ve done it! Compare your page to the example and make sure you have everything.\nUse the git cycle to push all your code to Github."
  },
  {
    "objectID": "css-01-practice.html#turn-in-the-assignment",
    "href": "css-01-practice.html#turn-in-the-assignment",
    "title": "7  CSS practice",
    "section": "7.14 Turn in the assignment",
    "text": "7.14 Turn in the assignment\nTurn in this Github URL to the CSS practice assignment in Canvas."
  },
  {
    "objectID": "css-02-mastery.html",
    "href": "css-02-mastery.html",
    "title": "8  CSS mastery",
    "section": "",
    "text": "9 Goal\nYou’ll make a news story, something like this:"
  },
  {
    "objectID": "css-02-mastery.html#requirements",
    "href": "css-02-mastery.html#requirements",
    "title": "8  CSS mastery",
    "section": "9.1 Requirements",
    "text": "9.1 Requirements\n\n\n\n\n\n\nTip\n\n\n\nYou will likely find it useful to refer to the CSS practice chapter as you work through this.\n\n\n\nMake sure you update your story.html file with any of the feedback you received in grading.\nCreate a reset.css file. You can use the same one we used with the practice assignment, and you need to populate it with the contents of the HTMLDocter reset file.\nNow that you have a reset css file, you’ll need to create another separate css file for all your other styles (name it styles.css) and link it to your html file.\nSet the base (html) font as “Times New Roman” with acceptable backups. Reset the font-size for easier relative sizing by setting the body font size to 62.5%, which is the equivalent of 10px, like we did with the recipe.\nNow set a standard font size for text elements like &lt;p&gt;, &lt;ul&gt;, &lt;ol&gt; and &lt;dl&gt; tags. (Make the base font larger.) You’ll also want to set a bottom margin on those elements so they don’t run up against each other.\nAdd an &lt;article&gt; tag after the &lt;body&gt;tag in your HTML file if you need to, then in your CSS file make the max-width of the article 620px and center it.\nIn the HTML, set the width of the photo to 620px using a “width” attribute (you can put it after the src attribute).\nUse Google Fonts to find and use a font called “Ubuntu” and add that to your page. You can review the chapter Using Google Fonts for tips on how.\nSet all your headlines to use that Ubuntu font (with backups) and set headline sizes that make visual sense, but follow convention. (i.e., make sure h1 is the biggest and is used for the article headline.) Make sure you also include the &lt;h4&gt; label above the headline.\nSet the byline and photo credit lines to use the font Arial with an appropriate backup. Adjust sizes so they are visually appealing.\nUse a &lt;span&gt; tag around the date in the byline, and set it to font-style of italic. This page explains a span, but PLEASE don’t style the span directly like that. Write in the styles file instead.\nMake the photo credit text right-aligned and nudge up the margin so it sits close but not upon the photo so readers know that is what it goes with.\nFor the blockquote, set a solid left border that is grey and 4px thick. Add some padding (20px) between this border and the text, and some left margin (30px) to inset into the article.\nFor the ordered list style, the numbers should line up with the text in the article. list-style-position should help you with this.\nFor the “comment-notes” section, set a background-color of #CCC and give the content padding of 12px on all sides.\nOnce you are done with everything, push it to Github.\nTurn in the link to your repo."
  },
  {
    "objectID": "js-00-intro.html#tutorials",
    "href": "js-00-intro.html#tutorials",
    "title": "JavaScript",
    "section": "Tutorials",
    "text": "Tutorials\nDo the following lessons at Codecademy JS Tutorial:\n\nModule 1: Introduction\n\nIntroduction to Javascript\nVariables\n\nModule 2: Conditionals\n\nConditional statements\n\nModule 3: Functions\n\nFunctions"
  },
  {
    "objectID": "js-00-intro.html#learning-objectives",
    "href": "js-00-intro.html#learning-objectives",
    "title": "JavaScript",
    "section": "Learning objectives",
    "text": "Learning objectives\nIn this section, we will …\n\nPractice basic programming concepts: data types, variables and functions.\nUse the browser console to interact with Javascript.\nApply learned Javascript as a working example in a browser.\nUse pre-written Javascript to build more advanced functionality."
  },
  {
    "objectID": "js-00-intro.html#set-up-your-project",
    "href": "js-00-intro.html#set-up-your-project",
    "title": "JavaScript",
    "section": "Set up your project",
    "text": "Set up your project\nWe need to create a new project to do this work in, the same way you have all your other projects.\n\nCreate a new project folder called yourname-javascript. Create and connect with a new Github repo of the same name. Include a README and .gitignore file.\nYou’ll need to create a new HTML file (call it js-practice.html) with the HTML5 boilerplate.\n\nLike CSS, you can write Javascript either in an HTML page, or in a separate file and link to it. We will be typing all our code within a &lt;script&gt; tag inside the body of our HTML page. Mark the answers for each question using JavaScript’s comment syntax. As you see below, there are two ways to write a JavaScript comment:\n&lt;script&gt;\n\n// This is a comment\nlet somecode = 'this code';\n\n/*\nFYI: this is a comment, too\nbut it can be on more then one line\n*/\n\n&lt;/script&gt;\nYou’ll test all of our code by opening this page with a browser window and then looking at the Inspector’s Console window. The Console is one way we can interact with JavaScript in a browser, and vise versa.\nTo get started:\n\nOnce you’ve created your js-practice.html file, add this code inside it:\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;JavaScript practice&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Your JavaScript page&lt;/h1&gt;\n  &lt;p&gt;Use your Inspector to view your console.&lt;/p&gt;\n  &lt;script&gt;\n    // Your code will go here\n\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nSave your file\nClick on the Go Live button to start your live server, which should open your js-practice.html page. It will be blank and that’s OK.\nRight-click (control-click on Mac) in the middle of the page and choose Inspector.\nWhen then Inspector loads, click on the Console tab.\nYou can close any other little windows that pop up.\n\n\n\n\njs-console\n\n\nOK, let’s start writing some javascript in the next chapter."
  },
  {
    "objectID": "js-01-basics.html#the-console",
    "href": "js-01-basics.html#the-console",
    "title": "9  JavaScript basics",
    "section": "9.1 The console",
    "text": "9.1 The console\nLet’s log some text to the Console so you can see it work.\n\nIn your HTML file between the script tags, on a line by itself, add this:\n\nconsole.log(\"Let's do math:\");\n\nSave your js-practice.html file.\nGo back to your browser where you should already have the Inspector up and the Console tab chosen.\n\n\n\n\njs-console-log\n\n\nNote we used double-quotes to signify our string. Just so you know, we could use single quotation marks if we are consistent, but then we would’ve needed to escape the single quote in the text as Let\\'s."
  },
  {
    "objectID": "js-01-basics.html#writing-to-the-console",
    "href": "js-01-basics.html#writing-to-the-console",
    "title": "9  JavaScript basics",
    "section": "9.2 Writing to the console",
    "text": "9.2 Writing to the console\n\nUnder your first console.log, use let to create a new variable x and set it to 5. Log x’s value to the console. (We’ll talk about let and what a variable is below.)\n\nlet x = 5;\nconsole.log(x);\n\nSave your html page, then refresh your browser and you should see your console update to include the “5” in the log.\n\nThe browser will act on all our code written in JavaScript, in the order that we write it. You don’t actually see it happen, unless there is some result for you to see. We are using console.log to see that result.\nWe could actually type those commands into the browser Console, but anything we do would not be saved when the browser is refreshed.\n\n9.2.1 var vs. let vs. const\nThink of variables as containers that hold information. Their purpose is to label and store data that can then be used in your program. By providing a variable with a descriptive name, our programs can be understood more clearly by others and our future selves.\nUntil recently, the way to create (or declare) a variable in JavaScript was to use var variableName. In 2015 with the update to ES6, let and const were introduced as better ways of declaring variables. While the old term var still workds, we should use these new terms.\nHere are the very simplified differences between these three ways of declaring a variable:\n\nIf you declare a variable with var, you can re-declare it later and in doing so you will change its value.\nIf you declare a variable with let, you can change its value later, but you can’t re-declare it. If you try, you will get an error. This is usually good, because it tells you the variable was already in use.\nIf you declare a variable with const, you can’t change its value or re-declare it later.\n\nNote that you can also declare a variable without using any of those by just assigning a value to term. x = 5. DON’T DO IT. It is not good practice, as you can overwrite global variables already in play, no matter where it is called. You can read more about calling variables in scope, but I don’t want to get bogged down with it here.\nIn our example above, we used let to declare a variable that we called “x”, and then we assigned that variable to the value “5”.\nWhen we used console.log to print log our variable “x” to the screen, it returned our value: 5."
  },
  {
    "objectID": "js-01-basics.html#lets-do-some-math",
    "href": "js-01-basics.html#lets-do-some-math",
    "title": "9  JavaScript basics",
    "section": "9.3 Let’s do some math",
    "text": "9.3 Let’s do some math\n\nUse let to create a new variable y and set it to 3. Log y’s value to the console.\n\nlet y = 3;\nconsole.log(y);\n\nSave your file and refresh your browser to make sure it worked.\nCreate a new variable z and set it to x multiplied y, using the x and y variables (don’t just use the numbers 3 and 5). Log z’s value to the Console. The character * is our your multiplication tool.\n\nlet z = x * y;\nconsole.log(z);\n\n9.3.1 Math on your own\n\nAdd a JavaScript comment called “Math on my own”.\nRepeat those last steps, but demonstrate addition (+), subtraction (-) and division (/) using new variable names (not z) and values. These are three different new things, each logged to the Console.\nMake sure they worked in your browser.\nCommit your changes to git. (You don’t have to push yet … just add and commit. I want a history.)"
  },
  {
    "objectID": "js-01-basics.html#working-with-strings",
    "href": "js-01-basics.html#working-with-strings",
    "title": "9  JavaScript basics",
    "section": "9.4 Working with strings",
    "text": "9.4 Working with strings\n\nAdd a new console log with the text “Working with strings:”.\nCreate separate variables for your first, middle and last name. Log each of them to the console.\n\n(While any combination of letters could be used to create a variable name, note that convention is to use camelCase if your variable has more than one word, meaning the first letter of the variable name is lowercase, but you would uppercase the first character of other words in the variable name.)\nconsole.log(\"Working with strings:\");\n\nlet firstName = 'Christian';\nlet middleName = 'Clay';\nlet lastName = 'McDonald';\n\nUse string concatenation (+) to join the variables you just created into a new variable called name. Make sure to include spaces in quotation marks between each name part. Log it to the console.\n\nlet name = firstName + \" \" + middleName + \" \" + lastName;\nconsole.log(name)\nOK, we now have created a variable that has your entire name, built from other variables. Holler if you see that it doesn’t work in your browser.\n\n9.4.1 Strings on your own\n\nAdd a JavaScript comment with the text “Strings on my own”.\nCreate a new variable, greeting, and in it, join the string 'My name is' together with name so its new value is My name is YOUR NAME. Log that new value to the console.\nCommit your changes to git so we have a record."
  },
  {
    "objectID": "js-02-functions.html#how-functions-work",
    "href": "js-02-functions.html#how-functions-work",
    "title": "10  JS Functions",
    "section": "10.1 How functions work",
    "text": "10.1 How functions work\nYou can use the same yourname-javascript repo and files for this lesson that that we used for our first JavaScript lesson. We’ll just keep writing in the same file and script tag.\nLet’s write a function that takes a single argument — a number — and squares it, then uses return to give us back the squared number.\n\nAdd a console.log with the text “Using functions:”.\nAdd a comment with the intent of your function // function to make square numbers. You should always comment a function with its purpose so others and your future self will know what it does.\nCreate a new function called makeSquare with one argument called theNumb:\n\nconsole.log(\"Using functions:\");\n\n// function to make square numbers\nfunction makeSquare(theNumb) {\n\n}\nOK, we want our function to do two things:\n\nSquare our passed-in number and store it in a new variable. To square a number, you multiply it times itself.\nReturn the value of the new variable.\n\nSo, inside your function:\n\nCreate a variable (name it what you want) and assign it “theNumb * theNumb”.\nreturn your new variable.\n\nfunction makeSquare(theNumb) {\n  let squared = theNumb * theNumb;\n  return squared;\n}\n\nIn your code, call your function to make sure it works, logging the returned value to the console. For example:\n\n  let try01 = makeSquare(3);\n  console.log(try01);\n\nCall the function two more times with a different value.\n\nBONUS: Update your function to use JavaScript’s Math Object to perform the squaring.\n\n\n\n\n\n\nNote\n\n\n\nIn the code above, the variable that was declared inside the function, squared, cannot be referenced outside the scope of the function. If we try to add console.log(squared) outside the function, we would get an error. You can read more about variables and scope here."
  },
  {
    "objectID": "js-02-functions.html#functions-on-your-own",
    "href": "js-02-functions.html#functions-on-your-own",
    "title": "10  JS Functions",
    "section": "10.2 Functions on your own",
    "text": "10.2 Functions on your own\n\nAdd a comment with the intent of your function // Functions on my own.\nWrite another function (and name it anything you want, but I named mine makeName) that takes three arguments – firstName, middleName and lastName – and uses the + operator to combine the three arguments to form a full name. Make sure you add spaces (’ ’) in between the arguments so the returned value doesn’t look like ChristianClayMcDonald, or whatever.\nIn your code, call the function with three different sets of names to make sure it works and log the returned value to the console each time.\nFor one of those names, I want you to use Robert “Beto” O’Rourke. Note that his name has both a single quote and double quotes, so you will have to escape one or the other depending the quote style you used in your function."
  },
  {
    "objectID": "js-02-functions.html#save-it",
    "href": "js-02-functions.html#save-it",
    "title": "10  JS Functions",
    "section": "10.3 Save it",
    "text": "10.3 Save it\n\nCommit your changes to git. It’s important to add and commit and your changes so I can see your history at this point."
  },
  {
    "objectID": "js-03-flow-control.html#lets-create-a-better-name-function",
    "href": "js-03-flow-control.html#lets-create-a-better-name-function",
    "title": "11  JS Flow control",
    "section": "11.1 Let’s create a better name function",
    "text": "11.1 Let’s create a better name function\nLet’s take our makeName function we made before and make it mo betta.\nAs you recall, our previous function would take three names and put them together and return a full name. What if our user only gave us their middle initial? Then we would have returns like “Arthur C Clarke”.\nHow might we test if the middle name is an initial? And then what might we do if that test is true? If our middle name is only one character, then it would be an initial, right? And if we know it is an initial, then we can add a period to it.\nJavaScript strings have a special property called .length. We’ll learn more about properties (and methods) in our next chapter, but know that we can get the number of characters in a string by appending the .length property, so middleName.length will return the number of characters in middleName.\nWe’ll use this special property to test if our middle name has only one character, and then add a period if it does.\nWe’ll start by building our base function, then we’ll build on it to make it better.\n\nAdd a console.log with the text “Making better name function:”. This is just so we can see where this code starts working on our console.\nMake a new function called makeBetterName that takes three arguments, firstName, middleName and lastName.\nInside that function we create a variable called fullName and take our inputs to make our name.\nReturn fullName out of the function.\n\n// Just a log to show in our Console\nconsole.log(\"Making a better name function:\");\n\n// A better name function to fix middle initials\nfunction makeBetterName(firstName, middleName, lastName) {\n  let fullName = firstName + \" \" + middleName + \" \" + lastName;\n  return fullName;\n}\nSo we’ve made yet another name machine like your last homework. It’s OK if you’ve already used these variable names in your other code because these are only used inside of this function, another example of Scope.\nOK, now we need to use the function so we can see the return. We need test for both true and false conditions, so we really need two tests. This time we’re going to call the makeBetterName function right inside of some console.logs instead of creating variables first.\n\nAfter your function closes (the last }), add these console.log tests:\n\nconsole.log(makeBetterName(\"Joan\", \"Marie\", \"Larkin\"));\nconsole.log(makeBetterName(\"John\", \"F\", \"Kennedy\"));\n\nSave your code and refresh your page so you can see the name. “John F Kennedy” needs the period after the initial, which we’ll tackle with an if statement."
  },
  {
    "objectID": "js-03-flow-control.html#conditional-statements",
    "href": "js-03-flow-control.html#conditional-statements",
    "title": "11  JS Flow control",
    "section": "11.2 Conditional statements",
    "text": "11.2 Conditional statements\nWith JavaScript we can perform tests and make decisions based on the results of the test. There are three types, in order of complexity:\n\nAn if statement allows us to perform an action if the test is true.\nAn else statement allows us to add an action if the test is false.\nAn else if statement allow us to perform a new test if the first if is false.\n\nThere is also switch, but we’re not going to cover that here.\n\n11.2.1 Make middle initial test\nTo figure out if our middleName object is a single letter we can test its .length property. We’ll use an if to do this test. Let’s talk about how those work in JavaScript. Written in one line, the logic works like this:\nif (perform the test) {do this if true}\n\nFor our (perform the test), we want to check if the length of middleName is one character.\nFor our {do this if true} we will just return true;, which will write the word “true” to the Console for how.\n\n\nUpdate your makeBetterName function to add the if statement below to your function and include the return false; after the if statement.\n\n// Make a name with middle initial\nfunction makeBetterName(firstName, middleName, lastName) {\n  if (middleName.length === 1) {\n    return true;\n  }\n  let fullName = firstName + \" \" + middleName + \" \" + lastName;\n  return fullName;\n}\nNote the test here: middleName.length === 1). We checking the length of middleName and testing if the value is “1”, which would indicate a middle initial. Note that we use three equal signs === to test for truthiness.\n\nSave your files and test in your browser to make sure you are getting Joan’s name or a true value for John’s “F”.\n\n\n\n11.2.2 Add period if true\nNow let’s update our true statement to fix our middle name. Here is conceptually what we need to do: If our middleNameis one character, then add a period to the end.\nIf your middleName is one character we can use string concatenation reset the middleName to itself plus the period. Because middleName is an argument for our function, it is already instantiated as a variable, and it is only available inside this function. So, we can just modify it and then return the value out of the function.\n\nIn the if part of the function, replace the return true with a line that modifies the middleName variable to add the period. Code is shown below.\nUpdate the return statement to return middleName.\nSave and refresh your browser to check it. You should be getting back the middle initial and period if true, and “false” if false.\n\n// Make a name with middle initial\nfunction makeBetterName(firstName, middleName, lastName) {\n  if (middleName.length === 1) {\n    // adding and updating here\n    middleName = middleName + \".\";\n  }\n  let fullName = firstName + \" \" + middleName + \" \" + lastName;\n  return fullName;\n}\n\nAdd another console.log with another name that uses a middle initial and make sure that works, too."
  },
  {
    "objectID": "js-03-flow-control.html#using-else-and-if-else",
    "href": "js-03-flow-control.html#using-else-and-if-else",
    "title": "11  JS Flow control",
    "section": "11.3 Using else and if else",
    "text": "11.3 Using else and if else\nUsing a single if conditional is pretty straight-forward, but what if you want to perform a different action if the test fails? That’s what we’ll tackle next.\nI’m going to give you a function that tests which of two scores is higher and returns text with the answer. It has both an if and an else. I’ll explain it, then give you a challenge to improve it.\n\nAdd this code to your script tag, save and refresh your browser to see the console results.\n\n  console.log(\"scoreCompare function\");\n  function scoreCompare(home, away) {\n    if (home &gt; away) {\n      return \"Home team wins!\";\n    } else {\n      return \"Away team wins :(\"\n    }\n  }\n  console.log(scoreCompare(5,3));\n  console.log(scoreCompare(3,5));\nLet’s walk through this line by line:\n\nThe first line is just a console log so you can see it in your browser.\nThe next line sets up the function called scoreCompare and it takes two arguments: home and away.\nThe if statement compares the home and away values, and if the home value is higher it returns the text “Home team wins!?\nIf the if statement is false, then the else kicks in and the function returns the text “Away team wins :(”.\nThe two console logs at the bottom call the function with differing values.\n\nThat is all well and good if the game doesn’t end in a tie, but I’m a soccer fan and games often end in a tie. So here is your charge:\n\nReview the W3Schools tutorial on if, else and else if or any other source you like and improve the function above to handle ties. Make it print “It was a tie” if the home and away scores are the same. Your big hint here is you have to do two tests, so you need to add an else if to the function.\nMake sure you add a new console log with the same home/away values to test your work."
  },
  {
    "objectID": "js-03-flow-control.html#commit-your-work",
    "href": "js-03-flow-control.html#commit-your-work",
    "title": "11  JS Flow control",
    "section": "11.4 Commit your work",
    "text": "11.4 Commit your work\nSave and commit your work to git. You might go ahead and push to Github, as well, so you have a cloud record."
  },
  {
    "objectID": "js-04-objects.html#html-elements-are-javascript-objects",
    "href": "js-04-objects.html#html-elements-are-javascript-objects",
    "title": "12  JS Objects",
    "section": "12.1 HTML elements are JavaScript Objects",
    "text": "12.1 HTML elements are JavaScript Objects\nThanks to something called the Document Object Model (or DOM, for short) JavaScript considers every HTML element on a web page a JavaScript Object and it has some baked-in properties and methods. (The properties and methods vary based on object type: string vs number vs date, etc.) This means we can access the properties of each HTML element and we can act on them through methods.\nWe’ll use these baked-in properties and methods in our next lesson.\nWe’ll use a method to find specific objects on the page to discover it’s properties. We’ll then make decisions based on those properties and then use another method to change that HTML object."
  },
  {
    "objectID": "js-05-html.html#the-document-object-model",
    "href": "js-05-html.html#the-document-object-model",
    "title": "13  JS with html",
    "section": "13.1 The Document Object Model",
    "text": "13.1 The Document Object Model\nJavaScript is aware of all the HTML on your web page, and each element becomes a JavaScript object. This concept, called the Document Object Model — or DOM, for short — is a standard for how to get, change, add, or delete HTML elements using JavaScript.\nThe DOM allows us to connect our JavaScript functions to HTML or CSS on the page."
  },
  {
    "objectID": "js-05-html.html#our-goal",
    "href": "js-05-html.html#our-goal",
    "title": "13  JS with html",
    "section": "13.2 Our goal",
    "text": "13.2 Our goal\nWe will create an HTML form that allows a user to enter their first, middle and last name, and when they press a button it will display the full name elsewhere on the webpage. An overview of steps:\n\nCreate a new html page.\nIntroduce form elements through text boxes and a button.\nCopy our makeBetterName function from our previous exercise.\nModify that function to use elements from the form and update HTML on the page.\nConnect the form button to the makeBetterName function.\n\nIt will end up working like this:\n\n\n\nOur js-form\n\n\nNow let’s get down to the detail."
  },
  {
    "objectID": "js-05-html.html#create-our-page",
    "href": "js-05-html.html#create-our-page",
    "title": "13  JS with html",
    "section": "13.3 Create our page",
    "text": "13.3 Create our page\n\nInside the same yourname-javascript repo we have been working in, create a new file called form.html and open it in VS Code.\nEnter the HTML5 boilerplate code. Remember that you can use Emmet to create this by typing html and then use the dropdown to choose html:5. Don’t capitalize html.\nIn between the\n\ntags of the document, add the following HTML code. I’ll explain afterward:\n\n&lt;form id=\"nameForm\"&gt;\n  &lt;p&gt;First name: &lt;input type=\"text\" name=\"first\" value=\"Aragorn\"&gt;&lt;/p&gt;\n  &lt;p&gt;Middle name: &lt;input type=\"text\" name=\"middle\" value=\"Elessar\"&gt;&lt;/p&gt;\n  &lt;p&gt;Last name: &lt;input type=\"text\" name=\"last\" value=\"Telcontar\"&gt;&lt;/p&gt;\n  &lt;input type=\"button\" value=\"Make name\"&gt;\n&lt;/form&gt; \n\n&lt;h3 id=\"nameHead\"&gt;Name will go here&lt;/h3&gt;\n\nSave your file and use Go Live to start a live server.\n\nWe’ve introduced several new HTML elements here that we haven’t used before.\n\nForms provide a way for HTML pages to collect user input. We’ve given our form and id of nameForm so we can target it with JavaScript later.\nInput elements define how we can provide the input. We have three inputs with type=\"text\", which gives us a text box. We have given each a name attribute, which we can access as a “property” of the form element with JavaScript. We also defined a default value to display text until we type something else in.\nLastly, we have a type=\"button\" input, which we will use to fire our JavaScript function. (If you click on the button now, it doesn’t do anything. Yet.)"
  },
  {
    "objectID": "js-05-html.html#copy-our-function",
    "href": "js-05-html.html#copy-our-function",
    "title": "13  JS with html",
    "section": "13.4 Copy our function",
    "text": "13.4 Copy our function\n\nCopy the &lt;script&gt; tag below and place it between our form element and the closing &lt;/body&gt; tag on the page.\n\nHere is the code:\n&lt;script&gt;\nfunction makeBetterName(fName, mName, lName) {\n  if (mName.length === 1) {\n    mName = mName + \".\";\n  }\n  let fullName = fName + \" \" + mName + \" \" + lName;\n  return fullName;\n}\n&lt;/script&gt;\nThis is a copy of our makeBetterName function from the last exercise. We’ll now refactor it to meet our needs here."
  },
  {
    "objectID": "js-05-html.html#modify-our-function",
    "href": "js-05-html.html#modify-our-function",
    "title": "13  JS with html",
    "section": "13.5 Modify our function",
    "text": "13.5 Modify our function\nThere are couple of logic changes we need to make to our function to work with our form.\n\nInstead of us sending name values into the function with console.log, we need the function to grab the values from our text inputs in the form.\nInstead of returning our fullName value to the console.log, we want to replace the text in our &lt;h3&gt; tag so we can see it happen on the page.\n\n\n13.5.1 getElementById\nUsing the Document Object Model, we can find any named element on our HTML page. Once we “have” that object, we can find its various properties, like how long it is, or the contents of the tag, etc.\nThe easiest way to do this is with document.getElementByID(\"id_name_here\"). Once we “have” the element, we can access its properties and methods. Using this, we can “get” the contents of the forms and put them into variables in our function.\n\n\nIn our makeBetterName() function, remove the three arguments inside the parenthesis.\nAdd the following three lines inside the function before the IF in your makeBetterName function:\n\nlet fName = document.getElementById(\"nameForm\").first.value;\nlet mName = document.getElementById(\"nameForm\").middle.value;\nlet lName = document.getElementById(\"nameForm\").last.value;\nWhat we are doing here is instead of feeding our names into the function through arguments, we are using document.getElementByID to find and get the “nameForm” element, and then we are accessing each input by its “name” property (i.e. .first). The property .value gives us the text of that is inside that input.\n\nNow, after the function, add a console.log that calls the function, but don’t feed it names like we did before:\n\nconsole.log(makeBetterName());\nYou should be able to save your file, refresh your browser and see King Aragorn’s name in the Console.\nOK, we’ve solved our first challenge of pulling the names from our fields. Now let’s update our &lt;h3 id=\"nameHead\"&gt; from our function.\n\n\n13.5.2 innerHTML\nWe can not only pluck the value of a field with getElementByID, but we can also change existing text by using the .innerHTML property.\n\nIn our function, replace the line return fullName; with this:\n\ndocument.getElementById(\"nameHead\").innerHTML = fullName;\n\nSave your file and refresh yor page, and now the &lt;h3&gt; tag (which has id=\"nameHead\") that used to say “Name will go here” should now have our default form text: “Aragorn Elessar Telcontar”.\n\nThis new line of code uses the same DOM method getElementByID to identify the HTML element we wanted, but this time we used the .innterHMTL property to shove content into it. What content was that? It’s the contents of the fullName which now comes from our text boxes on the page.\n\n\n13.5.3 Hooking up the button\nOur function is working like we want, but it’s being called each time we refresh the page, and not when we click the button, so let’s fix that. We do so by removing our console.log, and then adding an “onclick” attribute to our button.\n\nRemove the console.log(makeBetterName()) line that we added earlier to test the function.\nIn form in the HTML body, update the input button to the following:\n\n&lt;input type=\"button\" value=\"Make name\" onclick=\"makeBetterName()\"&gt;\nWhat we’ve done here is used the onclick Event to add interactivity to our button. Until now it was just an element on the page that didn’t do anything, but now when we click on the button it fires the makeBetterName function, which uses our “name machine” to insert our text inside the &lt;h3&gt; we’ve specified through its id.\n\nSave your file and refresh the page.\nClick the “Make name” button and it should update the &lt;h3&gt; tag.\nPut your own names into the text boxes and hit the button and it should change the headline.\nMake sure it still works with a middle initial."
  },
  {
    "objectID": "js-05-html.html#commit-your-change-to-github",
    "href": "js-05-html.html#commit-your-change-to-github",
    "title": "13  JS with html",
    "section": "13.6 Commit your change to Github",
    "text": "13.6 Commit your change to Github\nMake sure you save and commit your changes to git."
  },
  {
    "objectID": "js-06-datatables.html",
    "href": "js-06-datatables.html",
    "title": "14  JS jQuery/Datatables",
    "section": "",
    "text": "15 Using DataTables\nFor this lesson, you’re going to use the DataTables jQuery plug-in to take an HTML table and make it interactive. The HTML page below has a table on it that you can use as a starting point.\njQuery is a framework that makes it easier to use JavaScript. It’s particularly useful for simply traversing the DOM in an HTML page. Because of this, there are a number of tools and plug-ins written in jQuery.\nThe purpose of this exercise is to show that you can use many of the tools quickly with just a little JavaScript knowledge."
  },
  {
    "objectID": "js-06-datatables.html#lets-talk-about-tables",
    "href": "js-06-datatables.html#lets-talk-about-tables",
    "title": "14  JS jQuery/Datatables",
    "section": "15.1 Let’s talk about tables",
    "text": "15.1 Let’s talk about tables\nBefore we jump into this, take some time to look at HTML Tables tutorial to learn about the HTML tags that make a table. Like other elements we have dealt with there is an HTML structure that is the skeleton of the table, and then the display of that element can be enhanced using CSS.\nTables are great for displaying tabular data (hence the word table). But often those tables can get really long, and we can help make them more useful to readers by adding JavaScript to make them sortable and filterable, sort of like a spreadsheet."
  },
  {
    "objectID": "js-06-datatables.html#goals-of-this-lesson",
    "href": "js-06-datatables.html#goals-of-this-lesson",
    "title": "14  JS jQuery/Datatables",
    "section": "15.2 Goals of this lesson",
    "text": "15.2 Goals of this lesson\n\nAdd the required DataTables files to an HTML page (there’s a CSS file and a JavaScript file, which we’ll handle in the first problem below.)\nCall DataTables on your table using the example JavaScript provided on the DataTables website.\n\nIt will look similar to this:\n\n\n\nDatatable example"
  },
  {
    "objectID": "js-06-datatables.html#the-steps",
    "href": "js-06-datatables.html#the-steps",
    "title": "14  JS jQuery/Datatables",
    "section": "15.3 The steps",
    "text": "15.3 The steps\nThe steps below will walk you through using the DataTables plug-in to make an interactive table. If at any point you get an error in your Console, stop before moving on to the next step. Each step is dependent on the step before.\n\n15.3.1 v1: “Zero configuration”\n\nCreate a new file in your javascript-practice project folder called datatable.html and add the basic HTML5 boilerplate using Emmet.\nGo to the DataTables home page and click the link for “Examples”.\nOn the Examples page, choose the “Zero configuration” example under “Basic initialisation”.\nOn the page with the example you’ll see tabs below the table for “JavaScript”, “HTML” and “CSS” with the code you need. However, there are some assumptions in the instructions, so listen up:\n\nStart with the HTML tab and copy the code in the box. Take the contents of that box and put it in your datatable.html HTML page between the &lt;body&gt; tags. Save the file and go look at your page in a browser, so you will see how it changes.\nGo back to the JavaScript tab on the DataTables site. The contents of that box should go inside a &lt;script&gt;&lt;/script&gt; tag at the bottom of your datatable.html HTML page before the close of the &lt;/body&gt; tag.\n\n\nThe parts of this exercise to add the Datatables JavaScript and CSS files assumes some knowledge and is not explained well in the directions. Do this instead:\n\nCopy the three links below and add them to the bottom of your &lt;head&gt; tag just before the closing &lt;/head&gt;.\n\n&lt;script src=\"https://code.jquery.com/jquery-3.7.0.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css\"&gt;\n\nSave your page and look at it in your browser. You should have a working table.\n\n\n\n15.3.2 Recap of how this works\n\nIn our &lt;head&gt; tag we have links to the JQuery JavaScript plugin, the Datatables-specific Javascript files and the Datatables CSS to make it look pretty.\nIn the &lt;body&gt; tag you have your HTML table.\nAt the bottom you have a &lt;script&gt; tag that tells the page to apply the Datatables javascript to our specific table (based on the id of the table.)\n\n\n\n15.3.3 v2: “Scroll Vertical”\n\nCreate a copy of the HTML file you created above and call it scrolling.html.\nGo to the “Scroll Vertical” example. Replace your JavaScript in your\n\ntags in the new HTML file you just created (scrolling.html) with the JavaScript on the “Scroll Vertical” example page.\nYou should now have a table that isn’t paginated and instead can be scrolled through, just like the example on the DataTables website."
  },
  {
    "objectID": "js-06-datatables.html#commit-to-github-and-turn-in",
    "href": "js-06-datatables.html#commit-to-github-and-turn-in",
    "title": "14  JS jQuery/Datatables",
    "section": "15.4 Commit to Github and turn in",
    "text": "15.4 Commit to Github and turn in\nThat is our last JavaScript lesson!\n\nCommit the new files to your repository and push everything to Github.\nPost the link to your repository to the Canvas assignment."
  },
  {
    "objectID": "setup-02-node.html",
    "href": "setup-02-node.html",
    "title": "Setup: Part 2",
    "section": "",
    "text": "Before we can move on to the rest of the book, we need to do some more computer setup. This is handled in separate documentation.\nGo to ICJ Setting Up: Part 2 do those installations and then return here to the next chapter."
  },
  {
    "objectID": "sass-00-intro.html",
    "href": "sass-00-intro.html",
    "title": "Sass",
    "section": "",
    "text": "Sass and SCSS\nSass (or Syntactically Awesome Style Sheets) is system that makes writing CSS more efficient. SCSS (Sassy CSS) is the syntax we use, and it has to be processed (or “compiled” in tech speak) into regular CSS before the browser can understand it. Think of it as a translation service. In our case we are using Gulp and some other npm tasks to do that translation, hence all the need for the development environment.\nSome of the benefits/features of Sass/SCSS are:\nThe Bootstrap framework that we will use later in this class takes advantage of all of these features. Sass is a required part of Bootstrap.\n^ There are two different ways to write Sass, but we will use the SCSS version."
  },
  {
    "objectID": "sass-00-intro.html#goals-of-this-section",
    "href": "sass-00-intro.html#goals-of-this-section",
    "title": "Sass",
    "section": "Goals of this section",
    "text": "Goals of this section\n\nTo learn about the Node.js-based development environments.\nTo set up a project based on a template repo saved in Github.\nTo learn about Sass/SCSS and to practice writing it."
  },
  {
    "objectID": "sass-00-intro.html#node",
    "href": "sass-00-intro.html#node",
    "title": "Sass",
    "section": "Node",
    "text": "Node\nNode.js is an open-source server environment built using JavaScript. Many programmers like it because it allows them to write JavaScript not just for “front-end” browser tasks, but also for server-based or “back-end” tasks.\nFor our purposes, consider Node as a development environment and ecosystem that allows us to use code written by other people so we don’t have to write it ourselves. Developers will create mini-programs — known as packages — and share them through Node Package Manager, or npm for short. Think of npm as the App Store for Node.js. When we need to do something like convert a Google Spreadsheet into data usable in our project, we don’t have to write the code ourselves because someone else has already done so and published it to the npm “app store”.\nWe will need a number of these apps to convert our fancy Sass SCSS into vanilla CSS that our browser will understand."
  },
  {
    "objectID": "sass-00-intro.html#sass-features",
    "href": "sass-00-intro.html#sass-features",
    "title": "Sass",
    "section": "Sass features",
    "text": "Sass features\nThe Sass guide walks through the above features with code examples. You should look through it."
  },
  {
    "objectID": "sass-01-project.html#the-structure-of-the-project",
    "href": "sass-01-project.html#the-structure-of-the-project",
    "title": "15  Projects from degit",
    "section": "15.1 The structure of the project",
    "text": "15.1 The structure of the project\nThe template you pulled already as the Node.js development environment defined with a specific (and common) folder structure.\nLet’s talk about how the folder system is structured:\n\n15.1.1 src\nYou will only work with the files in the src folder. There are a series of “tasks” in the development system that will process and move files to the docs folder, which is our “publishable” website.\nsrc\n├── img (files will get moved to `docs/img`.)\n│   ├── harvey-dale.jpg\n├── scss (files here get complied into `docs/css`.)\n│   ├── new-styles.css\n│   ├── old-styles.css\n│   ├── reset.css\n├── index.html\n├── shows.html\n\n\n15.1.2 docs\nThe docs folder is our publishing folder, where our website lives. These are the files that will be published to the web as a working website. Everything outside the docs folder just supports the creation of the files inside docs. DON’T EDIT ANY FILES IN THE docs FOLDER. If you do, the changes will just be overwritten.\n\n\n\n\n\n\nNote\n\n\n\nWe use the docs folder for our publishable code to take advantage of a special feature in Github that will give us free publishing to the Internet. Other common folder names for publishing you might come across are dist and public.\n\n\ndocs (don't edit anything in here)\n├── css\n│   ├── (files from `src/scss` end up here)\n├── img\n│   ├── (files from `src/img` end up here)\n├── index.html\n├── shows.html"
  },
  {
    "objectID": "sass-01-project.html#how-development-environment-works",
    "href": "sass-01-project.html#how-development-environment-works",
    "title": "15  Projects from degit",
    "section": "15.2 How development environment works",
    "text": "15.2 How development environment works\nThis setup of having a src folder is pretty common in development. We work with the files in the src directory as there are background processes that run on those files, do cool stuff, and then compile the result into our publishing directory, in our case docs/.\nThe docs folder ends up being the “root” or base level of our site. All other files in the project need to need to be referenced relative to where they end up inside docs.\n\nAny .html file in src/ gets moved to a similar place in docs/.\nSass files in the src/scss/ folder get compiled/rewritten into the docs/css/ folder. There are two important implications of this:\n\nWhile the file name you edit ends in .scss, the compiled file in docs/css/ a .css extension.\nThis means your HTML files that end up at the root of docs will need to link to a compiled css file of the same name, but inside the css folder and with a .css extension, like href=\"css/filename.css\".\n\nFiles in the src/img/ folder are moved into docs/img/. Since your index.html file ends up in docs, then your img link needs to be img src=\"img/filename.jpg\".\n\n\n15.2.1 Configurations files\nThe remaining files and folders in the root folder are part of the development ecosystem. We don’t mess with this files much in our lessons, but here is a description of what they do:\n\n.gitignore tells Git which files to ignore sending to Github.\nREADME.md describes what the repo is about. It has our installation instructions.\n.gulpfile.js is the file that controls our task manager. This is where we tell the Gulp program where to find our Sass SCSS files and then where to place the compiled new CSS files. We won’t edit this file, but know it is necessary.\nThe files inside tasks are the workhorse of Gulp. Like the gulpfile, we won’t get into how they work. Just know this is the guts of the development ecosystem.\npackage.json is the file that tells the Node.js ecosystem which packages to download from npm. It is pre-configured for you.\npackage-lock.json is created by the npm install command based on the package.json file. It contains a bunch of details about dependencies that we don’t need to worry much about. Again, it is created by npm.\nA node_modules folder is generated from package.json when you run $ npm install. It will contain all the mini-programs, and it SHOULD NOT be pushed to Github ’cause it is huge. It’s been excluded in the .gitignore file."
  },
  {
    "objectID": "sass-02-refactor.html#overview-and-goals-for-this-lesson",
    "href": "sass-02-refactor.html#overview-and-goals-for-this-lesson",
    "title": "16  Refactoring our Sass",
    "section": "16.1 Overview and goals for this lesson",
    "text": "16.1 Overview and goals for this lesson\nWe are starting with a project template that is a two-page website for a band. It has been coded rather simply with regular, vanilla CSS. It works just fine, but as sites grow with more code, having “Sassy CSS” helps with maintainability. So, our goals for this project assignment are to:\n\nUnderstand how to manage a Node-based project:\n\nWhere different types of source files are stored/edited and where the processed files are sent.\n\nLearn how Sass works by refactoring the project to use SCSS. As part of this we will:\n\nImprove readability of our styles through nesting.\nUse variables for increase flexibility of our styles.\nRewrite style rules for efficiency and reusability.\n\nWe’ll write new style rules in the Sassy way.\n\nIf you don’t already have your project open in VS Code, go ahead and open it. Run $ gulp dev in your terminal to start the development environment.\nWhen the browser starts up, you’ll have a working multi-page website that uses traditional CSS. We are going to improve this code – or “refactor” it, as developers call it. It is a very common practice to go through old code and make it mo betta."
  },
  {
    "objectID": "sass-02-refactor.html#css-is-scss",
    "href": "sass-02-refactor.html#css-is-scss",
    "title": "16  Refactoring our Sass",
    "section": "16.2 CSS is SCSS",
    "text": "16.2 CSS is SCSS\nThis first thing to know is any valid CSS is also valid SCSS. As such, we’ll use our traditional CSS to seed our new SCSS setup.\n\nCopy the contents of src/scss/old-styles.css and paste it into src/scss/new-styles.scss. Once you do, you might see your terminal kick off the sass task to compile the file.\nNow, in both our html files – src/html/index.html and src/html/shows.html – you’ll see a style &lt;link&gt; tag that references the old-styles.css file. Change that to point to the css/new-styles.css. Once you save, you’ll again see your browser refresh, but you should not see any difference in the page because our new SCSS is the same as the old, for now. Make sure you change both the index and shows files.\n\nYou might have noticed another style link going to a reset css file. We’ll deal with that in a minute."
  },
  {
    "objectID": "sass-02-refactor.html#variables",
    "href": "sass-02-refactor.html#variables",
    "title": "16  Refactoring our Sass",
    "section": "16.3 Variables",
    "text": "16.3 Variables\nOne of the most useful features of Sass is to define variables for certain CSS values. Once you start using the Sass variables in your code, you can then change the definition of the variable in one place instead of many throughout the code base. This makes it easy to support or change themes and make wholesale changes throughout your website.\nYou create variable names with a preceding dollar sign and then define its value like a CSS rule. When you want to use that variable’s value, use that variable name (with the $) as the CSS rule. As a matter of convention, we set all the variables at the top of our CSS files so they can be found easily.\nHere is an example:\n// set the variable\n$dark-border: 3px solid black;\n\n// use the variable\n.bigbox {\n  border: $dark-border;\n}\n\nblockquote {\n  // using the variable again\n  border-left: $dark-border;\n  padding-left: 20px;\n}\nNow, if we wanted to change our dark borders from 3px black lines to 5px grey lines, we would do it ONCE when we set the $dark-border variable at the top of the file, and it would change the value throughout the site.\n\n16.3.1 Variables exercise\nThere are two colors defined in our styles for our Harvey Dale and the Cements band website. Let’s Sassify them.\n\nCreate two new variables at the top of your src/scss/new-styles.scss file called $primary-color and $secondary-color and define their values from what is currently in the CSS.\nIn your CSS rules, replace the color values with the new variable names.\nSave and check your page. There should be no difference.\nChange your $primary-color variable value to a new color, like “red”, and see if what happens.\n\nYou should see your background color change on both the “home” page and the “shows” page. Be sure to check both of them.\n\n16.3.1.1 Troubleshooting\nIf you don’t see a change, there are a couple of things to check:\n\nMake sure that your gulp dev task is running in your Terminal so your Sass is getting compiled. If that is crashed with an error, you might try to Control-c in your Terminal to clear it.\n\nYou can try gulp dev again, but you probably have to fix the error first. Read the error output for clues and line number references. Also look in your VS Code new-styles.css files for red error indicators that say something is wrong codes.\n\nIf Sass is still compiling but you still don’t see a change, make sure your index.html and shows.html files are pointing to the correct new-styles.css file and that those pages have been saved.\nUnlikelyy to help, bu you can try holding down your Shift key while also refreshing your browser to clear the browser cache for that page."
  },
  {
    "objectID": "sass-02-refactor.html#nesting",
    "href": "sass-02-refactor.html#nesting",
    "title": "16  Refactoring our Sass",
    "section": "16.4 Nesting",
    "text": "16.4 Nesting\nHTML code often has a clearly-nested hierarchy, where items like headlines are a child of the parent div they are inside.\nCSS doesn’t have the same hierarchy. If we want to target a style to an &lt;h3&gt; that is inside of a &lt;div&gt; with a specific id, we have to specify both the div id and the headline in our rule. Perhaps not a big deal for one headline, but wasteful when you want to target a bunch of different items inside that div.\nSass allows us to write this as a visual hierarchy that is both easier to understand and often (but not always) in fewer lines of code.\nWhile this is useful, we do need to be careful not to nest too much (three levels?) or our CSS will end up over-qualified and bloated. In addition, we don’t want to completely mimic our html hierarchy because then small changes in the HTML might break our styles.\nHere is an example of traditional CSS where the styles for the ul and li tags will only be applied if they are inside a &lt;nav&gt; element.\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nnav li {\n  display: inline-block;\n}\nHere is an example of how you would write this in SCSS using hierarchy:\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n  li {\n    display: inline-block;\n  }\n}\nWritten in our Sassy way, we can immediately understand that the ul and li rules apply only to the nav element. It’s easier to understand and maintain.\n\n16.4.1 Nesting exercise\nOpen your index.html file and look at the structure of our HTML. We can see there is a &lt;div class=\"container\"&gt; that is the parent to all of what is contained in the body. There are two other div elements, &lt;div class=\"nav\"&gt; and &lt;div class=\"content\"&gt; that are nested inside the container.\nIf you look through the CSS you copied into new-styles.scss, you’ll see there are a number of rules that include the .content class. This is an opportunity to nest this series of rules. Let’s refactor our SCSS to reflect this nesting so it is more understandable.\nWe’ll combine the first two, and then you can do the rest on your own. We are starting with this:\n.content {\n  width: 85%;\n  min-height: 750px;\n  min-width: 600px;\n  background-color: $primary-color;\n}\n\n.content ul {\n  padding-left: 30px;\n}\nWe want to the .content ul rule to be nested inside the .content rule above it, after the rules that are already there. When we do that refactor, we need to remove what would be an extra .content selector before the ul.\n\nEdit your .scss file to nest .content ul inside the .content rule. It should look like this, including indentation:\n\n.content {\n  width: 85%;\n  min-height: 750px;\n  min-width: 600px;\n  background-color: $primary-color;\n\n  ul {\n    padding-left: 30px;\n  }\n}\n\n\n16.4.2 On your own\n\nAfter you making the change above, make sure the styles are still building correctly and nothing broke on your page.\nRefactor the rest of the .content rules to fit like we did the one above.\nAgain, make sure nothing is broken on the page display.\n\n\n\n16.4.3 Any children rule\nLet’s pause and reflect. Do you notice any value that repeats itself over and over again inside of .content? If you look closely you will see that padding-left: 30px is an attribute of every direct child of .content. In some cases it is the only rule for that style.\nThis rule was added so that all the items inside &lt;div class=\"content\"&gt; would have some space between the nav block and the content. It’s not a particularly great way to handle this as you have to create a new rule for every possible element you might add into the content div on your page.\nThere’s a shorthand CSS selector for applying a property to all “child” elements, the &gt; * {rule;}. Using this, we can set the padding rule to be applied to anything inside the .content div. Let’s use this to set padding and clean up all the extra rules that do the same thing.\n\nInside the .content rule, before the other nested rules, add this one. Make sure it is indented properly like other nested rules:\n &gt; * {\n   padding-left: 30px;\n }\nNow that you’ve done this you can remove all the other padding-left: 30px; everywhere else. In some cases, you no longer even need the style at all for that element because the padding was the only rule."
  },
  {
    "objectID": "sass-02-refactor.html#partials",
    "href": "sass-02-refactor.html#partials",
    "title": "16  Refactoring our Sass",
    "section": "16.5 Partials",
    "text": "16.5 Partials\nYou may have noticed when we started this project that there was a separate reset.css file like we had in our CSS lesson, and that both are included in the &lt;head&gt; of our HTML files. It’s generally poor practice to make multiple links to multiple files if you can avoid it. It takes time (though milliseconds) each time you have to retrieve a new file from a server. It’s best to bundle all your CSS together in one file to the browser doesn’t have to make multiple trips.\nThat’s great, but that can make for some really long CSS files that are hard to manage. Sass allows for a concept called partials that allow us to break out SCSS files into smaller chunks to we can better organize it. Many developers will break up their code based on the part of the page or the function the code supports.\nSass partial filenames should start with an underscore, like _nav.scss, so Sass can know that it will be “used” and not create a new compiled .css file.\n\n16.5.1 Making the reset a partial\nTogether, we’ll modify the reset.css file and make it into a Sass partial.\nWe first need to change the name of the file so it starts with an underscore _ and ends in .scss so Sass can deal with it properly.\n\nIn your Explorer list find the file reset.css file (it’s in src/scss/) and rename it to _reset.scss.\nGo into the new-styles.scss file and at the top of the file but below your color variables, add the following:\n@import 'reset';\nNote that you don’t need to include the underscore or the file extension to the import call, as Sass will understand that automatically. (Though I don’t think it would break if you had them.)\nNow go into both index.html and shows.html and remove the line of code that links to the old reset file.\nMake sure that your Gulp process is still working and your page is still working OK.\n\n\n\n16.5.2 Partials practice\nOK, so that you’ve seen how that works, I want you to create three new partials to divide your scss files: base, nav and content.\n\nInside the /src/scss folder, create a three new files:\n\n_base.scss\n_nav.scss\n_content.scss\n\nWe’ll leave our variables in new-styles.scss, so they continue to apply to all the other code that follows.\nGo into new-styles.scss and copy/cut all the lines generic rules that apply to the whole site … i.e. those not in the .nav and .content. Add those lines to _base.scss.\nGo into new-styles.scss and copy/cut all the lines for the .nav calls and add them to _nav.scss.\nDo the same for all the .content calls into the _content.scss file.\nLastly, after your variable rules, add @import calls into new-styles.scss for our new partials AFTER the import for reset.\n@import 'base';\n\nRemember that you don’t need to add the underscore or the .scss with these import designations, as Sass assumes them already.\nMake sure these @imports come AFTER your variables, because this CSS still cascades, and the variables are used by the imports."
  },
  {
    "objectID": "sass-02-refactor.html#style-writing-practice",
    "href": "sass-02-refactor.html#style-writing-practice",
    "title": "16  Refactoring our Sass",
    "section": "16.6 Style-writing practice",
    "text": "16.6 Style-writing practice\nNow I’d like you to write some new SCSS to modify and/or fix a couple of things in our project.\n\n\n\n\n\n\nTip\n\n\n\nI find that sometimes when I make style changes, especially to font sizes, they are not reflected when the page refreshes because the browser has “cached” the style file. Before driving yourself too crazy if a change isn’t happening, try holding down the shift key and refresh your browser. This forces the browser to reload linked files instead of caching them.\n\n\n\n16.6.1 Text sizes\n\nIncrease the size of all paragraphs and lists that are in the content div without affecting the size of items in the nav div. (Headlines should remain larger than 1rem.)\nAlso set a line-height rule within those same paragraphs to give some space between lines of text.\n\n\n\n16.6.2 Nav link updates\nAdd styles that will give navigation links the primary color and behave like those in the body, where the underline only shows on hover.\n\n\n\nHover lines in navigation\n\n\nSelecting these are a bit tricky. link, hover, visited are all separate properties and each one needs to be specified individually with a text-decoration property, like this:\na:hover {\n  text-decoration: underline;\n}\nYou’ll want to set these styles in the _nav.scss file.\n\nSet both the link and visited values to have the primary color, and the text-decoration to none.\nSet hover color to the primary color, and text-decoration to underline.\n\nRemember, you want these styles to only apply in the navigation.\n\n\n16.6.3 Content link colors\nFor the content, I want hrefs to have the underline, and that the color of the links be something other than the browser default blue/purple color. Choose a color that makes sense given the primary color you use (which might be your secondary color).\n\n\n16.6.4 Set bullet style for shows\nThe list of shows on the shows.html is hard to read. Make some changes to make it look better:\n\n\n\nGood bullet list\n\n\n\nMake the list of shows a bulleted list. (Style of your choice.)\nMake sure the bullets line up vertically with the video on the page.\n\n\n\n\n\n\n\nWarning\n\n\n\nMake sure you don’t add bullets to the list items in the nav."
  },
  {
    "objectID": "sass-02-refactor.html#file-names-and-paths",
    "href": "sass-02-refactor.html#file-names-and-paths",
    "title": "16  Refactoring our Sass",
    "section": "16.7 File names and paths",
    "text": "16.7 File names and paths\nThis is the first project where we have had multiple pages, so let’s talk a bit about file names and paths between files.\nYou might have noticed that when we ran gulp dev and our browser launched it displayed the page called index.html. That is a special file name in the web world … it is the HTML page that will display from a directory if no other path is specified. So, anytime you go to a website that where the url ends at the domain or a /, like statesman.com/, then what you are seeing is the index.html page. (OK, it can be more complicated than that, but generally true.)\nSo, the index is the “home page” of a directory.\nTake a look at the docs folder in your VS Code Explorer.\n\n\n\nDocs folder structure\n\n\nIt is this folder where all our processed pages are sent to … it is our “real” website, even though we edit from the src folder. It is the “root” of our site and where our index.html page lives. Everything else is relative to that folder. When we launch our environment, it goes to http://localhost:3000/ but it displays the index.html page. Once you click through to the shows.html page, it url changes to http://localhost:3000/shows.html. If you click on the Home link it takes you to http://localhost:3000/index.html, which is the same exact page as http://localhost:3000/.\nIf you look inside index.html in the nav element you’ll see this:\n  &lt;li&gt;&lt;a href=\"shows.html\"&gt;Shows&lt;/a&gt;&lt;/li&gt;\nThis link is going to the shows.html page, which is right next to index.html. There are no folders or anything that the path has to traverse … it just names the file because they are adjacent to each other in the file structure.\nBut look a little further into the page and you’ll see this:\n  &lt;img src=\"img/harvey-dale.jpg\"/&gt;\nIf you look at our docs folder structure above, you’ll see that the harvey-dale.jpg photo is inside a folder called img. Because of this our src= path has to include that folder name in the path. This path is relative to where the index.html page lives.\nWe have img/ and css/ folders. The folders are there just for organization … those files could technically live anywhere within docs if paths are written correctly, but that would be messy. Again, it’s pretty common to store files of the same time like images the same directory.\nIt’s just important to remember the relative path between files in src/ should be the same as in docs/.\n\n16.7.1 Create a new page, update nav\nTo make sure you have an understanding about how files work together, I want you to create a new HTML page that will have “bios” for this trio in Harvey Dale and the Cements:\n\nCreate a single new html page that will publish next to index.html and shows.html. You can choose the filename (though it should make sense). You can use a copy of one of the existing pages to get started.\nChange the main headline of the new page to reflect the new content.\nAdd an h3 headline and a fake text paragraph for each of three members in the content section. The content doesn’t matter as much to me as using good coding techniques.\nUpdate the navigation on all the pages so they all work together."
  },
  {
    "objectID": "sass-02-refactor.html#push-to-github",
    "href": "sass-02-refactor.html#push-to-github",
    "title": "16  Refactoring our Sass",
    "section": "16.8 Push to Github",
    "text": "16.8 Push to Github\nIf you haven’t already, you should run git init, git add . and git commit -m \"message\" for this repo, and then create your Github repo and connect them.\nPush all your changes to this point to Github."
  },
  {
    "objectID": "sass-03-publish.html",
    "href": "sass-03-publish.html",
    "title": "17  Github Pages",
    "section": "",
    "text": "Because we put our web site files inside a docs folder, we can take advantage of a special feature in Github called Github Pages. It will allow us to publish our site to the Internet.\n\nGo into your Github repo for this project.\nClick on the Settings link.\n\nOn the left rail, the Pages tab.\nUnder Branch change the setting from “None” to main, and then change the appearing menu from “/root” to /docs.\n\nClick Save.\nWait a couple of minutes. Like maybe two.\nRefresh the page and a box should appear at the top with a link to your live webpage.\n\nThe links always works like this:\nhttps://YOUR-USER-NAME.github.io/YOUR-REPO-NAME/index.html\nIt might take a couple of minutes for your site to publish, and if you first view the site and it isn’t there, you may have to break your browser cache (hold down command while you refresh the browser) or use a private browser to see your changes. If that doesn’t work, make a change to your html, commit and push the changes to Github again.\nPlease take that URL and add it to your Github repo in the About section like this:\n\n\n\nSet the about link\n\n\nThis concludes the Sass section! We’ll use these skills in our text section on Bootstrap."
  },
  {
    "objectID": "bs-00-intro.html#tutorials",
    "href": "bs-00-intro.html#tutorials",
    "title": "Bootstrap",
    "section": "Tutorials",
    "text": "Tutorials\n\nThroughout this lesson, we will extensively refer to the Bootstrap documentation.\nYou should also go through the first part of the Tutorial Republic’s Tutorial Republic’s Bootstrap 5 tutorial starting with “Bootstrap Introduction” through “Bootstrap Responsive Layout” – before jumping into this week’s Practice lesson. You are free to go through the rest, or come back to specific tutorial pages as needed.\nThere are other tutorials if you are interested, like W3 Schools’ Bootstrap 5 Tutorial or the video-based Net Ninja Bootstrap 5 Crash Course Tutorial."
  },
  {
    "objectID": "bs-00-intro.html#goals-for-this-section",
    "href": "bs-00-intro.html#goals-for-this-section",
    "title": "Bootstrap",
    "section": "Goals for this section",
    "text": "Goals for this section\nWe will:\n\nDiscuss the benefits of using a mobile-first framework.\nAdd pre-built components like navigation, etc.\nUse Bootstrap’s grid-system to create a responsive website.\nIntroduce Sass/SCSS for customization.\n\n\n\n\n\n\n\nTip\n\n\n\nThere is a screencast of this lesson with explanations in Canvas under Panopto Video. Look for Bootstrap practice lesson."
  },
  {
    "objectID": "bs-00-intro.html#create-your-project-and-github-repo",
    "href": "bs-00-intro.html#create-your-project-and-github-repo",
    "title": "Bootstrap",
    "section": "Create your project and Github repo",
    "text": "Create your project and Github repo\nWe’ll take some leaps of faith and create our project and get all our files, so we have something to talk about within the lesson.\n\nCreate a new folder in your icj/ folder called yourname-bootstrap.\nIn VS Code, open a new window and open your new folder.\nOpen the Integrated Terminal.\n\nRun degit utdata/icj-bootstrap-template to download the files.\nRun npm install to install the node packages.\nRun git init to intilize git.\nRun git add . to add the files.\nRun git commit -m \"first commit\" to commit the files.\n\nGo to Github and create a repository of the same name. Use the git remote add command to connect your repos.\n\nThe project already has README.md and .gitignore files, but you should update the README with information specific to this assignment.\n\nEdit the README file by adding a new section at the top with your name and the date you started the project. Note it is a Bootstrap 5 class project.\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen running npm install or when viewing your project on Github, you will see warnings about outdated packages and dependencies. These will not affect our work on this project."
  },
  {
    "objectID": "bs-00-intro.html#review-the-template-files",
    "href": "bs-00-intro.html#review-the-template-files",
    "title": "Bootstrap",
    "section": "Review the template files",
    "text": "Review the template files\nThis project is similar to the Sass template in that it uses the Node development environment. There are a couple of differences so we’ll review the files.\n\nThe docs folder\nThe docs/ folder is where all our finished site files go. It is the folder that will be read by the web server.\n\n\n\n\n\n\nWarning\n\n\n\nDO NOT EDIT FILES IN THE DOCS FOLDER!!! All the files in docs/ get regenerated when you are running gulp dev.\n\n\nMost web apps like this will use a folder called dist/ or public/ for their published files, but we are using docs/ to take advantage of some free web serving services offered by Github.\nInside our docs folder, you will eventually see the following:\n\nA css/ folder with all our compiled css. We won’t edit these files, because we will be using Sass and editing from the src/scss/ folder.\nA js/ folder. There are some Node.js server tasks that will copy files here for us.\nAn index.html file. This is the HTML page we will be building, but we will will be editing it from the src/ folder.\n\n\n\nThe src folder\nThis is where we edit our files. Any change we make here gets compiled or copied into the docs/ folder by our Node.js server.\n\nOur .html files sit loose in the src/ folder (or put into subfolders). These get copied into docs/ in the same relative location.\nThe img folder is for our original image files. They get “minified” and placed in docs/img/.\nThe scss folder has styles.scss file were we will add all our Sassy css.\n\nWhen we run gulp dev we also launch a live server that will rebuild our project when we save our source files.\n\nInspect the html file\nWhile we are in our src folder, let’s look at our HTML.\n\nOpen src/index.html and take a look at it.\n\nThere are several things going on here with this file beyond the base HTML. In the &lt;head&gt; we are pulling in css file that will be generated through Sass, including for the Bootstrap framework. At the bottom we are pulling in the JavaScript file that we need for Bootstrap, which will also be copied there by our development environment.\n\n\nInspect the scss file\n\nOpen the src/scss/styles.scss file\n\nYou’ll see a lot of comments in this file to explain some things. There is an @import command here that pulls in all the Bootstrap css from our node_modules folder that we downloaded when we ran npm install. You don’t see the result yet on our index page, but you will soon. There are also some comments to guide you.\n\n\n\nInspect the configuration files\nThe remaining files in the root level of the project are configuration files that help make this development ecosystem run.\n\nThe .gitignore file. It’s configured for a Node.js based web app.\nThe README.md file explains how to get started with this template.\nThe gulpfile.js is our magic task runner. More on that below.\nThe package.json and package-lock.json files keep track of all the npm packages we are using. When you run $ npm install, it downloads all the software into the node_modules folder, which is NOT saved into Github because it contains thousands of files.\n\n\nMore about the gulpfile\nGulp is our task runner that creates our server, compiles our CSS and copies files where we need them. The gulpfile.js is the main controller file works works with a series of files in the tasks folder.\nEach task file does a single thing, like clean out folders, copy files to different directories, or run the Sass CSS compiler. Each task uses one or more node packages to do its work, and the names of the file indicates more or less what that is. We might review some of these in class and you are free to poke around there, but I’d be careful in editing these files at this point.\nThis setup gives us the two commands that we will use the most:\n\ngulp will compile our CSS and copy all our files into the docs/ folder.\ngulp dev will do all of the above, plus start our web server so we can see our page.\n\nI can tell you I did not write all this JavaScript. I found examples on the web that were close to what I needed and I used those, along with documentation, to configure them for my needs."
  },
  {
    "objectID": "bs-00-intro.html#launch",
    "href": "bs-00-intro.html#launch",
    "title": "Bootstrap",
    "section": "Launch",
    "text": "Launch\nLet’s run it and see if it works.\n\nIn your VS Code Terminal, do this:\ngulp dev\n\nWith any luck http://localhost:3000 will load up in the browser and you’ll see some dummy text “Testing: 1, 2, 3, 4” on your screen. This means everything should be good to go.\nCongrats! You are now ready to get down to business and build a website."
  },
  {
    "objectID": "bs-01-components.html#navs-and-navbars",
    "href": "bs-01-components.html#navs-and-navbars",
    "title": "18  Components",
    "section": "18.1 Navs and navbars",
    "text": "18.1 Navs and navbars\nNavigation is separated into two parts in Bootstrap Navs and tabs and Navbars. Navs are the links, and navbars are the containers that can hold them.\nTo build a navigation bar for our site we’ll poke around the Bootstrap documentation until we find something close to what we want and then copy that code and change it for our needs.\nIn our case we want the Navbars documentation. We want something with dropdows just so you can see that code for later.\n\nGo to the Navbars docs.\nScroll through the examples until you find the one that has dropdown links but not a search bar. The text right before the code starts with “You can also use dropdowns in your navbar.” It is right before the “Forms” section.\nUse the Copy link to get the code.\nPaste this code right after the opening &lt;body&gt; tag in our index.\n\nThis will add a nice navigation bar to our site:\n\n\n\nNavbar example\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs you copy and paste code into your index.html file, you may have to adjust the indents of some rows. Make your indents so your code is nice and pretty and shows properly the parent-child relationships of items. You’ll thank me later when you are trying to figure out what goes with what. That, and it is part of your grade, because I want to build good habits.\n\n\n\n18.1.1 Adjust the navbar color\nThere are a bajillion ways to customize both navs (the links) and navbars (the container). We’ll explore the docs just a bit more to change some colors and set up themeing for later.\n\nScroll a little further through the navbar docs and you’ll get to a section about color schemes. Study how they work. We are going for this second one listed with the blue background.\nChange the navbar style bg-body-tertiary to bg-primary. This changes the backgroud of the navbar to blue.\nAdd the attribute data-bs-theme=\"dark\" after the class, as shown in the example. This changes the text of the navbar to a light color to work against the darker background.\nSave and check your page.\n\n\n\n\n\n\n\nNote\n\n\n\nWe are glossing over that data-bs-theme=\"dark\" attribute a bit, but this is a new option in Bootstrap that allows you to create a “dark mode” for your website, including a toggle to switch back and forth with “light mode”. We won’t get into that here, but you can explore the documentation if you are interested.\n\n\n\n\n18.1.2 Review how nav works on mobile\nThis navbar code includes CSS and JavaScript that collapse links into a menu. By adding the navbar-expand-lg class here we control when those links expand to show across the page. Since that menu and the link dropdowns take JavaScript to work properly, testing those features is a good way to make sure Bootstrap is set up properly.\n\nUse your DevTools Inspector or change your window width to mobile to see the menu button.\nClick on it to make sure it works!\n\n\n\n\nTest your mobile navbar\n\n\nYou should look over the other code within the navs, especially the list items classed as nav-item and the a tags within them classed as nav-link. These are your actual links. Where they have href=\"#\" you’ll update # to the path to your HTML pages.\nI also want to point out here in the example the Home nav-link, which has two important classes because it represents the “Current” page on the site.\n\nThe class active here makes that item bold in the navigation bar to give the reader a visual clue you that you are viewing that specific page from the navigation menu.\nThe attribute aria-current=\"page\" denotes to screen readers this is the active link and is important for those who can’t “see” the visual clue that the active class gives us.\n\nWhen building web sites, you should update page navigation to reflect both of those for each pages."
  },
  {
    "objectID": "bs-01-components.html#a-jumbotron-site-header",
    "href": "bs-01-components.html#a-jumbotron-site-header",
    "title": "18  Components",
    "section": "18.2 A Jumbotron site header",
    "text": "18.2 A Jumbotron site header\nOnce upon a time (like 2021) Bootstrap had a special header component called a Jumbotron. With Bootstrap 5’s release in May 2021 they got rid of it because you can build a similar display with their existing utility classes, which allows us to introduce Bootstrap examples along with content and utilites classes.\nFirst let’s take a look at what we are talking about.\n\nGo to the Bootstrap Examples page. You can get this from any Bootstrap Docs page in the navigation item called Examples.\n\nNow, these examples aren’t quite as easy to use as the Component documentation. To see how they work you have to either download the examples (which gets you all of them) or view the source code of each page (In Chrome, View &gt; Developer &gt; View Source.)\nInstead, we are just going to build this bit-by-bit. But I did want you to see the examples so you know our goal.\n\nAfter your nav, add a new div with a class=\"container\".\nInside that a semantic &lt;header&gt; element.\nInside the header add an h1 tag and a p tag and put some text in both. You can use VS Code lorem or maybe try a little cheese ipsum.\n\nIt should be something like this:\n&lt;div class=\"container\"&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Header headline is here&lt;/h1&gt;\n    &lt;p&gt;Danish fontina when the cheese comes out everybody's happy ricotta. Gouda red leicester parmesan cottage cheese everyone loves monterey jack who moved my cheese cut the cheese.&lt;/p&gt;\n  &lt;header&gt;\n&lt;/div&gt;\nLet’s talk about that container. In Bootstrap, the class “container” applies some margins and centers content in the browser. It’s an important building block with responsive design because those margins expand/contract depending on your device width.\nThe rest of that:\n\nWe use the semantic &lt;header&gt; tag so it describes this part of the page. We can target that element with CSS.\nThe h1 and p tags are standard. For now. We’re about to gussy ’em up.\n\nWe will be doing a tour of Bootstrap content and utilites class as we go along.\n\n18.2.1 Typography classes\nLet’s gander at Bootstrap’s Typography documentation. These are a set of classes that can be applied to elements that give them a certain look. Because Bootstrap is customizable, it is possible to set these classes and then update them later with Sass. We’re going to stick with default styles for now.\n\nLook through the Display headings section to see how to apply the display-4 class and add that to your h1 within your header.\nLook at the Lead section and then add that class to your p tag within the header.\n\nYour code should look like this:\n  &lt;h1 class=\"display-4\"&gt;Header headline is here&lt;/h1&gt;\n  &lt;p class=\"lead\"&gt;Danish fontina when the cheese comes out everybody's happy ricotta. Gouda red leicester parmesan cottage cheese everyone loves monterey jack who moved my cheese cut the cheese.&lt;/p&gt;\nAnd your page should should be looking something like this:\n\n\n\nTypography classes\n\n\n\n\n18.2.2 Backgrounds\nWe’re going to add some color to our Jumbotron-like header using a background color. The Background classes are found in the Utilities part of the documentation.\n\nBrowse through the Backgrounds docs so you can see how they are used.\nOn the header div, add the class attribute to make the background our “secondary” color (the default whis is a dark gray color).\n\n&lt;header class=\"bg-secondary\"&gt;\nThat should yield a result like this:\n\n\n\nBackground color added\n\n\nStill ugly, but we are getting there.\n\n\n18.2.3 Colors\nNext on the tour are utility classes to control text colors.\n\nLook through the color documentation and figure out how to make white text.\nAdd that class to the same div that you added the background color, so it look like this:\n\n&lt;header class=\"bg-secondary text-white\"&gt;\nStill ugly, but you should have white text on the dark gray background.\n\n\n18.2.4 Spacing classes\nNext we’ll give our text some room to breathe using utility classes to control spacing between elements like margins and padding.\n\nGo to the Spacing documentation and look it over, especially the notation section.\n\nBasically this shorthand to build space around items (margin) and inside items (padding). While I can’t explain it better than they have, here is an abbreviated version of the shorthand:\n\nYou use m for margin or p for padding.\nFollowing m or p you add either: t (top), b (bottom), l (left), r (right), x (left and right), y (top and bottom), or nothing for all 4 sides.\nThen, you specify sizes with a hyphen and a value of 0 through 5 (5 being the largest amount of spacing).\n\nSo, pt-4 would be padding on the top at a value of 4.\nWe’ll use this on our header. Let’s add the code first then I’ll explain.\n\nAdd these as a class=\"\" to the header element (If you do this one at a time you can see what each does):\n\nmy-4 adds a margin to top and bottom of the element, basically moving it off the navigation.\np-5 adds padding, the space “inside” the element between the border and the text.\n\n\nYour header should look like this now:\n&lt;header class=\"bg-secondary text-white my-4 p-5\"&gt;\n\n\n18.2.5 Borders\nYou set the color, width, style and radius of borders with various border classes. Let’s use those to add a slight radius to our header corners.\n\nReview the border-radius docs and add the class to your header to make the corners of the box rounded. It’s a pretty slight visual change.\n\n\n\n18.2.6 Button component\nHere we’ll dive back into the components section of the docs to get a button to add to our Jumbotron-like header. But let’s use the Search docs to find it.\n\nGo to any page in the Bootstrap docs.\nIn the search bar at top left, type in “button”. As you do, you’ll see options pop up under the search. Choose the “Buttons / Buttons” option to get to the main Buttons page.\nIf your browser window is set wide enough, you should see an additional “On this page” navigation on the right side. Click on the Sizes link there. If you don’t have that navigation, just scroll down the page until you find Sizes.\nIn the Large button example, copy the first line that has btn-primary as part of the classes.\nAdd this code on a new line after the closing p tag in the header.\n\nWith this, we have our “Jumbotron”-like header. At this point, you page should be looking like this:\n\n\n\nButton added\n\n\nAnd your header code should look like this:\n&lt;header class=\"bg-secondary text-white my-4 p-5 rounded\"&gt;\n  &lt;h1 class=\"display-4\"&gt;Header headline is here&lt;/h1&gt;\n  &lt;p class=\"lead\"&gt;Danish fontina when the cheese comes out everybody's happy ricotta. Gouda red leicester parmesan cottage cheese everyone loves monterey jack who moved my cheese cut the cheese.&lt;/p&gt;\n  &lt;button type=\"button\" class=\"btn btn-primary btn-lg\"&gt;Large button&lt;/button&gt;\n&lt;/header&gt;\nThis might be a good time to use the git cycle to save and push your efforts to Github."
  },
  {
    "objectID": "bs-02-grids.html#the-responsive-grid",
    "href": "bs-02-grids.html#the-responsive-grid",
    "title": "19  Grids",
    "section": "19.1 The responsive grid",
    "text": "19.1 The responsive grid\nThese three columns are evenly distributed across the container space. Adjust your browser width smaller and wider (or use the DevTools Inspect) and you’ll see they stay that way at every width.\nOur goal here is to be able to adjust how wide those columns are at different browser widths. We do this so we can control how the content displays on different devices like phones, tablets and computers.\n\n19.1.1 The sizes\nThere are five “breakpoints” for Bootstrap, meaning changes can happen at 5 different widths: default (extra small), sm, md, lg, xl and xxl. They kinda work out like this:\n\nthe default col is for a vertical phone\nsm is for a horizontal phone to a vertical tablet\nmd is for a horizontal tablet to laptop\nlg is for a laptop to desktop screen\nxl is for a large desktop screen\nxxl is for an even wider desktop screens\n\nEvery phone and computer screen is different, so that list above is approximate. (There are actual pixel widths set deep within the Bootstrap code and they are adjustable, but we aren’t going there.)\nLooking back at our three columns, we would want content like that to stack on top of each other at extra small browser widths, like on a phone. We can adjust our code to do this.\n\nChange all the col classes to instead be col-sm.\nAdjust your browser width and watch how the columns change.\n\nNow that you’ve added a “small” sm breakpoint, the divs stack on top of each other at the default “extra small” breakpoint, as they are supposed to, but then display evenly across at small or greater widths.\nBootstrap works from smallest to largest, so once you set a grid width for col-sm, they will stay that way for wider widths unless you set another one. You can set the same div to a different number of columns at different widths. However, within a row, the columns need to add up to increments of 12 for each breakpoint if you want them to work properly.\n\nAdjust the three columns to be col-sm-3, col-sm-6 and col-sm-3, respectively.\n\nThis makes the middle column wider when viewed at the “small” breakpoint or wider, but they each still show over all 12 columns when at the extra-small default breakpoint. Note that those column numbers add up to 12. If the total is greater than 12, it breaks into a new column.\nNow we will make these columns all the same width for the medium breakpoint, without changing the small breakpoint.\n\nAfter the col-sm designations in the class, add a space and then this designation for the medium breakpoint: col-md-4. Do this for all three columns.\n\nNow adjust your browser width and see them change between the three breakpoints. Again, note that the column numbers for each size add to a factor of 12 for each breakpoint. i.e, the sm numbers total to 12, and then the md numbers total to 12.\nAs a bit of a check, this part of our code should look like:\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"bg-danger col-sm-3 col-md-4\"&gt;\n      Column\n    &lt;/div&gt;\n    &lt;div class=\"bg-warning col-sm-6 col-md-4\"&gt;\n      Column\n    &lt;/div&gt;\n    &lt;div class=\"bg-success col-sm-3 col-md-4\"&gt;\n      Column\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\nThis is how your page should behave at the default xs, the sm and md breakpoints:\n\n\n19.1.2 xs\nAt the default size (xs), the columns are stacked.\n\n\n\nxs look\n\n\n\n\n19.1.3 sm\nAt the sm size, the middle column is wider.\n\n\n\nsm look\n\n\n\n\n19.1.4 md\nAt the md size, the columns are even.\n\n\n\nmd look\n\n\nNow that we’ve learned a little about columns, we’ll tear this apart and build something useful."
  },
  {
    "objectID": "bs-02-grids.html#using-our-grid-system",
    "href": "bs-02-grids.html#using-our-grid-system",
    "title": "19  Grids",
    "section": "19.2 Using our grid system",
    "text": "19.2 Using our grid system\nNow we’ll work on the part of our site that will look like this:\n\n\n\nOur goal working with columns\n\n\nWe’ll call this our “highlight” section. We’ll delete the container we just made and replace it with the highlight section below.\n\nRemove the last container div and content that we added.\nAdd the code below in its place. Save your page and make sure it isn’t broken.\n\n&lt;section class=\"container\"&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-md-6\"&gt;\n        &lt;h2&gt;An important heading&lt;/h2&gt;\n        &lt;p class=\"lead\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae nostrum deleniti quo excepturi expedita enim veniam.&lt;/p&gt;\n        &lt;p&gt;Dolorem nisi quia nostrum laudantium obcaecati eveniet cupiditate tempora dolorum a. Nisi nulla nesciunt saepe eligendi vel natus ex odit ut exercitationem.&lt;/p&gt;\n        &lt;p&gt;Inventore, quo similique modi doloribus sed voluptas incidunt excepturi molestiae ea impedit cupiditate ut nobis commodi.&lt;/p&gt;\n        &lt;p&gt;– By Johannes Gutenberg in Mainz&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"col-md-6\"&gt;\n      Column 2\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\nInstead of using &lt;div class=\"container\"&gt;, we used the semantic &lt;section&gt; element. It works just like a div so we can apply the same bootstrap classes to it.\n\n19.2.1 Processing photos\nWe want to add a photo and caption in the next column, but we don’t have one to use yet. This allows us to talk about an important feature of this project template rig.\nWhen we run gulp or gulp dev a script runs takes all the photos inside the src/img/ folder and processes them for the web, reducing the dpi and compression, before it moves the copy into src/docs/. So, if we use a 2MB jpeg photo in our source folder, it ends up being less than 100k when it is used for our site.\nThis makes our site much faster since the browser doesn’t have to download that huge image. It doesn’t hurt to size down your original source photos anyway, just make sure they are large enough for the widest measure (usually 1200px at 72 dpi is fine unless it’s for a huge display.)\nThe sizing process doesn’t run continuously so we have to launch gulp or gulp dev to process new photos. This is all to say we need to download a photo for our project and restart gulp:\n\nDownload this  Gutenberg Bible at the Harry Ransom Center photo and put it inside your src/img folder.\nStop the gulp dev watch process (Cntl+C in your Terminal window) and then restart it using gulp dev. This will process the photo and make it available in the docs img folder. It’s an important step as photos are only processed when gulp dev starts up.\n\n\n\n19.2.2 Fluid images\nWe’re going to put Figure code into the second column here to get us a photo and caption, but I don’t want you to pull the example code from Bootstrap Documentation because I need to explain how some of it works and that is easier if we build it up ourselves.\n\nReplace the text “Column 2” with the following code:\n&lt;figure class=\"figure\"&gt;\n  &lt;img src=\"img/gutenberg.jpeg\" class=\"figure-img\" alt=\"Guetenberg Bible\"&gt;\n  &lt;figcaption class=\"figure-caption\"&gt;A caption for the above image.&lt;/figcaption&gt;\n&lt;/figure&gt;\nNow save your HTML page and look at the result in your browser.\n\nThe photo blows out of the second column because it is “bigger” than the column it is inside. If you change the width of browser window the photo will always stay that size, which doesn’t work well for us. There is a cool feature to fix this.\nUpdate your code to add the class img-fluid to the image element, so it says class=\"figure-img img-fluid\".\nWhat this img-fluid class does is adjust the width of the photo to the width of its parent element. Your page should look like this now:\n\n\nThis gives us great flexibility in building our responsive website because the photo will shrink and grow to fit the right space!\n\n\n19.2.3 Add a breakpoint\nAs the page gets a little wider, we want give the text a little more space than the photo.\n\nAdd lg sizes to your two columns. Set the first one at 8 columns and the second one at 4 columns.\nSave and check the results. You should see your columns change at the medium and large widths.\n\nWe’ve finished building this part of the pages for now. Next we’ll add the cards to our page."
  },
  {
    "objectID": "bs-03-cards.html#the-ever-versatile-card",
    "href": "bs-03-cards.html#the-ever-versatile-card",
    "title": "20  Cards",
    "section": "20.1 The ever-versatile card",
    "text": "20.1 The ever-versatile card\n\nScan through the Bootstrap cards documentation and note all the different types of cards you can make. Compare the different styles and note which classes are used.\n\n\n\n\n\n\n\nImportant\n\n\n\nIn a lot of these examples you’ll see style=\"width: 18rem;\". Bootstrap uses it in their documentation here so the card won’t stretch across their page in their examples. Most of the time you don’t want this style and should delete it. We’ll use other ways to control width.\n\n\n\nIn your index page after our “highlight” section, add a new div with the class “container”.\nIn the docs, find the Grid cards example. Copy the first grid example there and put that inside your container div.\nSave and look at it. Because we are pulling from the template and there are parts we don’t need, we need to make some edits.\n\nDelete one of the four cards so there are only three. You should be able to figure out where they start and end by looking at the patterns in the code.\nRemove the &lt;img&gt; line in each of the cards since we don’t need the photo."
  },
  {
    "objectID": "bs-03-cards.html#adjusting-grid-cards",
    "href": "bs-03-cards.html#adjusting-grid-cards",
    "title": "20  Cards",
    "section": "20.2 Adjusting grid cards",
    "text": "20.2 Adjusting grid cards\nWith this setup, each card is inside a Bootstrap column. We can use a special Row columns class to set how many columns (and therefore how many cards) should show in a row before the columns/cards wrap into a new row.\nThe row-cols setting in the template says to display 1 card per row row-cols-1 until the medium width, which is changes to 2 cols per row with row-cols-md-2. The last style there g-4 sets the gutter width between the columns.\n\nEdit the row div to change the md row setting to “3” instead of “2”.\nSave and look how the page changes.\n\nWith this method, you can have any number of cards but you can set how many cards/columns you want at each width. It is very useful.\nThis is how your page should look now:\n\n\n\nCards added\n\n\nNext we’ll explore some customizations."
  },
  {
    "objectID": "bs-04-customize.html#modifying-bootstrap-sass-variables",
    "href": "bs-04-customize.html#modifying-bootstrap-sass-variables",
    "title": "21  Customizing",
    "section": "21.1 Modifying Bootstrap Sass variables",
    "text": "21.1 Modifying Bootstrap Sass variables\nMost default styles in Bootstrap are built upon a set of variables to take advantage of that Sass feature. We can quickly make changes across our site based on resetting these variables.\nFor a full explanation you would need to read the Customize Sass documentation, but we’ll show the power of this here by changing our primary color and background color variables.\n\nOpen your src/scss/styles.scss file and look through the comments at the top of the file that explain it. Some things have to be in a specific order.\nAfter the variable examples shown there but before the @import example, add the following and then save the file:\n\n$primary: #bf5700;\n$body-bg: #ededed;\nIf you look at your page, all the blue stuff should now be burnt orange and the background should be grey. (#hookem)."
  },
  {
    "objectID": "bs-04-customize.html#choosing-different-bootstrap-classes",
    "href": "bs-04-customize.html#choosing-different-bootstrap-classes",
    "title": "21  Customizing",
    "section": "21.2 Choosing different Bootstrap classes",
    "text": "21.2 Choosing different Bootstrap classes\nOK, but now our Jumbotron header is kinda dark. Let’s change the background to white and the text to black by choosing different Bootstrap styles there.\n\nFind your header in your index code.\nIn the class, replace both bg-secondary text-white to just bg-white. Leave the spacing and border classes.\n\nThis changes the header background to white and returns the text to its default black. Using the utility styles can allow quick display changes.\nWe need to do something similar for the cards.\n\nLook in the documentation on cards at the Background and color section and find the “Light card title” example, then update your cards code to get that effect.\n\nYou should end up with white cards on the gray background of the page."
  },
  {
    "objectID": "bs-04-customize.html#updating-an-existing-bootstrap-class",
    "href": "bs-04-customize.html#updating-an-existing-bootstrap-class",
    "title": "21  Customizing",
    "section": "21.3 Updating an existing Bootstrap class",
    "text": "21.3 Updating an existing Bootstrap class\nLet’s change the .lead line in our header to be a little lighter font weight.\nWe can accomplish this we adding a style rule that builds on the existing Lead typography class defined in Bootstrap. We do need to nest our rule so it only applies inside a header so we avoid affecting the other “lead” paragraph in our “highlight” section.\nThe rule we’ll use is a css property font-weight which as a value of “lighter” that defines thinner/lighter characters in text. The change is subtle, so as we write our rule we’ll change the text red to make sure our rule is working where we want it to, then we’ll remove it.\n\nIn your src/styles.scss file near the bottom, after the comment about custom styles, add this and then save and view the result:\n\n// header lead lighter\nheader {\n  .lead {\n    font-weight: lighter;\n    color: red;\n  }\n}\nLet’s describe what that does:\n\nThe first line that starts with // is a comment we can use in Sass. This let’s us leave notes as developers, but they will be removed when the code is compiled.\nWe use the Sass syntax to start with header to capture that element, and then nest within that to write a style on the lead class.\nThe two rules are the font-weight: lighter; and the color red.\n\n\nOnce you viewed the result and made sure you’ve captured only the lead in the header, then remove the color style."
  },
  {
    "objectID": "bs-04-customize.html#write-a-new-style",
    "href": "bs-04-customize.html#write-a-new-style",
    "title": "21  Customizing",
    "section": "21.4 Write a new style",
    "text": "21.4 Write a new style\nNext we’ll create our own style in CSS just like any normal HTML page.\nWithin the middle section with the photo, let’s add a tagline as a final paragraph. We want it to be italic and flush right, and we want to build this as a new style so we can reuse in other places on our (fake) website.\n\nOn the &lt;p&gt; tag with the text “By Johannes Gutenberg”, add a class called “tagline”.\nGo into your styles.scss file and add a style rule for .tagline that sets the font-style to “italic” and text-align to “right”. This is just like writing any css style to a class, so I’ll let you figure it out.\n\nIt should end up looking like this:\n\n\n\nTagline added"
  },
  {
    "objectID": "bs-04-customize.html#add-a-footer",
    "href": "bs-04-customize.html#add-a-footer",
    "title": "21  Customizing",
    "section": "21.5 Add a footer",
    "text": "21.5 Add a footer\nLastly, I want you to add a footer element with the following specs (which you can visualize below). There are a number of ways you can do this, and I want you to choose how. Here are the specs:\n\nIt should be built from the footer symantic element &lt;footer&gt;.\nThe text should be centered with some spacing around the words to give them air.\nThe background should be white."
  },
  {
    "objectID": "bs-04-customize.html#push-your-code-to-github",
    "href": "bs-04-customize.html#push-your-code-to-github",
    "title": "21  Customizing",
    "section": "21.6 Push your code to Github",
    "text": "21.6 Push your code to Github\n\nUse the git cycle to push all your changes to Github so I can see your progress."
  },
  {
    "objectID": "bs-04-customize.html#and-were-done-almost",
    "href": "bs-04-customize.html#and-were-done-almost",
    "title": "21  Customizing",
    "section": "21.7 And we’re done, almost",
    "text": "21.7 And we’re done, almost\nWe are done with our site and it should look like this:\n\n\n\nBootstrap page done"
  },
  {
    "objectID": "bs-05-publish.html#publishing-through-the-docs-folder",
    "href": "bs-05-publish.html#publishing-through-the-docs-folder",
    "title": "22  Publishing",
    "section": "22.1 Publishing through the docs folder",
    "text": "22.1 Publishing through the docs folder\nGithub pages allows us to use a folder called docs/ as our distribution folder, and the template we are using is built to use that feature.\n\nGo to your Github repo for this project and select Settings.\nOn the left navigation, look for Pages.\nWhere is has the dropdown for Source:\n\nChoose the main branch.\nFor the next dropdown, choose /docs.\nClick the Save button.\n\n\nAfter a few minutes, refresh your page and your website URL based on your username and project repo name will appear at the top. The structure works like this:\nhttps://{githubusername}.github.io/{project-name}/\nPlease take that URL and add it to your Github repo in the About section like this:\n\n\n\nbs-save-url.gif"
  },
  {
    "objectID": "bs-05-publish.html#more-github-pages",
    "href": "bs-05-publish.html#more-github-pages",
    "title": "22  Publishing",
    "section": "22.2 More Github pages",
    "text": "22.2 More Github pages\nThere are other ways to publish Github Pages, depending on your needs.\n\nWe’ll stop here. Turn in your Github link to the Canvas assignment."
  },
  {
    "objectID": "bs-06-mastery.html#resources",
    "href": "bs-06-mastery.html#resources",
    "title": "23  Bootstrap mastery",
    "section": "23.1 Resources",
    "text": "23.1 Resources\nWhile you are building this from scratch, you do have the icj-bootstrap-template development environment to set up Sass, etc. You also have your practice repo to look at for guidance.\nYou’ll want to use the Bootstrap documentation for your code and styles.\n\nGo to Bootstrap site and click on the Docs link. Most of what you need is under Components on the left-hand navigation. Utilities has some useful information as well. Use the search bar there to help you.\nThe are many Bootstrap 5 tutorials on the web, including Tutorial Republic and W3 Schools. If you prefer video tutorials, Net Ninja’s Bootstrap 5 Crash Course is pretty good."
  },
  {
    "objectID": "bs-06-mastery.html#project-template",
    "href": "bs-06-mastery.html#project-template",
    "title": "23  Bootstrap mastery",
    "section": "23.2 Project template",
    "text": "23.2 Project template\n\nCreate a new, empty folder in your icj/ folder called yourname-bootstrap-mastery.\nIn VS Code, open a new window and open your new folder.\nOpen the Integrated Terminal.\nRun $ degit utdata/icj-bootstrap-template to download the files.\nRun $ npm install to install the node packages.\nRun $ git init to intilize git.\nRun $ git add . to add the files.\nRun $ git commit -m \"first commit\" to commit the files.\nGo to Github and create a repository of the same name.\nUse the “or push an existing repository from the command line” commands from Github to sync the repos.\n\n\n23.2.1 Adding the images\nI have images for you to use for this assignment, but you have to set them a specific way for them to work in the development environment:\n\nDownload this compressed folder of images:  pirate-photos.zip.\nFind the zip on your hard drive and uncompress it.\nMove the contents (the photos only) into the src/img folder in your project. The photos should be loose inside that folder.\nRun gulp dev to process the photos and run your development server. (If you had gulp dev running already, quit it with CTRL + C and then restart gulp dev again so the photos will be processed and copied into docs.)"
  },
  {
    "objectID": "bs-06-mastery.html#strategy",
    "href": "bs-06-mastery.html#strategy",
    "title": "23  Bootstrap mastery",
    "section": "23.3 Strategy",
    "text": "23.3 Strategy\n\nBuild the framework of the index page first. Get the main components built and figure out your content before you worry about styles.\nOnce the structure is set, move onto styles and other details for the index page.\nI recommend finishing the index page before moving onto the other article and photo carousel page. (This minimizes the number of adjustments you have to make on multiple pages, though you’ll need to make some adjustments to navigation.)\n\nSee the example pages at the bottom to get an idea of what you are building."
  },
  {
    "objectID": "bs-06-mastery.html#the-assignment",
    "href": "bs-06-mastery.html#the-assignment",
    "title": "23  Bootstrap mastery",
    "section": "23.4 The assignment",
    "text": "23.4 The assignment\nYou will build three pages:\n\nAn index page\nAn article page\nA photo page using a photo carousel\n\nThe details are noted below.\n\n23.4.1 All pages\nAll your pages should have the following structural components:\n\nA navbar with a brand (Pirate Cove) and three nav-links: Home, Article and Photos.\n\nThe nav links should have an underline on hover only. You’ll need to write CSS to make this happen.\nThe nav link for the active page (i.e., the one you are viewing) should be bold. There is a special class for this that you can find in the Bootstrap documentation in the Navbar section.\n\nA jumbotron treatment at the top of the site.\n\nThe jumbotron should have a background image that works reasonably well at all sizes. This is must be done through SCSS using the background shorthand property. You will need to set the image (the url), repeat (no-repeat) and position (center). You’ll need one more style “background-size: cover;” to make it work right.\nFor the background image for the jumbotron, you’ll have to reference it from the scss file. The path for this has to be relative from the compiled css file to the image, so it will be url(../img/filename.jpg). Note the beginning ../ on that path is different than when you call images directly into the index.html page. (In contrast, all your other images referenced in HTML will be src=\"img/filename.jpg\" without the ../ part.)\nSet the main text in the jumbotron to use a Google font of your choice.\n\nA footer with your name in the text.\n\nThe footer should have a background color and the text should be centered with adequate padding.\n\n\n\n\n23.4.2 Index page\nBelow the jumbotron you should have three “cards” that highlight different Kraken.\n\nThe cards should work with a responsive grid so they stack on mobile but are three across at md and larger.\nMake up your own names and details about the monsters. Or use ipsum type, perhaps pirate ipsum.\n\n\n\n23.4.3 Article page\nThe article page should be a two-column responsive layout.\n\nThe columns should stack on mobile, and be side-by-side at medium and larger. There should be different col settings for md and lg so the pirate mugshot doesn’t get too wide.\nThe left column should have the pirate mugshot photo and be responsive to fit the width of the column at different sizes.\n\nThere should be a text byline and the name and source should be different in style or font.\n\nThe right column should a headline and “story” text in multiple paragraphs. (Text can be pirate ipsum or similar.)\n\n\n\n23.4.4 Photos page\nOn the photos page you will build a photo carousel from the three kraken photos.\n\nUse one of the carousel options that has controls to advance the slides.\nAdd some kind of caption for each photo, either under or on top of photo (as long as it is readable).\nSet up the slideshow to use only 8 centered columns at the medium size or greater. (You can search the docs for “offset” on how to reorder columns to skip the first two.)"
  },
  {
    "objectID": "bs-06-mastery.html#extra-credit",
    "href": "bs-06-mastery.html#extra-credit",
    "title": "23  Bootstrap mastery",
    "section": "23.5 Extra credit",
    "text": "23.5 Extra credit\n\nFOR EXTRA CREDIT: Pick one other Bootstrap component to add to the site somewhere that makes sense. This is your chance to explore Bootstrap and be creative. When you turn this in, tell me your component-of-choice so I don’t have to guess."
  },
  {
    "objectID": "bs-06-mastery.html#publishing",
    "href": "bs-06-mastery.html#publishing",
    "title": "23  Bootstrap mastery",
    "section": "23.6 Publishing",
    "text": "23.6 Publishing\nPublish your site using Github pages using the “main branch/docs folder” method. Add your link to the Github repo description so it is easy for me to find. Turn in your github repo link to the assignment."
  },
  {
    "objectID": "sapp-00-intro.html#building-up-to-the-static-generator-app",
    "href": "sapp-00-intro.html#building-up-to-the-static-generator-app",
    "title": "Static apps intro",
    "section": "Building up to the static-generator app",
    "text": "Building up to the static-generator app\nThroughout this semester we’ve been building your coding skills, adding a new language or tool each week. For each of the three core technologies, HTML, CSS and JavaScript, we’ve enhanced the base language with tools or systems to make them more efficient to use.\nWhen you built your Bootstrap practice project, you had to completely finish one page before you copied it to create your second page, which means you had lots of duplicate code. If you needed to change something in the Jumbotron, you had to change it on every page. Imagine if your site had hundreds of pages. That’s too labor intensive in the age of computers. With this lesson we’ll introduce a system that allows you to create a template framework that can be used to generate a number of pages with minimal extra effort.\nStatic-Site Generators are an approach to web development that allow you to build a powerful, server-based website locally on your computer, but then compile the pages into a single directory that can be published to a web server without the need of a live database.\nThere are many tools to build static sites using a myriad of programming languages. Some of them have support for themes and other significant customization. Many are built to serve as blogs, but usually they can be coerced into other purposes.\nFor our class, I have provided you a project framework in a repo that uses Node.js and Nunjucks to create a static-app environment.\n\nNunjucks\nFor this lesson, we’ll introduce the JavaScript template language Nunjucks and a couple of other tools. We’ll take the “Pirate Cove” Bootstrap project that you built previously, and “refactor” it so you can build similar projects with more pages much faster."
  },
  {
    "objectID": "sapp-01-framework.html#goals-for-this-lesson",
    "href": "sapp-01-framework.html#goals-for-this-lesson",
    "title": "24  The static app framework",
    "section": "24.1 Goals for this lesson",
    "text": "24.1 Goals for this lesson\nWe will learn the features of this project rig in steps:\n\nTemplates\n\nWe’ll learn about static-site generators and templates.\nWe’ll build a new page using the base template.\n\nLoops and Google Sheets data\n\nWe’ll learn about using Google Sheets to manage data in our project.\nWe’ll introduce loops to process data on our pages.\n\nGoogle Docs, ArchieML and baking pages\n\nWe’ll learn about using Google Docs/ArchieML for content.\nWe’ll learn about the bake command in the project.\nWe’ll create blog pages based on a Google Doc source.\nWe’ll update our index page to build links to the blog pages."
  },
  {
    "objectID": "sapp-01-framework.html#set-up-development",
    "href": "sapp-01-framework.html#set-up-development",
    "title": "24  The static app framework",
    "section": "24.2 Set up development",
    "text": "24.2 Set up development\nThe best way to set up your project template is to use degit to download the template from the icj-project-rig repo.\n\nCreate your project folder, called yourname-staticapp.\nOpen VS Code into that folder and open the Terminal.\nRun degit utdata/icj-project-rig.\nCreate your Github repo and connect them.\nrun npm install to install all the Node software\nrun gulp dev to process all the files and start the server."
  },
  {
    "objectID": "sapp-01-framework.html#review-the-example-site",
    "href": "sapp-01-framework.html#review-the-example-site",
    "title": "24  The static app framework",
    "section": "24.3 Review the example site",
    "text": "24.3 Review the example site\nBefore we talk about how the project architecture is structured, let’s tour the example pages that are included. As we do so, we’ll just touch on how the example code applies to specific project features.\n\n\n\n\n\n\nSample index\n\n\n\n\n\n\n\nSample detail\n\n\n\n\n\n\nAll the pages on the site have a Bootstrap Navbar and a footer. Each page gets this from a single template, so we don’t have to duplicate code for each new page.\nThe index also has a bookstores list down the page a bit, which is a loop over some data. As we explore the code later you’ll see there is only code for one entry, but we repeat that code for every row in data file. In this case the data was downloaded from a Google Sheets spreadsheet, an optional feature of the project. Sometimes having a structured data source like a spreadsheet is helpful.\nThe index also has a listing of three books. This is also built within a “loop” that allows us to repeat the same code over and over. In this case our book data was downloaded from a Google Docs file written in a special structure called ArchieML, developed by The New York Times.\nLastly, there are individual pages for each book listed, which serve as an example of detail pages built from the same template. Only the text and image content is different for each page, but the structure for each page comes from the same template.\nThese specific book pages were created using another feature of the project where we can “bake” pages from data. Instead of a human creating a new file for each library book, they were generated automagically based on data from the Google Doc. If there were 100 books in the data, it would’ve built 100 pages.\n\nStoring our content in Google Docs and Sheets might seem overcomplicated at at first, but it allows us to use Google as a content management system of sorts where many people can collaborate on the content and stay our of our code. It’s super powerful, and used by newsrooms like NYT, NPR and The Texas Tribune."
  },
  {
    "objectID": "sapp-01-framework.html#understand-the-project-structure",
    "href": "sapp-01-framework.html#understand-the-project-structure",
    "title": "24  The static app framework",
    "section": "24.4 Understand the project structure",
    "text": "24.4 Understand the project structure\nThe README.md in the project template has details about how different features work. READ THE README. While the README file is in your project, you might find it easier to read the README online. We will also go over it in class (or through video)."
  },
  {
    "objectID": "sapp-02-templates.html#page-previews",
    "href": "sapp-02-templates.html#page-previews",
    "title": "25  Templates and blocks",
    "section": "25.1 Page previews",
    "text": "25.1 Page previews\nHere are some screen shots of the finished product you are working toward.\n\nI’ll need to update these images!!\n\n\n\n\nIndex page\n\n\n\n\n\nPirate ship page\n\n\n\n\n\nEntry page example"
  },
  {
    "objectID": "sapp-02-templates.html#install-the-assets",
    "href": "sapp-02-templates.html#install-the-assets",
    "title": "25  Templates and blocks",
    "section": "25.2 Install the assets",
    "text": "25.2 Install the assets\nWe need to add our project image files to our src/img folder in the app.\n\nDownload the  pirate-photos.zip file.\nExpand the folder and take the images inside and put them inside your src/img/ folder.\nThe browserSyncReload watch task should kick off and process the photos. If not, quit gulp (Cntl-C) and restart with gulp dev."
  },
  {
    "objectID": "sapp-02-templates.html#copy-and-rename-the-index",
    "href": "sapp-02-templates.html#copy-and-rename-the-index",
    "title": "25  Templates and blocks",
    "section": "25.3 Copy and rename the index",
    "text": "25.3 Copy and rename the index\nTo keep us from getting bogged down in the advanced features of the projects rig, let’s rename our current index (so we can keep it for reference later) and make a new one.\n\nrename the file index.njk to index-example.njk\ncreate a new file index.njk in the same njk folder and insert the following code:\n\n{% extends '_templates/base.njk' %}\n\n{% block content %}\n&lt;div class=\"container\"&gt;\n  &lt;p&gt;Content goes here&lt;/p&gt;\n&lt;/div&gt;\n{% endblock %}\nYour browserSyncReload should’ve kicked off as you renamed and added files. If you look at your index page now it just has the navigation, footer and the text “Content goes here”. If that isn’t happening, run gulp dev.\nNow, it’s likely you are looking at this index.njk file and wondering how these few lines of code displays more than just one line of text in the browser? Where is the navigation coming from? Or the footer? This is the magic of Nunjucks.\nLook the first line of our index file: {% extends '_templates/base.njk' %}. This Nunjucks extends tag is used with a concept called “template inheritance”. This file, index.njk, is using all the code in _templates/base.njk and then using the Nunjucks block tag to replace and inject code into the base template. This way, we can reuse the base.njk template for every page on our site.\nLet’s look at it from the other direction.\n\nOpen up the file src/_templates/base.njk and take a look at it.\n\nThis file has all the required HTML5 tags, &lt;head&gt; and &lt;body&gt; and such, that is common to every web page. But base.njk also has examples of two other Nunjucks tags – blocks and includes – that allow us to extend and use this code in other web pages of our site. We’ll dive into those next.\nSo, to recap again, our index.njk file has that first “extends” line of code that is telling this page to use all the code in in _templates/base.njk (which is the framework of our site), and then anything that follows is being inserted into that framework."
  },
  {
    "objectID": "sapp-02-templates.html#nunjucks-template-inheritance-and-blocks",
    "href": "sapp-02-templates.html#nunjucks-template-inheritance-and-blocks",
    "title": "25  Templates and blocks",
    "section": "25.4 Nunjucks template inheritance and blocks",
    "text": "25.4 Nunjucks template inheritance and blocks\nWe’ll make a some changes in both our base template and our index so we can see how these templates and blocks work together.\n\nFirst, take a look at the title of your page in your browser. Note it says “Default title”:\n\n\n\n\nDefault title\n\n\n\nNow open the file src/_templates/base.njk\nTake a look at the &lt;title&gt; tag here:\n\n&lt;title&gt;{% block page_title %}Default title{% endblock %}&lt;/title&gt;\nThis is an example of the Nunjucks block tag, and this one is called “page_title”. Some notes about this:\n\nNunjucks block tags start with {% block tag_name %} and end with {% endblock %}.\nThe content inside the tag will display UNLESS you override it later with a new block tag of the same name.\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also call the block and append code to it using super, but we aren’t doing that here.\n\n\nWe want our site name to be at the beginning of every page title of our site, but then we want to override the actual title of each page with it’s own title.\n\nIn you src/_templates/base.njk file. On the line that looks like this: &lt;title&gt;{% block page_title %}Default title{% endblock %}&lt;/title&gt;, add “Pirate Cove |” right after the &lt;title&gt; tag so it looks like this:\n\n&lt;title&gt;Pirate Cove | {% block page_title %}Default title{% endblock %}&lt;/title&gt;`\n\nSave the file and go look at your index page in your browser. Now you title should look like this:\n\n\n\n\ntitle-pirate-cove\n\n\nBecause we changed this on base.njk it will apply to EVERY page on our site.\nNow we’ll update the {% block page_title %} on our index page so we can give it a unique title to this specific page. In doing this we are replacing the text that is in the “block page_title” in base.njk.\n\nIn your src/index.njk file, in the 3rd line of the file (after the “extends” code), add the following:\n\n{% block page_title %}Capt. McGillicutty's Ship's Log{% endblock %}\nNow your title looks like this:\n\n\n\nDefault title edited\n\n\nSo, we have “Pirate Cove |” on every page, and on this specific page we have replaced “Default title” with new title text in the {% block page_title %} block.\nThis concept will repeat again and again. We reserve space in a template, sometimes adding default content, and then we override it later when “extending” that template."
  },
  {
    "objectID": "sapp-02-templates.html#using-nunjucks-includes",
    "href": "sapp-02-templates.html#using-nunjucks-includes",
    "title": "25  Templates and blocks",
    "section": "25.5 Using Nunjucks includes",
    "text": "25.5 Using Nunjucks includes\nIncludes are bits of project code that we break off into it’s own file because we are reusing it, or just for organizational purposes.\nIf we look in our base.njk template at about line 13, we’ll see this code: {% include \"_includes/nav.njk\" %}. What an include does is when the browser renders the page, it takes all the code inside that nav.njk file and inserts it into that location in the template/page. It’s sorta like a “block” but dumber. We can’t overwrite it. But it is really handy to break up your code into logical files so you can find code later when your website gets complex.\nOur example here is the navigation for the website, which is saved in src/_includes/nav.njk. In maintaining a website, you’ll often go into the navigation and make changes, so it makes sense to put it in separate file where we can easily find it.\nLet’s update the Brand and a link to a new page we’ll add later.\n\nOpen src/_includes/nav.njk.\nFind the navbar-brand segment and update the text “Navbar” to “Pirate Cove”.\nAFTER the line that has &lt;ul class=\"navbar-nav\"&gt; (about line 8), add the following:\n\n      &lt;li class=\"nav-item\"&gt;\n         &lt;a class=\"nav-link\" href=\"{{ relative_path }}pirate-ships.html\"&gt;Pirate ships&lt;/a&gt;\n      &lt;/li&gt;\n      &lt;li class=\"nav-item\"&gt;\n         &lt;a class=\"nav-link\" href=\"{{ relative_path }}index-example.html\"&gt;Index example&lt;/a&gt;\n      &lt;/li&gt;\nYou might have to fix in indenting in some of the code block so it lines up with the &lt;/li&gt; that follows it.\nNow, if you look at your index in your browser, you’ll see we’ve added two new navigation links. One is to the original index example (so we can see it later), and the other is a new page that we will create later.\nYou might notice that we have this {{ relative_path }} in front of our URLs here in the nav. Not to get too far into it, but we will need that later when we create new web pages inside folders on our site. Those pages will need to understand where they are in relation to the index."
  },
  {
    "objectID": "sapp-02-templates.html#the-jumbotron",
    "href": "sapp-02-templates.html#the-jumbotron",
    "title": "25  Templates and blocks",
    "section": "25.6 The jumbotron",
    "text": "25.6 The jumbotron\n\n25.6.1 Add a new include\nIn our original Pirate Cove site, we had the cool header with a photo background. Let’s add that to this site as an include, similar to the nav.\n\nCreate a new file src/_includes/jumbotron.njk.\nInsert into it the following code:\n\n&lt;div id=\"jumbo\" class=\"p-5 mb-4 bg-light\"&gt;\n  &lt;div class=\"container-fluid py-5 text-center\"&gt;\n    &lt;h1 class=\"display-5 fw-bold\"&gt;Ship's Log&lt;/h1&gt;\n    &lt;p&gt;A diary by Capt. Crit 'Red Beard' McGillicutty&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\nNow that we have the include built, we can add it to the base.njk on a new line after the nav include:\n{% include \"_includes/jumbotron.njk\" %}\nIf you look at your browser now you should see the beginnings of a jumbotron, though it doesn’t quite look right with our photo and such as we haven’t added CSS to make it so. That is next.\n\n\n25.6.2 Add a Sass partial\nSince this project uses Bootstrap it also uses Sass for our CSS, and we’ll use it just like we did in our Bootstrap project. We need to create the CSS to give our jumbotron the background image we want.\n\nGo into src/scss/ and create a file called _jumbotron.scss.\nAdd this to your _jumbotron.scss file:\n\n#jumbo {\n  background: url(../img/pirate-ship.jpg) no-repeat center;\n  background-size: cover;\n  color: white;\n  padding-top: 12rem\n}\n\n#jumbo {\n  margin-bottom: 30px;\n}\nWe are creating this as a Sass partial to organize our code. Now you have to add this partial Sass file to the src/scss/main.scss.\n\nOpen src/scss/main.scss and at the imports at the bottom of the page, add one for the “jumbotron” file like the existing one for “nav”. Remember from our Sass lessons that on imports for partials, we don’t need the underscore or extension here as Sass assumes them.\n\n@import \"jumbotron\";\nYou should have a working nav and Jumbotron header for your site now."
  },
  {
    "objectID": "sapp-02-templates.html#adding-some-intro-text",
    "href": "sapp-02-templates.html#adding-some-intro-text",
    "title": "25  Templates and blocks",
    "section": "25.7 Adding some intro text",
    "text": "25.7 Adding some intro text\nNow we’ll add some intro text to our index. We’re not going to fret over the content itself, just the structure of what we are adding.\n\nIn your src/index.njk Find the content we added earlier: &lt;p&gt;Content goes here&lt;/p&gt; and remove it. In it’s place we are going to add something new.\n\nHere I want you to use Emmet to add a bootstrap row and column. This is a review of sorts of using Emmet. As you may recall, Emmet has a little language of its own to help us write code. In this case we want a div with a class of “row” and then inside of it another div with a class of “col”.\n\nType this into your file and then hit return: div.row&gt;div.col\n\nHere is a gif of what this looks like:\n\n\n\nstatic-emmet-gif\n\n\nOK, now inside this we are going to add an H1 and some text that would be the introduction to the site, but we’ll use lorem ipsum (fake text) just to get it done.\n&lt;h1&gt;A pirate's life is for me&lt;/h1&gt;\n&lt;p&gt;Hempen halter mizzenmast deadlights gaff pillage starboard jack lee Blimey draught. Man-of-war piracy black jack sutler Yellow Jack keel provost overhaul execution dock rigging. Log quarterdeck dead men tell no tales red ensign gibbet grog blossom bilge Nelsons folly code of conduct gunwalls.&lt;/p&gt;\n\nAdd the code inside the col div. Make sure all your indents are clean.\n\nWhat we’ve done here is add a Bootstrap row and col that will always span the page. It’s just placeholder text."
  },
  {
    "objectID": "sapp-03-loops.html#create-a-new-page",
    "href": "sapp-03-loops.html#create-a-new-page",
    "title": "26  Data and loops",
    "section": "26.1 Create a new page",
    "text": "26.1 Create a new page\n\nCreate a new page inside src/ called pirate-ships.njk.\nAdd the following code:\n\n{% extends '_templates/base.njk' %}\n\n{% block content %}\n&lt;article class=\"container\"&gt;\n  &lt;h1&gt;Ships of the Golden Age of pirates&lt;/h1&gt;\n  &lt;p&gt;Intro text here.&lt;/p&gt;\n&lt;/article&gt;\n{% endblock %}\n\nSave the file and then test your navigation link to make sure it works. If it doesn’t, make sure you created the new file in the right folder. It should be right next to index.njk."
  },
  {
    "objectID": "sapp-03-loops.html#lets-add-some-data",
    "href": "sapp-03-loops.html#lets-add-some-data",
    "title": "26  Data and loops",
    "section": "26.2 Let’s add some data",
    "text": "26.2 Let’s add some data\nOK, are you ready to jump into some advanced features here? We are going to introduce a concept where we have a Google Sheet to manage the editing of data, but then we’ll “fetch” that data into our project so we can use it in the next step.\n\n26.2.1 The data source: Google Sheets\nI have already created a Google Sheet of pirate data. Click on that link so you can take a look at it. Imagine you are in a newsroom and many reporters are gathering data for your project. You could share a Sheet like this with them and they could edit it and create new rows of data. It’s a good way to keep track of stuff.\nOur next trick is to tell our project here to download that data and format it in a way that we can use it. That file type we want in the end is called JSON, or JavaScript Object Notation. JSON is just “data” for JavaScript. There is a feature built into this project where we can download this data and translate it. One thing to know is the Google Sheet needs to be shared so that “anyone” can view it.\nHere we will “tell” this project about the Google Sheet.\n\nOpen the file in your project called project.config.json.\nAfter the closing } on line 12, we are going to add the following code:\n\n,\n    {\n      \"fileId\": \"1G-aJA1H5C-B05Hlpx2RiojYcsNNXQ5ntvUEArRZ5O6w\",\n      \"type\": \"sheet\",\n      \"name\": \"pirates\"\n    }\nThat first comma in the code above needs to come right after the } that closes out the “bookstores” configuration.\nThe fileId value there is from the URL of the Google Sheet. It’s the long string before /edit/ in the URL, and it is unique to for every Google Sheet (and Doc, for that matter.). The type is “sheet”. the other possible value is “doc”. We’ll do one of those later. The name is what we want the file to be called when it is downloaded.\nWhat we’ve done here is add to a “files” array in this JSON config file. This is a list of all the Google Sheets and Docs used in the project.\nBefore we can download the data we have to stop our browsersync process and run a new one to fetch our data.\n\nGo to your Terminal and do Control-C to stop the browsersync.\nRun gulp fetch. “gulp” is our command and “fetch” is our task.\n\nThe result of the command should download three files. (Two were already in the config – library & bookstores – and we just added the new one “pirates”.)\nThis downloaded all the files to the src/_data/ folder.\n\n\n\n\n\n\nTip\n\n\n\nIf you have a problem with gulp fetch and get an error, you can use these steps to download the data. Do that and then move on with the rest of the lesson, but reach out to me to see if we can fix the problem.\n\n\nGo ahead and open the files at src/data/pirates.json and peek at it. Here is just a snippet:\n{\n  \"ships\": [\n    {\n      \"ship_name\": \"Queen Anne’s Revenge\",\n      \"captain\": \"Edward \\\"Blackbeard\\\" Teach\",\n      \"blurb\": \"Edward \\\"Blackbeard\\\" Teach was one of the most feared pirates in history. In November 1717, he captured La Concorde, a massive French ship used to transport enslaved people. He refitted the Concorde, mounting 40 cannons on board and renaming her Queen Anne's Revenge. With a 40-cannon warship, Blackbeard ruled the Caribbean and the eastern coast of North America. In 1718, the Queen Anne's Revenge ran aground and was abandoned. In 1996 searchers found a sunken ship they believe to be the Queen Anne's Revenge in the waters off of North Carolina: some items including a bell and an anchor are on display in local museums.\",\n      \"source\": \"https://www.thoughtco.com/famous-pirate-ships-2136286\"\n    }\n  ]\n}\nInside this pirates.json file is an array called “ships”. Think of arrays as a collection of data. We could have more than one array in our file, but right now we only have one.\nInside our “ships” array we have eight items, one for each ship.\nEach item (or ship in our case) has objects that are in key:value pairs. Our first “key” is ship_name and our first “value” is \"Queen Anne’s Revenge\".\nI’ll try to keep all of these terms straight, but I admit I mix them up.\nThe key here is that we have downloaded this data, once we restart our dev environment the data will be “in context”, meaning our program will allow us to access it.\nIt’s probably easier to do it than explain it.\n\nRestart gulp dev.\nGo into your src/pirate-ships.njk file.\nAfter our &lt;p&gt; tag in the intro, add a new line and add this:\n\n&lt;h3&gt;{{ pirates.ships[0].ship_name }}&lt;/h3&gt;\nWhen the page refreshes you should see “Queen Anne’s Revenge” show up.\npirates is the name of the file. ships is the name of the array. [0] is the order of the item, and we want the first one. Remember JavaScript starts counting at zero. ship_name is the object we are pulling from the item.\nNow go back into your ships page and change the number to [1] instead of [0] and save it. What do you think the result will be? Go back look at the page and see. After you’ve seen the change, you can go ahead and remove the H3 and contents, as we don’t need it here. I just wanted to show how it works.\nSo now we have a list of pirate ships in our project “context” and can build a cool list of them. That is next."
  },
  {
    "objectID": "sapp-03-loops.html#loops-with-data",
    "href": "sapp-03-loops.html#loops-with-data",
    "title": "26  Data and loops",
    "section": "26.3 Loops with data",
    "text": "26.3 Loops with data\nOur aim here next is to use Bootstrap cards to create a list of pirate ships and their descriptions from our new data. If you open up those docs and peruse them you’ll see there are many different options and configurations. The one we are going to start with is Using grid markup.\n\nGo to the Using grid markup section in the docs and copy the code provided there.\nAfter the closing &lt;/p&gt; tag for the intro, add a new line.\nPaste your code. This already has the row and columns we need.\nSave your file and look at your page.\n\nIt should look like this:\n\n\n\nGrid cards added\n\n\nWe now have two cards on our page. Each card is in a column set at col-sm-6, so they show over six columns at small or larger. If you view on a phone, they will stack. By putting each card in a column like this, we can use the cols- controls to decide how many should display next to each other at each breakpoint.\nOur plan here is to have a card for each ship in our data. We could create eight columns/cards and use our data inside each card, but what if we add more ships to our data source later? Instead, we’ll create a loop that writes a new column/card for each ship in our data.\nOur Nunjucks templating system allows for loops like this because it is written in JavaScript. It might help to reference the Nunjucks documentation on “for” loops to see how they work.\nWe’re going to remove one of our new column/cards, but then set the remaining one to draw for each new ship in our data.\n\nIn the cards code, remove the one of the col/cards. It starts with &lt;div class=\"col-sm-6\"&gt; and totals 9 lines of code. You want to make sure you still have even opening and closing divs for everything. If you save at this point and look at your page, it should have only one card but otherwise be the same.\nAdd a new line after the closing of the &lt;div class=\"row\"&gt; line.\nAdd the following to the new line: {% for ship in pirates.ships %}\nAdd a new line right above the closing &lt;/div&gt; for the row.\nAdd the following to the new line: {% endfor %}\nSave your file and go look at your page.\n\nThat code should look like this, and descriptions follow:\n  &lt;div class=\"row\"&gt;\n    {% for ship in pirates.ships %} # &lt;1&gt;\n    &lt;div class=\"col-sm-6\"&gt;\n      &lt;div class=\"card\"&gt;\n        &lt;div class=\"card-body\"&gt;\n          &lt;h5 class=\"card-title\"&gt;Special title treatment&lt;/h5&gt;\n          &lt;p class=\"card-text\"&gt;With supporting text below as a natural lead-in to additional content.&lt;/p&gt;\n          &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Go somewhere&lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    {% endfor %}\n  &lt;/div&gt;\nNow you have eight cards! Let’s break down what we’ve done here.\nLet’s take this line: {% for ship in pirates.ships %}\n\n{%  %} indicates we are doing special stuff, just like we’ve done before with “blocks” and “extend”.\nfor means we are starting the loop.\nship is what we are calling a single pass through the data. We are “naming” that single item as a “ship” so we can refer later to key values in that row of data. We can use any word we want, but I always use a term logical to the data. We are looping through a bunch of ships, so a single one of those is a single “ship”.\nin pirates.ships is defining which array we are looping through. The “pirates” part is the file we are looking in, and “ships” is the name of the array inside that file.\nEverything after that will get repeated until we reach (% endfor %) which says STOP REPEATING.\n\n\n26.3.1 Update the headline\nAt this point you are thinking “That’s cool, Prof, but they are all the same.” Well, remember when I showed above that we can call data from an array? We’ll do that next, except we don’t have to specify the order from the array since we’ve named the current pass as a “ship”. We are now going to call that data in our loop.\n\nFor the headline in the &lt;h5&gt; text, replace “Special title treatment” with this: {{ ship.ship_name }}\nSave your file and go look at your page. Now you have a new ship name in each card.\n\nTo call a variable from our data, we use the double curly-brace: {{ }}. (This is opposed to {% %} which does other things).\nSince we named a single item a “ship” we use that, and then use the dot notation to call the object key : {{ ship.ship_name }}. I like to put spaces around the names for readability, but it is not required.\nOK, now admit that’s kinda cool, right?\n\n\n26.3.2 Update the blurb\nIf we look at our example JSON, we see the key for the description of the ship is called a blurb. So we can use the same style to replace the text in our code with the new value.\n\nGo into the code and replace the text inside the &lt;p&gt; tag with: {{ ship.blurb }}\nSave and check your page.\n\nNow you should be showing the description of each ship after the name of the ship.\n\n\n26.3.3 Update the source link\nWe have these big buttons that look like they could be a link to somewhere, which would be perfect to use to link to the webpage with more information about our ship. We’ll modify those next to add the URL, change the text and change the button display to a simple link.\n\nGo into the href of the button and replace the # with: {{ ship.source }}. This is the URL in our data that is the website where we got the info. We are inserting it into an href.\nRemove the class=\"btn btn-primary\" as that is what make the link into a button. (Which is cool, but we don’t need to draw that much attention to our source link.)\nReplace the text “Go somewhere” with simply “Source”.\nInside the href element, and an attribute to open the link in a new page: target=\"_blank\".\nSave your file and go check your page and make sure the links work properly.\n\n\n\n26.3.4 Adding the captain\nThe last thing we need is to add our captain into the card. We don’t have an HTML element to update from our Bootstrap code, so we’ll just add our own.\n\nAfter the &lt;h5&gt; line, add a new blank line.\nIn that new line, add an &lt;h6&gt; and fill it with the code necessary to display the captain’s name. Refer to the JSON example above to figure out what the key value is.\nSave and check.\n\n\n\n26.3.5 Adjusting columns for breakpoints\nThe cards example we pulled from the Bootstrap docs has just one column breakpoint set at col-sm-6 which gives us two cards per row. Let’s adjust that for larger screens to show three cards per row.\nRemember, we are working with a 12 column grid. When we set col-sm-6 that means that each card takes up six columns, which gives us the two cards. If at the large size we want three to a row, then we would want each card to take four columns. (12 / 3 = 4).\n\nOn the line that has &lt;div class=\"col-sm-6\"&gt;, add another class col-lg-4 so it looks like this: &lt;div class=\"col-sm-6 col-lg-4\"&gt;\nSave your file and look at your page.\nChange the width of your browser from wide to very small and watch the columns change.\n\nRemember another way to do this is to use the Inspector. Get the inspector, then click the little “mobile” icon and controls to show different types of mobile devices."
  },
  {
    "objectID": "sapp-03-loops.html#fix-some-display-nits",
    "href": "sapp-03-loops.html#fix-some-display-nits",
    "title": "26  Data and loops",
    "section": "26.4 Fix some display nits",
    "text": "26.4 Fix some display nits\nWe have all our content here, but let’s make it a bit nicer. The cards sit on top of each other and are different sizes. Let’s fix that with some Bootstrap spacing utilties.\n\nOn the class=\"card\" div, add another class so it is class=\"card mb-4\". We did the same thing in our Bootstrap lesson. m is margin, b is bottom and 4 is a value between 1-5.\nSave and check that you have vertical space between the cards."
  },
  {
    "objectID": "sapp-04-publish.html#base-styles-update",
    "href": "sapp-04-publish.html#base-styles-update",
    "title": "27  Make it pretty and publish",
    "section": "27.1 Base styles update",
    "text": "27.1 Base styles update\n\nThere is a margin on the bottom of the nav that is pushing down the jumbotron. There is a style in src/sass/nav.scss that you can remove to fix it."
  },
  {
    "objectID": "sapp-04-publish.html#index-updates",
    "href": "sapp-04-publish.html#index-updates",
    "title": "27  Make it pretty and publish",
    "section": "27.2 Index updates",
    "text": "27.2 Index updates\nFor these, you’ll need to do some documentation reading and exploration for the solutions.\n\nWhen viewed on a desktop, the intro text on the index is really wide and not very readable. Play with the column grid on the index so that the content uses full width on mobile, but fewer columns at the md and higher breakpoints. Look at the Columns: Horizontal alignment classes to make that content land in the center.\nGo back into the pirate ships page and then peruse the Bootstrap cards docs and look at how you can modify the look of those with colors and styles. Make them look a little nicer. Your choice, but make sure you can read the link text. You can use SCSS to change that color if you wish."
  },
  {
    "objectID": "sapp-04-publish.html#publish-and-check",
    "href": "sapp-04-publish.html#publish-and-check",
    "title": "27  Make it pretty and publish",
    "section": "27.3 Publish and check",
    "text": "27.3 Publish and check\n\nPush all your code to Github.\nUse Settings to set up Gihub Pages to use the master/docs directory.\nAdd your published link to your Gitub repo at the top."
  },
  {
    "objectID": "sapp-05-bake-explain.html#lets-review-the-example",
    "href": "sapp-05-bake-explain.html#lets-review-the-example",
    "title": "28  Baking detail pages",
    "section": "28.1 Let’s review the example",
    "text": "28.1 Let’s review the example\nGo back to your site and click on the “Index example” link we added to the nav. The page shows three different books at the top of the page. There is a link at the bottom of each book … click on those and gander at them.\nThis is a screen shot of one of those pages. (It’s a good book. Read it.)\n\n\n\nstatic page example\n\n\nAll of the individual book pages have the same structure: A book photo on the left, and on the right a headline and blurb about the book.\nAll the book pages were built from the same template, but the content is different. It’s much like amazon.com, where every item for purchase on the site has the same page structure, but the content is different depending on the item you are viewing.\nAll of these book pages were built automagically from a data source. Amazon works similarly, but pulls the item contents from a database. (It’s a little more complicated than that, but you get the idea.)\nHere’s how it works. We’ll work through it one step at at time:\n\n28.1.1 It starts with data\nThere is a Library books data Google Doc that is viewable to the public.\nTake a look at how that doc is structured. It uses a “language” called ArchieML developed by the New York Times. It allows authors to create structured text in a Google Doc and for that content to be converted into JSON, which is the “data format” for JavaScript. It’s not particularly hard to use (it was created for reporters, after all) but it takes some getting used to.\n\n\n\nArchieML example\n\n\n\nAt the top we have [books], which is names our array. (An “array” is a collection of data.)\nThen each group of lines listed here becomes new entry in our data. Each line starts with a key: and then is followed by a value. The values even support links that get converted to hrefs in our final product.\n\n\n\n\n\n\n\nNote\n\n\n\nThe second page of the Google Doc has some others examples of structured data, but we’ll skip those for now. Just know they are there.\n\n\nThis document is downloaded as data into our project when we run gulp fetch. It is “configured” in the project.config.json file where we earlier added our pirate ships Google Sheets data.\nIn the project.config.json the only difference in using a sheet vs doc is \"type\": \"doc\" vs \"type\": \"sheet\".\n\n\n28.1.2 Peek at the data\n\nGo ahead and open src/data/library.json.\n\nYou’ll see the books array near the top. That’s the only one we are worried about here, but you’ll also see the other example arrays there.\n\n\n\nData example\n\n\nNote how the key names and values match the ArchieML document example above.\n\n\n\n\n\n\nNote\n\n\n\nYou can use any properly-formatted .json file in this project template as long as it is in the src/_data folder; it doesn’t have to come from a Google Doc or Sheet. Those Google services just give us an easier way to share and edit our data.\n\n\n\n\n28.1.3 The bake template\nOK, so we understand the data, but how are we using it?\nThe baking feature in the project needs three things: The data (got it!), a template to build the pages from, and a configuration to match the data to the template.\n\nOpen up our example template in src/_templates/bake-book.njk so you can review it.\n\nThe first line {% extends '_templates/base.njk' %} gives us the structure of our site. We’ve seen that before.\nThe next line {% set relative_path = \"../\" %} is something we need to include because our generated book pages are created INSIDE another folder like this, books/the-shipping-news.html. (You might remember we included the {{ relative_path }} variable when we added navigation links earlier. To make a long story short, we need both of these things to make navigation links work from these pages.)\nThe next two lines are our page_title and page_description blocks to set those for each book page. You’ll notice that a variable pulling data like {{ title }} is inside those. What’s a little different here than in our pirate ship loop is we don’t have to name what file or array this is coming from. That’s because we handle it later in the project.config.json.\nThen we get to the “block content”. This has our page structure for each book page. It’s set up to be a basic two-column layout with the photo on the left and the text on the right. Note that there are data variables used throughout, assigning data to different places on the page. Again, we just need the “key” name because we define the file and array later.\nThe only other thing new here is {{ blurb | safe }} for the description of the book. blurb is the name of the key value, and the | safe part is something in Nunjucks called a “filter” that allows you to manipulate variable data in some way. In this case safe is allowing us to use HTML in our data, turning links in our Google Doc into hrefs that work.\n\n\n28.1.4 Lastly, the project.config\nIf you open our project.config.json back up and look at the array called \"to_bake\". This is where we define which template should be used with what data. Here is an example and description of each field:\n\"to_bake\": [\n    {\n      \"template\": \"bake-book\",\n      \"data\": \"library\",\n      \"array\": \"books\",\n      \"slug\": \"slug\",\n      \"path\": \"books\"\n    }\n  ]\n\ntemplate is the name of the template file stored in src/_templates that will be used to build the pages. Note you don’t need the extension in name.\ndata is the name of the data file to build from. You don’t need .json in the name.\narray is the name of the array you are using from the JSON file.\nslug is a key required from the data that will become the filename of each file created. The field used in the data needs to be in a URL-friendly format with all lowercase letters with dashes instead of spaces.\npath is an optional folder to save the files into. Use an empty string to save the files at the root of docs/.\n\n\n\n28.1.5 The generation\nWith these three things: The data, the template, and the config that brings them together, we can run gulp bake (or gulp dev) and a new page will be created in our destination folder for every item in our data. Whether there are three items or 300.\nPretty f’n cool, isn’t it? With a project like this you can create something like a restaurant guide with a unique page for every establishment, all while managing the data in a Google Sheet or Doc."
  },
  {
    "objectID": "sapp-06-bake-blog.html#the-blog-data",
    "href": "sapp-06-bake-blog.html#the-blog-data",
    "title": "29  Building our Ship’s log blog",
    "section": "29.1 The blog data",
    "text": "29.1 The blog data\n\nOpen this Pirate blog doc. As you do so, you’ll be asked to make a copy of your own, which I want you to do.\nClick on the Share button and make the document “viewable” to “Anyone with the link”. This has to be done to download the data into our project.\nLook at the structure of the data\n\nThe parts between :skip and :endskip are directions and examples for you.\nBelow that are three blog entries. The only difference between this and the books example is a new structure for [.+post] at the beginning of the blog text, which also has the ending []. This structure allows us to have clean paragraphs of text in our blog entries."
  },
  {
    "objectID": "sapp-06-bake-blog.html#config-the-data",
    "href": "sapp-06-bake-blog.html#config-the-data",
    "title": "29  Building our Ship’s log blog",
    "section": "29.2 Config the data",
    "text": "29.2 Config the data\n\nOpen your project.config.json file.\nIn the files array, we need to add a new value. You can copy/paste one of the other examples, but make sure you include the comma that separates each entry.\n\nUpdate the fileID with the ID of your new Google Doc. It’s the part of the URL just before /edit/.\nSet the type as “doc”.\nSet the name as “blog”.\n\nSave the file.\nIn your Terminal, quit browsersync with Control-c.\nRun gulp fetch.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you had problems with gulp fetch before and went through these steps then you already have the data and can move on. But do reach out to me so we can fix it.\n\n\nThe gulp fetch process should now download four files, and “blog” should be one of them. If it doesn’t work, read the error. If it says something about “Unexpected token” or “parse error”, then it’s likely your project.config.json file is not configured properly. If it says something like “The caller does not have permission”, then you haven’t set your Google Doc to be “viewable” to “Anyone with the link”."
  },
  {
    "objectID": "sapp-06-bake-blog.html#create-the-bake-blog-template",
    "href": "sapp-06-bake-blog.html#create-the-bake-blog-template",
    "title": "29  Building our Ship’s log blog",
    "section": "29.3 Create the bake-blog template",
    "text": "29.3 Create the bake-blog template\nNow that we have data, we need to create our template. Because baking templates are a bit special, I like to name them with the word “bake-” so I know what they are being used for.\n\nCreate a new file in src/njk/_templates/ called bake-blog.njk.\nPut the following code inside the template and save it. I’ll explain it after.\n\n{% extends '_templates/base.njk' %}\n{% set relative_path = \"../\" %}\n{% from '_macros/prose.njk' import prose %}\n\n{% block page_title %}{{ headline }}{% endblock %}\n\n{% block page_description %}{{ headline }} by Capt. Crit McGillicutty{% endblock %}\n\n{% block content %}\n  &lt;article class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-sm-4\"&gt;\n        &lt;img src=\"../img/pirate.jpg\" alt=\"pirate character\" class=\"img-fluid\"&gt;\n        &lt;p class=\"byline\"&gt;By Crit McGillicutty&lt;br&gt;\n        &lt;span&gt;Island Breeze Tribune&lt;/span&gt;&lt;/p&gt;\n        &lt;hr class=\"d-sm-none\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"col-sm-8\"&gt;\n        &lt;img src=\"../img/{{ image }}\" alt=\"\" class=\"img-fluid mb-4\"&gt;\n        &lt;h1&gt;{{ headline }}&lt;/h1&gt;\n        {{ prose(post) }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/article&gt;\n{% endblock %}\nThis code is very similar to the bake-books.njk template with these exceptions:\n\n{% from '_macros/prose.njk' import prose %} near the top of the file is something we need to process our multi-paragraph blog post.\n{{ prose(post) }} is the variable to pull that post data. We are wrapping that “post” data in the prose macro to create a new &lt;p&gt; tag for each paragraph.\nAlso note the src tag for the images. They have to include ../img/ as part of the path because we’ll be building these pages inside a blog/ directory, and the photos are in the parent directory inside an img/ folder.\n\nAll that code was pre-written because this is a common thing we have to do in projects. All you need to do is to remember that when you use multiple paragraphs you have to format your original Google Doc correctly (with the [.+tag_name] thingy), to include the macro, and to wrap the item in prose(tag_name)."
  },
  {
    "objectID": "sapp-06-bake-blog.html#marry-the-data-to-the-template",
    "href": "sapp-06-bake-blog.html#marry-the-data-to-the-template",
    "title": "29  Building our Ship’s log blog",
    "section": "29.4 Marry the data to the template",
    "text": "29.4 Marry the data to the template\nNow it’s time to match these two things in our our config file.\n\nOpen the project.config.json file.\nIn the to_bake array, add another item like the existing one, making sure that you have a comma between them.\n\n    {\n      \"template\": \"bake-blog\",\n      \"data\": \"blog\",\n      \"array\": \"blogs\",\n      \"slug\": \"slug\",\n      \"path\": \"blog\"\n    }\nNote the differences in the key values. Review these key values and compare them to the books example. All the values are new (though we used the term “slug” in both data sets).\nWith this configuration, we will create our new pages inside a folder called “blog”, and each page will be named using the slug value – which is a url-friendly date in our data – so the pages will end up something like blog/2019-10-18.html."
  },
  {
    "objectID": "sapp-06-bake-blog.html#lets-bake",
    "href": "sapp-06-bake-blog.html#lets-bake",
    "title": "29  Building our Ship’s log blog",
    "section": "29.5 Let’s bake",
    "text": "29.5 Let’s bake\nOK, now it’s magic time. We have to restart our dev environment to get everything baking.\n\nIn your Terminal, quit browsersync.\nRun gulp dev.\nIf you look in your docs/ folder, you should see a new blogs/folder with two pages inside.\nIn your browser, you should be able to modify the URL to be http://localhost:3000/blog/2019-10-18.html and see the first blog post. (Your number after localhost: might be different, though.)"
  },
  {
    "objectID": "sapp-06-bake-blog.html#add-a-blog-loop-to-the-index",
    "href": "sapp-06-bake-blog.html#add-a-blog-loop-to-the-index",
    "title": "29  Building our Ship’s log blog",
    "section": "29.6 Add a blog loop to the index",
    "text": "29.6 Add a blog loop to the index\nNow it’s time to include a list of our blog entries on the index page. You’ll use what you’ve learned about loops when you did the pirate ships and then apply them here. I’ll guide you a little, but I want to you to think a bit about it on your own.\nI’d like you to build a list of blog entries on the home page, and include the date of the entry, the headline and link to the blog entry. Here are some hints and things to think about.\n\nYou have the blog data in context to use in a “for” loop. You are pulling from blog.blogs.\nYou can build the HTML within the loop and use the data variables to get the headline, date and slug. The slug can be used to build the href to the blog entry. Just think about the path of where the blogs posts are relative to the index. The pages end in .html.\nIf you build the loop in the same row/col as your intro text, then it will be the same width as that and look pretty decent.\n\nThe “look” of these are up to you. You might keep it simple."
  },
  {
    "objectID": "sapp-06-bake-blog.html#add-a-new-blog-entry",
    "href": "sapp-06-bake-blog.html#add-a-new-blog-entry",
    "title": "29  Building our Ship’s log blog",
    "section": "29.7 Add a new blog entry",
    "text": "29.7 Add a new blog entry\nOnce you have your index blog post loop going, I want you to add another blog to your Google Doc and fetch it into your project. Some thoughts on that:\n\nThere is a template at the top of the Doc. You can copy/paste that below the :endskip and fill it out.\nSet the slug as 2019-10-20.\nUse the kraken03.jpg photo.\nAdd your own pirate ipsum or write something yourself, but use multiple paragraphs.\nYou’ll need to quit your browsersync and use gulp fetch to get the updates. Once you run gulp dev again you should see the new entry."
  },
  {
    "objectID": "sapp-06-bake-blog.html#clean-up-and-republish-to-github",
    "href": "sapp-06-bake-blog.html#clean-up-and-republish-to-github",
    "title": "29  Building our Ship’s log blog",
    "section": "29.8 Clean up and republish to Github",
    "text": "29.8 Clean up and republish to Github\nLet’s finish this out.\n\nClean up _includes/nav.njk to remove the bits about the example index and the Library books, since we aren’t using those. You might peruse that books list while you are there, as it is another example of using loops.\nMake sure all your pages have a good page title and page description. Remember that you update this using a block page_title and block page_description.\nCommit everything and push it again to Github. Make sure your site works well on the published link, as sometimes issues arise in publishing that are not apparent in your dev environment.\nTurn in your Github repo link to the Canvas assignment.\n\nYour done!"
  },
  {
    "objectID": "fp-00-intro.html#requirements",
    "href": "fp-00-intro.html#requirements",
    "title": "30  Your final project",
    "section": "30.1 Requirements",
    "text": "30.1 Requirements\nThe project should include:\n\nAn index, detail pages and additional content as outlined below.\nA base layout that is extended throughout the project.\nAt least one new Nunjucks include that is used in another layout. (A good project will have several.) This is beyond the nav and footer includes already present.\nThe project must use the following Bootstrap components and concepts:\n\nResponsive design and images used throughout.\nA hero display header that includes a background image. (At least on the index.)\nA Navbar that links to detail pages based on a loop from the data, in addition to any other pages you might have.\n\nYou must add at least one scss partial with your Sass code. (A good project would have several.) Again, beyond the examples already in the project.\nYou must use at least one Google Font somewhere. (Here is help on how.)\nRemove any unused files related to the example book pages.\nThis project should be in its own repo with the site published through Github Pages.\n\n\n30.1.1 Index page\nIn addition to the basic site structure, the index should have:\n\nA short description of the website. You can write this yourself or pull from public domain content and link back to the source.\nA “tease” to each of the “baked” detail pages outlined below, built from data using a Nunjucks loop. The tease should include at least an image and link to the detail page. You could do use Bootstrap Cards or your own HTML design as long as you use the images and data in a Nunjucks loop.\n\n\n\n30.1.2 “Baked” detail pages\nEach collection includes assets to “bake” a set of detail pages from a data source. The concept is explained in the icj-project-rig README page and covered in the static-apps lesson.\nThe layout for these detail pages should include:\n\nAt least two columns that stack on mobile but render next to each other at a larger page width. (This is basic Bootstrap grids.)\nUse all the data values on the detail pages, including a photo.\n\nYou can otherwise design the above however you wish.\n\n\n30.1.3 Additional content loop\nIn addition to data for the “baked” detail pages, there should be at least one other data used in each project. You must build a display (either a stand-alone page or an include inserted into the index) that uses all the elements from the additional data.\nYou are required to use a Nunjucks loop in the construction of this page or include.\n\n\n30.1.4 Extra credit options\n\nThe pre-set projects include data that coudl be used in a responsive table or a data table. You can build the table on a stand-alone page or pull into another through an include.\nSome asset collections have an option for an interactive chart or feature. Details in the collections descriptions.\n\nIf you are doing your own project and have a similar type idea for extra credit, talk to your instructor."
  },
  {
    "objectID": "fp-00-intro.html#available-assets-collections",
    "href": "fp-00-intro.html#available-assets-collections",
    "title": "30  Your final project",
    "section": "30.2 Available assets collections",
    "text": "30.2 Available assets collections\n\n30.2.1 Queen band website\nThis idea is to build a website for the band Queen using the original members and studio albums.\n\nA collection of photos in the  img-queen.zip archive. There are three collections of photos you’ll want to put in the src/img folder:\n\nBand photos\nBand members\nAlbum covers\n\nData stored in the Queen data Google Sheet. Make a copy of that file for your own Google Drive account and share it as “Anyone who has the link can view”. You can then configure “fetch” to download the data into your src/data folder. About the data:\n\nmembers is the data to use for “baked” pages.\n\nThis data includes a slug field that you will need in your baking config.\nThe description field is a several paragraph description of the band member, in HTML. You can use the safe tag in your template to use as HTML, like this: {{ description | safe }}.\n\ndiscography is the data to use for the “additional content” part of the assignment. It’s a list of all the studio albums.\ntour is an EXTRA CREDIT opportunity where you can build a table of tour dates using a loop.\nbillboard is an EXTRA CREDIT opportunity where you can build interactive chart using Datawrapper and the spreadsheet data and then embed it somewhere on your site. Datawrapper’s free version is fairly easy and will work fine for this. You can use either the “Weeks on chart” or “Top position” field as you prefer.\n\n\n\n\n30.2.2 Austin tourism site\nThis idea is to build a tourism microsite similar to what a local news organization might do.\n\nA collection of photos in  img-austin.zip archive. There are three collections of photos you’ll want to put in the src/img folder:\n\nAustin wallpaper photos and logos\nLandmarks\nRestaurants\n\nThe Google Sheet Austin Project Data. Make a copy of that file for your own Google Drive account and share it as “Anyone who has the link can view”. You can then configure “fetch” to download the data into your src/data folder. This data includes:\n\nlandmarks is the data you use for your “baked” detail pages.\n\nThis data includes a slug field that you will need in your baking config.\nThe description field is a several paragraph description of the location, in HTML. You can use the safe tag in your template to use as HTML, like this: {{ description | safe }}.\n\nactivities is optional EXTRA CREDIT data where you can build a table from the data.\nmurals is optional EXTRA CREDIT. (You could make another table or even a map with Batchgeo.com, Datawrapper or some other service?)\n\nThe Google Doc Austin restaurants data is the “additional content” data for this collection. Make a copy of that file for your own Google Drive account configure it for download like the sheet above.\n\nWith this data you’ll make a display of popular restaurants.\nFor EXTRA CREDIT, add THREE new restaurants to the Google Doc list using the same notation. You’ll need to find and add the photos, too.\n\n\n\n\n30.2.3 Downloading data from Google Drive\nSee the icj-project-rig README section on “Using data from Google Drive” to see how to configure and download the data from the Google Sheets or Docs."
  },
  {
    "objectID": "fp-00-intro.html#strategies-on-how-to-tackle-a-project",
    "href": "fp-00-intro.html#strategies-on-how-to-tackle-a-project",
    "title": "30  Your final project",
    "section": "30.3 Strategies on how to tackle a project",
    "text": "30.3 Strategies on how to tackle a project\n\nLook through the photos and data assets so you know what you have to work with.\nPhysically draw out what you want your pages to look like so you have a goal in mind. (There is a first assignment to provide sketches.) Think first how it will look on a phone, then a tablet, then a desktop screen. Draw each version out.\nSet up your assets: photos and fetching data.\nWork on the structure before the design. Basically get the template structure and HTML/Bootstrap elements on the page. Again, consider mobile first and then wider page widths.\nThen work on the loop logic for that part of the assignment. Get the loops working first (just printing an element to the page). Next figure out your HTML structure of the element, then use the loop for the part that should repeat.\nFor the “baking” pages, set up a simple layout and then configure the baking task in project.config.json. Once you get the pages building with data, then continue working on the structure and design of the page.\nOnce all the structure and logic are set, you can then make it all look pretty with HTML/CSS adjustments.\n\nRemember: Think mobile first, then adjust for larger screen widths."
  },
  {
    "objectID": "fp-00-intro.html#deadlines",
    "href": "fp-00-intro.html#deadlines",
    "title": "30  Your final project",
    "section": "30.4 Deadlines",
    "text": "30.4 Deadlines\nCanvas is the final word on deadlines, but in general they are in this order:\n\nA sketch of your index and detail layouts, including mobile, tablet and desktop views.\nA check-in on your HTML templates and data. It’s best to get all your logic working before you start styling it. I’ll also be checking for responsive design (i.e., different column widths for different screen widths.)\nA check-in on your CSS. You don’t have to be finished, but this allows me to offer some feedback.\nOn our last class day, you’ll show your progress to everyone. You should publish what you have so far to Github Pages so we can review it in class.\nFinal deadline for the project when I pull a copy of your repo for grading."
  },
  {
    "objectID": "fp-00-intro.html#important-notes-about-using-data",
    "href": "fp-00-intro.html#important-notes-about-using-data",
    "title": "30  Your final project",
    "section": "30.5 Important notes about using data",
    "text": "30.5 Important notes about using data\n\n30.5.1 Loops\nOn your index, you should use a Nunjucks {% for thing in file_name.array_name %} loop like the books example to create your teases to your detail pages. You should use a similar loop for “additional content” loop.\nA strategy to use is this: Before you add loop logic, figure how you want the multiple elements to look, then figure out the part of that code that repeats over and over. Your loop should go around that part, then use the data variables to fill in the content.\n\n\n30.5.2 Creating the “baked” pages\nThe method to create the “baked” detail pages are outlined in the icj-project-rig README.\n\nYou’ll need to create a layout similar to the example src/njk/_layouts/bake-book.njk. This layout will be used to create each individual page from the data.\nYou’ll use either the members array from the Queen data or the landmarks array from the Austin data to build your pages.\nFollow the README directions to configure to_bake commands in the project.config.json file."
  },
  {
    "objectID": "fp-00-intro.html#working-around-gulp-fetch",
    "href": "fp-00-intro.html#working-around-gulp-fetch",
    "title": "30  Your final project",
    "section": "30.6 Working around Gulp Fetch",
    "text": "30.6 Working around Gulp Fetch\nFor my students on PCs with OneDrive who can’t fetch data, I want you to set up the Google Docs files and project.config.json files all as if it will work."
  },
  {
    "objectID": "a-project.html#overview-of-the-steps",
    "href": "a-project.html#overview-of-the-steps",
    "title": "Appendix A — How to start a project",
    "section": "A.1 Overview of the steps",
    "text": "A.1 Overview of the steps\nThese are the overall steps in case you just need reminders of the order. A more detailed breakdown follows.\n\nCreate a new folder for your project inside your icj folder. (You can use your regular computer operating system to do this.)\nLaunch VS Code.\nUse File &gt; Open folder to then find and choose the folder you created.\nCreate a README.md file.\n\nUsing Markdown, add a headline with the project name. Add text with your name and the due date of the project.\nSave the file.\n\nCreate a .gitignore file.\n\nUse gitignore.io to create the contents of your gitignore file. Use the values “macOS”, “Windows” and “VisualStudioCode” and Create. Copy the contents into the file you created.\nSave the file.\n\nCommit your local files. In your Terminal do the following:\n\ngit init to initialize git.\ngit add . to add all the files to stage.\ngit commit -m \"initial commit\" to commit the files.\n\nGo to Github.com and add a New Repository.\n\nName it the same as your local folder.\nDO NOT include the README or .gitignore files.\n\nOnce created, review the lines of code Github suggests:\n\nMake sure under “Quick setup — if you’ve done this kind of thing before” that the SSH button is selected (that the SSH button is grey and that the line of code next to is starts with git@github and NOT https.)\nFind the second block of code options “…or push an existing repository from the command line” and copy the first line of code show there that starts with git remote add.\n\nBack in VS Code:\n\nIn your Terminal in VS Code, paste in the line of code and run it.\nType and run the commenad git push origin main.\n\n\nYou are now ready to complete the rest of the assignment. You can use the git cycle to commit any further changes."
  },
  {
    "objectID": "a-project.html#the-git-cycle",
    "href": "a-project.html#the-git-cycle",
    "title": "Appendix A — How to start a project",
    "section": "A.2 The git cycle",
    "text": "A.2 The git cycle\nAs you work through the project, use the git cycle to save your code to your local machine, then push those changes to Github.\n\ngit status tells you where you are in the it cycle.\ngit add . adds all changed files into your stage\ngit commit -m \"Your message\" commits your changes to your computer.\ngit push origin main pushes your local changes to Github."
  },
  {
    "objectID": "a-project.html#a-very-detailed-version-of-starting-a-new-project",
    "href": "a-project.html#a-very-detailed-version-of-starting-a-new-project",
    "title": "Appendix A — How to start a project",
    "section": "A.3 A very detailed version of starting a new project",
    "text": "A.3 A very detailed version of starting a new project\nThis is the same as above, but with more detail, description and visuals.\n\nA.3.1 Create your project folder\nI find it easiest to create the folder using your computer’s operating system: macOS | Windows.\nCreate this folder inside you Documents/icj so you always know where your code is for this class.\n\nThe assignment will guide you on how to name the folder.\nAlways start the folder name with your own name.\nUse all lowercase letters. It’s just helpful.\nUse dashes instead of spaces in the name. It’s helpful, and depending on the project the folder name can end up being part of a URL.\n\nA good example:\nchristian-project-name\n\n\nA.3.2 Open the folder in VS Code\nOpening the folder in VS Code will make sure that your computer knows where all the files are relative to that folder.\n\nLaunch VS Code\nYou might close any windows that might still be open.\nGo to File &gt; Open Folder, find your folder and select it, then click Open.\nOnce the folder opens, the document tray should show the folder name.\n\n\n\n\nFolder name\n\n\n\n\nA.3.3 Create your README\nHere is a reminder of why we make a README file.\nI find the easiest way to create a new file is to use the Terminal. There are many other ways, but touch is the best all-around way.\n\nIf your Terminal isn’t open already, go to Terminal &gt; New Terminal.\nDo touch README.md\n\nThis will create the file and you’ll see it in the Document tray.\nFor this class, I want to to at least include this information in your README, adjusted based on the project, of course.\n\n# The project name\n\nBy Your Name\n\nThe project is due on Month Day Year.\n\n\nA.3.4 Create the .gitignore file\nThe .gitigore tells git to ignore certain files your computer will create but don’t need to be committed to the repository.\n\ntouch .gitignore will create the file.\nIn a browser, go to gitignore.io\nInsert the following values: macOS, Windows, VisualStudioCode.\n\n\n\n\ngitignore values\n\n\n\nHit Create.\nCopy all the text from the resulting window.\nPaste it into your .gitignore file in VS Code. Save the file.\n\n\n\nA.3.5 Commit your local files\nIt’s now time to use the parts of the git cycle to commit your files to your local machine, but first we have to tell git that we want to by initializing it.\n\ngit init to initialize the project.\ngit add . to add all the files to stage.\ngit commit -m \"First commit\" to save the files.\n\nWe have to create and connect to Github before we can push them.\n\n\nA.3.6 Create your Github repo\nNow we create the repo in Github so we can connect to it.\n\nGo to Github.com in a browser and log in if you aren’t already.\nAt the top right of the page is a big + sign. Click on that and choose New repository.\nFor the repository name, I recommend you use the same name as you used for your local folder. Like christian-project-name.\nThe Description is optional.\nKeep it Public.\nDO NOT use the README or gitignore options.\nClick the Create repository button.\n\nOnce you create the repo, you’ll get a page back with a lot of code.\n\nMake sure the SSH button is selected in the top box.\nGo to the second block “…or push an existing repository from the command line” copy the first line of code there and then run it in your VS Code Terminal.\n\n\n\n\nConnect to Github\n\n\nUse git push origin main to push your code.\nIf you want to make sure it worked, go back to your browser and refresh the page and you should see your files there.\nYou should now be ready to continue with the assignment."
  },
  {
    "objectID": "a-project.html#using-degit",
    "href": "a-project.html#using-degit",
    "title": "Appendix A — How to start a project",
    "section": "A.4 Using degit",
    "text": "A.4 Using degit\nSome class projects begin with a set of template files that already include a README and gitignore file. In this case, we create the folder on our hard drive, but use the degit command to download all our needed files.\n\nCreate your project folder inside the icj folder.\nLaunch VS Code and open the folder.\ndegit utdata/template-name will download all the files into your folder. BUT YOU’LL WANT TO USE THE CORRECT TEMPLATE NAME.\ngit init will initialize the repo\ngit add . to add the files\ngit commit -m \"first commit to save the files.\nCreate your repo in Github.com.\nCopy the first line within the second block and run it.\nUse git push origin main to push your changes.\n\nYou should be ready to continue with the assignment."
  },
  {
    "objectID": "a-google-fonts.html",
    "href": "a-google-fonts.html",
    "title": "Appendix B — Using Google Fonts",
    "section": "",
    "text": "Using Google Fonts used to be more intuitive than it seems to be now. This is a super quick primer on how do to it.\n\nGo to Google Fonts.\nYou might type something into the preview window so the preview words make sense, like “The quick brown fox jumps over the lazy dog.”\nBrowse or search for a font you want. You can use the filters to find certain types of fonts.\nOnce you find something you like, click on the font page so you can see all the styles available.\nClick on the + symbol to add the font to your selections.\n\n\n\n\nfonts-select\n\n\nRepeat this for all the font and font styles you want, but be selective. Don’t choose fonts you won’t use, and don’t use too many. (Each font increases your page size, slowing down your site.)\nOnce you have selected all your fonts, if the tray on the right is not open already, click on the box-like icon at the top right to open it.\n\n\n\nfonts-tray\n\n\nAll your selected fonts will be rolled together into the &lt;link&gt; lines shown.\n\nCopy those &lt;link&gt; lines and put them on each HTML page (or template) that will use the fonts.\nIn your CSS styles file, write rules that specify the font as needed.\n\nThe “CSS rules to specify families” example in Google Fonts shows you how to write each individual font as part of a style rule. Realize this is just part of the style rule. If you want to apply this Roboto font to all H1 elements, you would write in your CSS like this:\nh1 {\n  font-family: 'Roboto', sans-serif;\n}"
  },
  {
    "objectID": "a-fetch-problems.html",
    "href": "a-fetch-problems.html",
    "title": "Appendix C — If you have gulp fetch problems",
    "section": "",
    "text": "Part of the static-apps lesson uses an API to talk to Google Drive to download some files. If you have trouble with gulp fetch command and it doesn’t work, then you can manually download the data.\n\nIn your Terminal, use Cntl-C to quit the Browsersync session.\nClick on this link to download the data:  data.zip\nExpand the zip file and put the four files inside the src/_data folder.\nRestart gulp dev.\n\nThis will make the data available in your project."
  },
  {
    "objectID": "a-macos-shell.html",
    "href": "a-macos-shell.html",
    "title": "Appendix D — Change Mac shell to bash",
    "section": "",
    "text": "Mac Catalina changes the default shell program from Bash to zsh. While zsh is probably fine, let’s change the default shell program to Bash for consistency. This is how to do it:\n\nChoose Apple menu  &gt; System Settings, then click Users & Groups.\nClick the lock, then enter your account name and password.\nControl-click your user name in the list of users on the left, then choose Advanced Options.\nChoose a shell from the ”Login shell” menu, then click OK to save the changes.\n\n\n\n\nDefault to bash\n\n\n\nClick OK and close the System Preferences window.\nClose any Terminal windows you have open and restart them."
  },
  {
    "objectID": "a-bash-files.html#goal",
    "href": "a-bash-files.html#goal",
    "title": "Appendix E — Bash files",
    "section": "E.1 Goal",
    "text": "E.1 Goal\nLet’s learn some more command-line juju for working with files. These commands will help look at code files on your computer."
  },
  {
    "objectID": "a-bash-files.html#set-up",
    "href": "a-bash-files.html#set-up",
    "title": "Appendix E — Bash files",
    "section": "E.2 Set up",
    "text": "E.2 Set up\nLet’s make sure we are in our class folder. (This is review from Moving Around).\n\nMake sure you are in your icj project folder:\n\ncd ~/Documents/icj\n\nCreate a new folder called myproject:\n\nmkdir myproject\n\nUse cd to move inside the myproject folder then use pwd to make sure you are in the right place. The result should be something like this:\n\n$ cd\nUsers/ccm346/Documents/icj/myproject"
  },
  {
    "objectID": "a-bash-files.html#curl",
    "href": "a-bash-files.html#curl",
    "title": "Appendix E — Bash files",
    "section": "E.3 curl",
    "text": "E.3 curl\nWe need some text to work with, so we’re going to pull down some text from Github. I might as well explain what we are doing.\ncurl is a command to transfer files. I think of it as “Capture URL”. We need to give curl a couple of flags (or options) for this job:\n\n-L stands for “Location”. It allows curl to follow a URL if it is redirected.\n-o for “output”. So we can write this to a file (which we are calling data.csv) instead of our terminal window. (We could use -O instead to just use the current file name.)\n\n\n\n\n\n\n\nWarning\n\n\n\nThis URL below needs to be updated\n\n\ncurl -L -o data.csv https://raw.githubusercontent.com/utdata/icj-class/main/resources/data_example.csv\nOK, now we should be able to ls and see our file is there. My output looks like this:\n$ ls\ndata.csv"
  },
  {
    "objectID": "a-bash-files.html#head",
    "href": "a-bash-files.html#head",
    "title": "Appendix E — Bash files",
    "section": "E.4 head",
    "text": "E.4 head\nhead allows you to print the top of a file to your screen so you can see what it is. It will default to show you the first 10 lines of a file. When you type this in, hit tab after you type “head da” to let tab completion help you.\nhead data.csv\nwill give you this:\n$ head data.csv\nQuarter,Taxpayer Number,Taxpayer Name,Taxpayer Address,Taxpayer City,Taxpayer State,Taxpayer Zip Code,Taxpayer County,Outlet Number,Location Name,Location Address,Location City,Location State,Location Zip Code,Location County,Location Room Capacity,Location Tot Room Receipts,Location Taxable Receipts\nQ1,32051871906,DSN HOSPITALITY LLC,4710 S LAMAR BLVD,AUSTIN,TX,78745,227,00001,DSN HOSPITALITY LLC,3110 STATE HIGHWAY 71 EAST,AUSTIN,TX,78745,011,37,91205.03,90870.01\nQ1,32054409241,JEANETTE WELSHE,13801 EVERGREEN WAY,AUSTIN,TX,78737,105,00001,BED AND BREAKFAST,13801 EVERGREEN WAY,AUSTIN,TX,78737,105,4,5417.92,5417.92\nQ1,32047098168,AMY MARIE CAPUTO,13601 PAISANO CIR,AUSTIN,TX,78737,105,00001,FLORA PROPERTIES/AMY M. CAPUTO,13601 PAISANO CIR,AUSTIN,TX,78737,105,4,7280.23,7280.23\nQ1,32055460730,NATHANIEL R BAUERNFEIND,163 KINLOCH CT,AUSTIN,TX,78737,105,00001,NATHANIEL R BAUERNFEIND,163 KINLOCH CT,AUSTIN,TX,78737,105,1,4735.0,4735.0\nQ1,32049290466,SHARON K FOSTER,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,00001,NUTTY BROWN CABIN,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,1,1030.0,1030.0\nQ1,32049290466,SHARON K FOSTER,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,00003,NUTTY BROWN MANOR,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,1,2100.0,2100.0\nQ1,32049290466,SHARON K FOSTER,12932 NUTTY BROWN RD APT C,AUSTIN,TX,78737,105,00004,\"ROADRUNNER'S BUNGALOQ\",12932 NUTTY BROWN RD,AUSTIN,TX,78737,105,1,0.0,0.0\nQ1,32020638758,LESLIE K RENFRO,12803 SHOSHONI TRL,AUSTIN,TX,78737,105,00002,THISTLE HILL STUDIO,12803 SHOSHONI TRL,AUSTIN,TX,78737,105,1,871.0,871.0\nQ1,32050668345,\"TIPPING T, LLC\",4405 MANZANILLO DR,AUSTIN,TX,78749,227,00001,TIPPING T,13127 FITZHUGH RD,AUSTIN,TX,78736,105,1,9427.0,9427.0\nIt might look like more than 10 lines on your screen because they wrap.\nIf you want to specify how many lines to display, use the flag -n for number of lines:\nhead -n 2 data.csv\nThat will give you two lines, the first which is the header of that file."
  },
  {
    "objectID": "a-bash-files.html#tail",
    "href": "a-bash-files.html#tail",
    "title": "Appendix E — Bash files",
    "section": "E.5 tail",
    "text": "E.5 tail\ntail shows you the bottom of the file. It takes the same -n flags.\ntail data.csv\nThat result won’t show you the header, because you are looking at the last 10 lines of the file."
  },
  {
    "objectID": "a-bash-files.html#wc",
    "href": "a-bash-files.html#wc",
    "title": "Appendix E — Bash files",
    "section": "E.6 wc",
    "text": "E.6 wc\nwc I think of as “word count”, but it can also count lines and bytes.\nwc data.csv\ngives you this output:\n$ wc data.csv\n     100    1136   15642 data.csv\nThe first column is number of lines, then the number of words, then bytes.\nIf you want just the number of lines, us -l.\nwc -l data.csv"
  },
  {
    "objectID": "a-bash-files.html#cat",
    "href": "a-bash-files.html#cat",
    "title": "Appendix E — Bash files",
    "section": "E.7 cat",
    "text": "E.7 cat\ncat means to concatenate and print a file to your window. If you feed it two file names, it will give you the first, then the other. Do this:\ncat data.csv\nThis will print the contents of data.csv to your screen. It’s showing all 100 lines.\nBut what you can do is redirect that output into a file by using &gt;. Do this.\ncat data.csv &gt; file01.csv\nWhat you’ve done is take the contents of data.csv, printed the contents and then redirected that content into another file called file01.csv. Since that didn’t exist already, it was created on the fly.\nIf I wanted to take two files, file01.csv and file02.csv, and then combine them into a single file on your computer, it would look like this. (You don’t have to do these commands, just understand them.):\ncat file01.csv file02.csv &gt; combined.csv\nNow, combined.csv would be the combination of both files."
  },
  {
    "objectID": "a-bash-files.html#grep",
    "href": "a-bash-files.html#grep",
    "title": "Appendix E — Bash files",
    "section": "E.8 grep",
    "text": "E.8 grep\ngrep is for using regular expressions to find patterns within a file. It takes a regular expression input and the file name and gives in return the lines of the file that match that regular expression.\ngrep 'ATX INVESTMENTS' data.csv\n… will print out just the lines in data.csv that have ‘ATX INVESTMENTS’ somewhere in them. Note that the name in the field is ‘ATX INVESTMENTS LLC’ but it found it with just part of that.\nIf you want to just know how many lines there are with ‘ATX INVESTMENTS’, use the -c flag for count:\n$ grep -c 'ATX INVESTMENTS' data.csv\nThe answer should be 4."
  },
  {
    "objectID": "a-bash-files.html#piping-commands",
    "href": "a-bash-files.html#piping-commands",
    "title": "Appendix E — Bash files",
    "section": "E.9 Piping commands",
    "text": "E.9 Piping commands\nYou can “pipe” the results of one command into another command with the | character, which you’ll find as the shift of your backslash key. You can string commands together with that, so if I just wanted to see the first lines that has ‘ATX INVESTMENTS’, I can do this:\ngrep 'ATX INVESTMENTS' data.csv | head -n 1"
  },
  {
    "objectID": "a-bash-commands.html#man",
    "href": "a-bash-commands.html#man",
    "title": "Appendix F — Bash commands",
    "section": "F.1 man",
    "text": "F.1 man\nIf you are unsure about how any of these terminal commands work, there are manual pages for each one already on your computer. Now, I’m not saying they are extremely well-written and intuitive, but they are there.\n$ man cd\nWill open the manual page for cd and tell you have to change directory.\nBut man pages, as they are called, are a special program themselves, and have a different commands to negotiate around them, as you’ll discover quickly if you try to scroll to see more.\n\nhit f or space to advance one page through the file\nhit j to go down one line\nhit k to go up one line\nhit g to go the the top\nhit q to quit\n\nMoving around the man pages is frustrating at first. There are online versions of these, but the man command doesn’t need the internet. These files are already on your computer.\nMan pages are useful to figure out the options or flags for commands, so you can learn that ls -lt will give you that long list sorted in order of time, most-recently modified at top."
  },
  {
    "objectID": "a-bash-commands.html#h-for-help",
    "href": "a-bash-commands.html#h-for-help",
    "title": "Appendix F — Bash commands",
    "section": "F.2 -h for help",
    "text": "F.2 -h for help\nSometimes there isn’t a man page for a command, but there is help file. If we wanted to look at a list of all the flags for the curl program, we would can get “help with the -h flag. I would type:\n$ curl -h\nThis gives you a list of the flags and arguments for that command, along with other information."
  },
  {
    "objectID": "a-bash-profile.html#shorten-your-terminal-name",
    "href": "a-bash-profile.html#shorten-your-terminal-name",
    "title": "Appendix G — Bash profile",
    "section": "G.1 Shorten your terminal name",
    "text": "G.1 Shorten your terminal name\nMy prompt line in my terminal is really long. It looks like this:\nCHRISTIANs-MacBook-Air-2:~ christian$\nYou can shorten it to just your login name by adding this line to your .bash_profile file, which is found in your home directory: code ~/.bash_profile should open it in VS Code so you can edit it.\n# shortens prompt name\nPS1='\\u:\\W\\$ '\nNow close your Terminal window and open a new one, and the prompt should be shorter, with just your username."
  },
  {
    "objectID": "a-bash-profile.html#hide-the-zsh-message",
    "href": "a-bash-profile.html#hide-the-zsh-message",
    "title": "Appendix G — Bash profile",
    "section": "G.2 Hide the zsh message",
    "text": "G.2 Hide the zsh message\nAdding this to your bash_profile hides the message about changing to zsh.\n# hides zsh prompt\nexport BASH_SILENCE_DEPRECATION_WARNING=1"
  },
  {
    "objectID": "a-bash-profile.html#list-all-long-including-hidden",
    "href": "a-bash-profile.html#list-all-long-including-hidden",
    "title": "Appendix G — Bash profile",
    "section": "G.3 List all long including hidden",
    "text": "G.3 List all long including hidden\nWhen I want to see everything in a directory, including all the hidden files and the other details like size, date, etc., then the command is ls -al. But I put in a alias so all I have to type is ll to get that long list. Add this to your .bash_profile:\nalias ll=\"ls -al\""
  },
  {
    "objectID": "a-git-share.html#goals",
    "href": "a-git-share.html#goals",
    "title": "Appendix H — Git: Sharing code",
    "section": "H.1 Goals",
    "text": "H.1 Goals\nWe’ll now see how you can collaborate in code with a classmate. Our goals are this:\n\nTo pick a partner\nTo clone their repo to your machine.\nTo edit the file and use the git cycle to commit the changes.\nTo go to your own repo and pull the changes made by your partner.\nWe’ll then introduce a code conflict and learn how to resolve it."
  },
  {
    "objectID": "a-git-share.html#clone-a-repo",
    "href": "a-git-share.html#clone-a-repo",
    "title": "Appendix H — Git: Sharing code",
    "section": "H.2 Clone a repo",
    "text": "H.2 Clone a repo\n\nIn your browser, go to your partner’s Github profile and click on Repositories if necessary, then on their repo.\nLook for the button Clone or download. You want to copy the URL for cloning, like this:\n\n\n\n\nclone\n\n\n\nGo into your regular Terminal app and cd into ~/Documents/icj/.\nDo git clone URL but paste the URL you copied. This is the same as you did with your own repo, but now you have downloaded your partner’s repo.\n\nIf you wanted the repo to be a different name on your computer, you would add the name you want after the url. I tend to keep the same name unless there is a good reason not to."
  },
  {
    "objectID": "a-git-share.html#make-your-edits",
    "href": "a-git-share.html#make-your-edits",
    "title": "Appendix H — Git: Sharing code",
    "section": "H.3 Make your edits",
    "text": "H.3 Make your edits\n\nLaunch VS Code if it isn’t already.\nGo to File &gt; New Window.\nUse the VS Code Explorer on the left to find your partner’s folder and open it.\nAdd a new sentence praising your partner’s command of git and Github thus far. Save and close the file.\nAdd a new file to the repo called newfile.md. There are a bunch of different ways you can do this … just choose one method:\n\nYou use your terminal (even in VS Code) and type touch newfile.md.\nYou can use the File &gt; New file menu and name it.\nYou can use the little buttons in the Explorer and name it.\n\nAdd a title and a paragraph of text, using proper Markdown syntax. Save and close your work. (Depending on time, we might talk about and load the Markdown Syntax Linter.)\nOpen the Integrated Terminal and go through the steps to check status, add files, commit files (with message), and push to origin master.\n\n\nBefore you can push, your partner probably needs to go into their Github repo and add you as a collaborator."
  },
  {
    "objectID": "a-git-share.html#pull-your-partners-edits",
    "href": "a-git-share.html#pull-your-partners-edits",
    "title": "Appendix H — Git: Sharing code",
    "section": "H.4 Pull your partner’s edits",
    "text": "H.4 Pull your partner’s edits\n\nGo back to the VS Code window that is your own repo.\nUse the Integrated Terminal to do $ git pull origin master, which will download the changes made by your partner. Yes, pull is the opposite of push."
  },
  {
    "objectID": "a-git-share.html#dealing-with-conflicts",
    "href": "a-git-share.html#dealing-with-conflicts",
    "title": "Appendix H — Git: Sharing code",
    "section": "H.5 Dealing with conflicts",
    "text": "H.5 Dealing with conflicts\nYou might ask yourself … what’s to keep two people from changing the same line of code? Well, they can, and you will. It creates a code conflict that must then be resolved.\nWe’re going to create such a conflict so you can see that this looks like.\n\nH.5.1 Your original change\n\nFind your VS Code window with your own repo and make a change within the first sentence.\nAdd, commit and push your changes to Github.\n\nSo now, in your partner’s copy of your repo, there is a change that they do not have.\n\n\nH.5.2 Change your partner’s repo\n\nGo back into your partner’s repo in VS Code and change that same first sentence, but do it in some different way.\nAdd, commit and try to push your changes. When you try to push, you won’t be able do. You’ll get a message something like this:\n\n$ git push origin master\nTo github.com:critmcdonald/christian-git-practice.git\n ! [rejected]        master -&gt; master (non-fast-forward)\nerror: failed to push some refs to 'github.com:critmcdonald/christian-git-practice.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n(base) ✘-1 ~/Documents/icj/christian-git-practice [master ↓·1↑·1|✔] \nYou can see from the hints in the error message, that there are changes on the remote repo that you don’t have. Git won’t let you push new changes unless you have the current remote copy from the server. That keeps you from screwing up something that is already there (which is kinda what we are doing).\nSo, you have to pull the remote changes first.\n\nDo $ git pull origin master to update your repo. It will work, but you’ll get message about the conflict.\n\n$ git pull origin master\nFrom github.com:critmcdonald/christian-git-practice.git\n * branch            master     -&gt; FETCH_HEAD\nAuto-merging newfile.md\nCONFLICT (content): Merge conflict in newfile.md\nAutomatic merge failed; fix conflicts and then commit the result.\n(base) ✘-1 ~/Documents/icj/christian-git-practice [master|MERGING ↓·1↑·1|✖ 1] \nNow look at the file in VS Code, and it will look pretty crazy. Here is mine:\n\n\n\nclone\n\n\nLet’s break this down:\n\nThe highlighted line with HEAD is the beginning of the conflict.\nThe other highlighted line is the end of the conflict.\nIt’s up to you to choose what should be inbetween those notes. You would of course want to discuss this with your collaborator and come to an agreement on what this should be. Fix up the file the way you have agreed and then remove all the notes and the line between the two pieces.\nOnce you have it the way you like it, save, add, commit and push.\n\n\n\nH.5.3 Get your own repo right\n\nGo back to your own repo in VS Code and do git pull origin master. Depending on how you resolved the conflict together, you might have to go through the process again. You might go look at the repo on Github and copy/paste the line to ensure you have it the same. Add, commit and push as necessary."
  },
  {
    "objectID": "a-git-share.html#good-coding-practices-syntax",
    "href": "a-git-share.html#good-coding-practices-syntax",
    "title": "Appendix H — Git: Sharing code",
    "section": "H.6 Good coding practices: Syntax",
    "text": "H.6 Good coding practices: Syntax\nOne tactic to being a good collaborator with code is to follow syntax, meaning you write code to a shared standard. Each programming language has its own standard, including how many spaces to indent, how you capitialize, etc.\nWe’ve been writing in Markdown, and here are two resources about that syntax:\n\nMarkdown tutorial\nMarkdown syntax"
  },
  {
    "objectID": "a-git-branch.html#feature-branch-workflow",
    "href": "a-git-branch.html#feature-branch-workflow",
    "title": "Appendix I — Git: Branches",
    "section": "I.1 Feature branch workflow",
    "text": "I.1 Feature branch workflow\nThe workflow I typically use is git feature branch workflow, and I use this even when I’m working solo on a project. Review the link above, but this is typically how it works:\n\nmaster is the branch in production or ready for production. It should always “work” with no bugs.\nCreate a feature branch to start on new work. Make your changes and push the branch to the repo.\nCreate a pull request to review changes. This allows you or others to see the changes within Github you are proposing to merge into master. There are tools in Github that allow for official reviews, comments and such. You will also see potential code conflicts.\nMake any changes necessary and push them to the feature branch.\nOnce ready, merge into master. All the history of your commits are added to master, and your newbranch has been deleted on Github.\n\nThere can be more to it in some shops, like rebasing and squashing, but we won’t get into that here."
  },
  {
    "objectID": "a-git-branch.html#lets-do-it",
    "href": "a-git-branch.html#lets-do-it",
    "title": "Appendix I — Git: Branches",
    "section": "I.2 Let’s do it",
    "text": "I.2 Let’s do it\n\nGo into your “myproject-name” repo in VS code and open your Integrated Terminal.\nCreate your branch: $ git checkout -b newbranch.\n\nIf you have the git-bash-prompt installed, you’ll notice the name of the branch has changed in the square brackets.\n\nAdd a new file and call it branchfile.md. Add a title and some text using proper Markdown syntax.\nSave and add and commit your file, but when you push, you need to change that to $ git commit origin newbranch to ensure you are adding to your new branch. (It will give you an error if you try to push to master.) This is the result:\n\n$ git push origin featurebranch\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 354 bytes | 354.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:critmcdonald/myproject-christian.git\n * [new branch]      featurebranch -&gt; featurebranch\n✔ ~/Documents/icj/myproject-christian [featurebranch L|✔]\n\nGo to your repo on Github, and you’ll notice your branchfile.md is not listed. This is because you are looking at your master branch.\nYou can click on branches to see all the branches, or use the branch dropdown to switch to your new branch on Github."
  },
  {
    "objectID": "a-git-branch.html#create-a-pull-request",
    "href": "a-git-branch.html#create-a-pull-request",
    "title": "Appendix I — Git: Branches",
    "section": "I.3 Create a pull request",
    "text": "I.3 Create a pull request\n\nSince we just pushed a new branch, you might notice a yellow alert box that has a button where you can Compare & pull requet. If you have that, go ahead and click on it.\nIf you didn’t have that, you could click on the Pull requests tab at the top, and then choose a New pull request.\n\nThis is what you get:\n\n\n\npull reqeust\n\n\nYou can see from this page that you are merging the branch on the right, newbranch, into the branch on the left, which is master.\n\nHere you can give your pull request a title and a description. Your description might outline what is being changed, how to test it locally and whatever information your collaborators our your future self might want to know.\nClick the Create pull request button to create the pull request.\nThe next screen gives you summary of all the commits that are different from the master. It will list multiple files if there are differences.\n\n\n\n\npull reqeust\n\n\n\nThis process also outlines any conflicts there might be between the feature branch and master. You’ll have to fix them before you can merge.\nThe pull request also allows yourself and collaborators review all your changes and make comments.\nGo ahead and click Merge pull request and then Confirm merge to merge the branches.\n\nAt this point, you can delete the newbranch in Github, as indicated with a button. You don’t have to since all the commit history is now in master, but it’s a good idea to keep everything clean.\nNow let’s clean up our local repo.\n\nGo back to VS Code and into the Integrated Terminal, and switch back to master using git checkout master. It will look like this:\n\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n(base) ✔ ~/Documents/icj/myproject-christian [master|✔]\nYou might notice this says you “branch is up-to-date with ‘origin/master’, and that is confusing, because we know we merged changes that are on Github. This message is referring to your LOCAL branch, not the one on Github. We still need to pull in those changes:\n$ git pull origin master\nFrom github.com:critmcdonald/myproject-christian\n * branch            master     -&gt; FETCH_HEAD\nUpdating b36328f..c85740d\nFast-forward\n branchfile.md | 3 +++\n 1 file changed, 3 insertions(+)\n create mode 100644 branchfile.md\n✔ ~/Documents/icj/myproject-christian [master|✔]\nThis will pull the files from Github and bring them local.\nYou can always check what branches you have locally with $ git branch. Try it.\n16:13 $ git branch\n* master\n  newbranch\nThe newbranch on Github went away when we merged it, but now we can delete it locally:\n$ git branch -D newbranch\nDeleted branch newbranch (was 1345054).\n✔ ~/Documents/icj/myproject-christian [master|✔] \nThe capitalization of -D flag matters."
  },
  {
    "objectID": "a-git-branch.html#git-commands",
    "href": "a-git-branch.html#git-commands",
    "title": "Appendix I — Git: Branches",
    "section": "I.4 Git commands",
    "text": "I.4 Git commands\nWe used a ton of git commands, and it was only a fraction. It’s a complex program. There are tons of cheet sheets out there on the googles, but this one is pretty clean."
  }
]